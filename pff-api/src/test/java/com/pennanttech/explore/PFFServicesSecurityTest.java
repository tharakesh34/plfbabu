package com.pennanttech.explore;

import static org.junit.Assert.assertEquals;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;

import org.apache.commons.codec.binary.Base64;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.BeforeClass;
import org.testng.annotations.Test;

/*
 * This is test program to validate the security implementation of PFF.
 * 
 * 1. PFF application should be running in tomcat at http://localhost:8080/pff-api for running this test.
 * 2. Acadamic services should be running in tomcat.
 * 
 * This has test to authenticate with userid and password in the request header.
 * This has test to authenticate with Token generated by server after validating the userid/password.
 * This has test to authenticate with the Token assigned to the server which is sending the request. 
 */

public class PFFServicesSecurityTest {

	private final static String ENDPOINT_ADDRESS = "http://localhost:8080/pff-api/services/academicRest";
	private final static String WADL_ADDRESS = ENDPOINT_ADDRESS + "?_wadl";
	private final static String ACADEMIC_SERVICE_PATH = "academicService/";
	private final static String ACADEMIC_SERVICE_ID3_DETAILS = ACADEMIC_SERVICE_PATH + "getAcademicDetailsRequest/3";

	@BeforeClass
	public static void initialize() throws Exception {
		waitForWADL();
	}

	// Optional step - may be needed to ensure that by the time individual
	// tests start running the endpoint has been fully initialized
	@SuppressWarnings("static-access")
	private static void waitForWADL() throws Exception {
		WebClient client = WebClient.create(WADL_ADDRESS);
		// wait for 20 secs or so
		for (int i = 0; i < 20; i++) {
			Thread.currentThread().sleep(1000);
			Response response = client.get();
			if (response.getStatus() == 200) {
				break;
			}
		}
		// no WADL is available yet - throw an exception or give tests a chance
		// to run anyway
	}

	@Test(enabled = false)
	public void testUserAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "sso:test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 200 ", 200, response.getStatus());

	}

	@Test(enabled = false)
	public void testUserWithNoCololanAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "ssotest";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[EA007]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[User InActive]", headerMap.get("StatusDesc").toString());

	}

	@Test(enabled = false)
	public void testUserWithNoPasswordAndColonAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "sso";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99002]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Invalid User/Password]", headerMap.get("StatusDesc").toString());

	}

	@Test(enabled = false)
	public void testUserWithNoPasswordWithColonAndColonAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "sso:";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99002]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Invalid User/Password]", headerMap.get("StatusDesc").toString());

	}

	@Test(enabled = false)
	public void testUserWithNoUsernameAndColonAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99002]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Invalid User/Password]", headerMap.get("StatusDesc").toString());

	}

	@Test(enabled = false)
	public void testUserWithNoUsernameWithColonAuthontication1() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = ":test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99002]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Invalid User/Password]", headerMap.get("StatusDesc").toString());

	}

	@Test(enabled = false)
	public void testNoChannelUserAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "sso:test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);
		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99003]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Channel Authentication Failed]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testNoAuthkeyAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99001]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[AuthDetails Not Available]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testUserInvalidUserAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "so:test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[EA007]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[User InActive]", headerMap.get("StatusDesc").toString());
	}

	@Test(enabled = false)
	public void testUserTokenAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);

		client.path(ACADEMIC_SERVICE_ID3_DETAILS);

		String authorization = "sso:test";
		String encodedAuth = Base64.encodeBase64String(authorization.getBytes());
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.AuthKey.get(), encodedAuth);
		Response response = client.get();

		String token = response.getHeaders().get("Token").toString()
				.substring(1, response.getHeaders().get("Token").toString().length() - 1);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.Token.get(), token);

		response = client.get();
		assertEquals("Response status not 200 ", 200, response.getStatus());
	}

	@Test(enabled = false)
	public void testNoChannelUserTokenAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.Token.get(), "HDkgfzcO");

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99003]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Channel Authentication Failed]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testNoTokenUserAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99001]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[AuthDetails Not Available]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testTokenExpireUserAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.Token.get(), "nWTCIsYK");
		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[EA006]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[User Token Authentication Failed]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testInvalidUserTokenAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.User.get());
		client.header(CONSTANTS.Token.get(), "dggdgdd");
		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[EA006]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[User Token Authentication Failed]", headerMap.get("StatusDesc")
				.toString());
	}

	// Device Test cases

	@Test(enabled = false)
	public void testDeviceAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.Device.get());
		client.header(CONSTANTS.Token.get(), "ddp");
		Response response = client.get();
		assertEquals("Response status not 200 ", 200, response.getStatus());
	}

	@Test(enabled = false)
	public void testNoChannelDeviceAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.Token.get(), "ddp");

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[99003]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Channel Authentication Failed]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testNoTokenDeviceAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.Device.get());
		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
		MultivaluedMap<String, Object> headerMap = response.getHeaders();
		assertEquals("Error code not matching", "[EA010]", headerMap.get("StatusCode").toString());
		assertEquals("Error Message not matching", "[Token Details Not Available]", headerMap.get("StatusDesc")
				.toString());
	}

	@Test(enabled = false)
	public void testInvalidTokenDeviceAuthontication() {
		WebClient client = WebClient.create(ENDPOINT_ADDRESS);
		client.accept(MediaType.APPLICATION_JSON);
		client.path(ACADEMIC_SERVICE_ID3_DETAILS);
		client.header(CONSTANTS.ChannelId.get(), CONSTANTS.Device.get());
		client.header(CONSTANTS.Token.get(), "invalidToken");

		Response response = client.get();
		assertEquals("Response status not 401 ", 401, response.getStatus());
	}

}