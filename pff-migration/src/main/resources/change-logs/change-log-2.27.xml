<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
	<property name="add.schema" value="dbo." dbms="mssql" />
	<property name="add.schema" value=" " dbms="oracle" />
	<property name="call.substr" value="substring" dbms="mssql" />
	<property name="call.substr" value="substr" dbms="oracle" />
	<property name="call.auditdb" value="PFFBFSQCAudit.." dbms="mssql" />
	<property name="call.auditdb" value=" " dbms="oracle" />
	<property name="call.concatenate" value="+" dbms="mssql" />
	<property name="call.concatenate" value="||" dbms="oracle" />

<changeSet id="1" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFCustomerIncomes_AView">
SELECT     T1.CustID, T1.CustIncomeType, T2.IncomeTypeDesc lovDescCustIncomeTypeName, T1.CustIncome, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.IncomeExpense, T1.Margin, T1.Category, 
                      T3.CategoryDesc lovDescCategoryName, T1.JointCust
FROM          WIFCustomerIncomes T1 INNER JOIN
                       BMTIncomeTypes T2 ON T1.CustIncomeType = T2.IncomeTypeCode AND T1.IncomeExpense = T2.IncomeExpense AND T1.Category = T2.Category INNER JOIN
                       BMTIncomeCategory T3 ON T1.Category = T3.IncomeCategory
</createView>   </changeSet>
<changeSet id="2" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFCustomers_AView">
SELECT     T1.CustID, T1.CustCtgCode, T1.CustTypeCode, T1.CustShrtName, T1.CustDOB, T1.CustGenderCode, T1.CustSector, T1.CustSubSector, 
                      T1.CustMaritalSts, T1.CustEmpSts, T1.CustIsBlackListed, T1.CustBaseCcy, T1.CustNationality, T1.NoOfDependents, T1.CustCRCPR, T1.JointCust, 
                      T1.CustBlackListDate, T1.ExistCustID, T2.CustTypeDesc lovDescCustTypeCodeName, T3.MaritalStsDesc lovDescCustMaritalStsName, 
                      T4.EmpStsDesc lovDescCustEmpStsName, T5.CcyDesc lovDescCustBaseCcyName, T6.SectorDesc lovDescCustSectorName, 
                      T7.SubSectorDesc lovDescCustSubSectorName, T8.NationalityDesc lovDescCustNationalityName, 
                      T9.GenderDesc lovDescCustGenderCodeName, T10.CustCtgDesc lovDescCustCtgCodeName, T1.ElgRequired,  
                      T1.CustSalutationCode,T1.SalariedCustomer,T1.EmpName,
                      T12.EmpName lovDescEmpName,T1.EmpDesg,T13.DesgDesc lovDescEmpDesg,T1.EmpDept,
                      T14.DeptDesc lovDescEmpDept,T1.TotalIncome,T1.TotalExpense,T1.CustSegment,T15.SegmentDesc LovDescCustSegmentName
FROM          WIFCustomers T1 LEFT OUTER JOIN
                       RMTCustTypes T2 ON T1.CustTypeCode = T2.CustTypeCode LEFT OUTER JOIN
                       BMTMaritalStatusCodes T3 ON T1.CustMaritalSts = T3.MaritalStsCode LEFT OUTER JOIN
                       BMTEmpStsCodes T4 ON T1.CustEmpSts = T4.EmpStsCode LEFT OUTER JOIN
                       RMTCurrencies T5 ON T1.CustBaseCcy = T5.CcyCode LEFT OUTER JOIN
                       BMTSectors T6 ON T1.CustSector = T6.SectorCode LEFT OUTER JOIN
                       BMTSubSectors T7 ON T1.CustSector = T7.SectorCode AND T1.CustSubSector = T7.SubSectorCode LEFT OUTER JOIN
                       BMTNationalityCodes T8 ON T1.CustNationality = T8.NationalityCode LEFT OUTER JOIN
                       BMTGenders T9 ON T1.CustGenderCode = T9.GenderCode LEFT OUTER JOIN
                       BMTCustCategories T10 ON T1.CustCtgCode = T10.CustCtgCode LEFT OUTER JOIN
                       EmployerDetail T12 ON T1.EmpName = T12.EmployerId LEFT OUTER JOIN
                       BMTDesignations T13 ON T1.EmpDesg = T13.DesgCode LEFT OUTER JOIN
                       BMTDepartments T14 ON T1.EmpDept = T14.DeptCode LEFT OUTER JOIN
                       BMTSegments T15 ON T1.CustSegment = T15.SegmentCode
</createView>   </changeSet>
<changeSet id="3" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinanceMain_AView">
 SELECT     T1.FinReference, T1.NumberOfTerms, T1.GrcPeriodEndDate, T1.AllowGrcPeriod, T1.GraceBaseRate, T1.GraceSpecialRate, T1.GrcPftRate, T1.GrcPftFrq, 
                      T1.NextGrcPftDate, T1.AllowGrcPftRvw, T1.GrcPftRvwFrq, T1.NextGrcPftRvwDate, T1.AllowGrcCpz, T1.GrcCpzFrq, T1.NextGrcCpzDate, T1.RepayBaseRate, 
                      T1.RepaySpecialRate, T1.RepayProfitRate, T1.RepayFrq, T1.NextRepayDate, T1.RepayPftFrq, T1.NextRepayPftDate, T1.AllowRepayRvw, T1.RepayRvwFrq, 
                      T1.NextRepayRvwDate, T1.AllowRepayCpz, T1.RepayCpzFrq, T1.NextRepayCpzDate, T1.MaturityDate, T1.CpzAtGraceEnd, T1.DownPayment, T1.GraceFlatAmount, 
                      T1.ReqRepayAmount, T1.TotalProfit, T1.TotalCpz, T1.TotalGrossPft, T1.TotalGrossGrcPft, T1.TotalGracePft, T1.TotalGraceCpz, T1.GrcRateBasis, T1.RepayRateBasis, 
                      T1.FinType, T1.FinRemarks, T1.FinCcy, T1.ScheduleMethod, T1.ProfitDaysBasis, T1.ReqMaturity, T1.CalTerms, T1.CalMaturity, T1.FirstRepay, T1.LastRepay, 
                      T1.FinStartDate, T1.FinAmount, T1.FinRepaymentAmount, T1.CustID, T1.Defferments, T1.PlanDeferCount, T1.FinIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CcyDesc lovDescFinCcyName, 
                      T3.SchdMethodDesc lovDescScheduleMethodName, T4.IntRateBasisDesc lovDescProfitDaysBasisName, T5.BRTypeDesc lovDescGraceBaseRateName, 
                      T6.SRTypeDesc lovDescGraceSpecialRateName, T7.FinTypeDesc lovDescFinTypeName, T8.BRTypeDesc lovDescRepayBaseRateName, 
                      T9.SRTypeDesc lovDescRepaySpecialRateName, T2.CcyEditField lovDescFinFormatter, T7.FinIsAlwMD lovDescFinIsAlwMD, T1.FinBranch, T1.FinSourceID, 
                      T1.AllowedDefRpyChange, T1.AvailedDefRpyChange, T1.AllowedDefFrqChange, T1.AvailedDefFrqChange, T7.FinMaxAmount lovDescFinMaxAmt, 
                      T7.FinMinAmount lovDescFinMinAmount, T7.FinIsAlwDifferment lovDescFinAlwDeferment, T1.MinDownpayPerc, 
                      T7.FinIsDwPayRequired lovDescDwnPayReq, T1.RecalType, T1.FinAssetValue, T7.FinMaxDifferment lovDescFinMaxDifferment, T1.LastRepayDate, 
                      T1.LastRepayPftDate, T1.LastRepayRvwDate, T1.LastRepayCpzDate, T1.DisbAccountId, T1.RepayAccountId, T11.ScreenCode lovDescScreenCode, T1.AllowGrcRepay, 
                      T1.GrcSchdMthd, T1.RepayMargin, T1.GrcMargin, T1.NextDepDate, T1.LastDepDate, T7.FinRvwRateApplFor, T7.FinGrcRvwRateApplFor, T1.TotalRepayAmt, 
                      T1.ClosingStatus, T1.FinApprovedDate, T7.FinCategory lovDescProductCodeName, T1.DownPayBank, T1.DownPaySupl, T1.GraceTerms, T1.GrcProfitDaysBasis, 
                      T1.StepFinance,T1.StepType, T1.StepPolicy, T1.AlwManualSteps, T1.NoOfSteps, T1.TakafulRequired, T1.TakafulFrq, 
                      T1.WaiverReason, T1.TakafulRate, T1.TakafulRef, T1.LinkedFinRef, T7.Product LovDescFinProduct, T1.GrcMinRate, T1.GrcMaxRate, T1.RpyMinRate, 
                      T1.RpyMaxRate, T1.PptTakafulRequired, T1.PptTakafulFrq, T1.PptWaiverReason, T1.PptTakafulRate, T1.PptTakafulRef, T1.ManualSchedule, T1.TakeOverFinance, 
                      T1.GrcAdvBaseRate, T1.GrcAdvMargin, T1.GrcAdvPftRate, T1.RpyAdvBaseRate, T1.RpyAdvMargin, T1.RpyAdvPftRate, T12.BRTypeDesc GrcAdvBaseRateDesc, 
                      T13.BRTypeDesc RpyAdvBaseRateDesc, T1.SupplementRent, T1.IncreasedCost, T1.CreditInsAmt, T1.feeAccountId, T1.TDSApplicable,T1.InsuranceAmt,T1.DeductInsDisb,
                      T1.AlwBPI , T1.BpiTreatment , T1.PlanEMIHAlw , T1.PlanEMIHMethod ,  T1.PlanEMIHMaxPerYear , T1.PlanEMIHMax , T1.PlanEMIHLockPeriod , T1.PlanEMICpz , T1.CalRoundingMode , T1.AlwMultiDisb
FROM          WIFFinanceMain T1 INNER JOIN
                       RMTCurrencies T2 ON T1.FinCcy = T2.CcyCode INNER JOIN
                       BMTSchdMethod T3 ON T1.ScheduleMethod = T3.SchdMethod INNER JOIN
                       BMTIntRateBasisCodes T4 ON T1.ProfitDaysBasis = T4.IntRateBasisCode INNER JOIN
                       RMTBaseRateCodes T5 ON T1.GraceBaseRate = T5.BRType INNER JOIN
                       RMTSplRateCodes T6 ON T1.GraceSpecialRate = T6.SRType INNER JOIN
                       RMTFinanceTypes T7 ON T1.FinType = T7.FinType INNER JOIN
                       RMTBaseRateCodes T8 ON T1.RepayBaseRate = T8.BRType INNER JOIN
                       RMTSplRateCodes T9 ON T1.RepaySpecialRate = T9.SRType LEFT OUTER JOIN
                       LMTFinanceWorkFlowDef_AView T11 ON T7.FinType = T11.FinType LEFT OUTER JOIN
                       RMTBaseRateCodes T12 ON T1.GrcAdvBaseRate = T12.BRType LEFT OUTER JOIN
                       RMTBaseRateCodes T13 ON T1.RpyAdvBaseRate = T13.BRType
</createView>   </changeSet>
<changeSet id="4" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinDefermentDetail_View">
SELECT     T1.FinReference, T1.DeferedSchdDate, T1.DefSchdProfit, T1.DefSchdPrincipal, T1.DeferedRpyDate, T1.DefRpySchdPft, T1.DefRpySchdPri, 
                 T1.DefRpySchdPftBal, T1.DefRpySchdPriBal, T1.DefPaidPftTillDate, T1.DefPaidPriTillDate, T1.DefPftBalance, T1.DefPriBalance, T1.Version, 
                 T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          WIFFinDefermentDetail_Temp T1 

UNION ALL					  
SELECT     T1.FinReference, T1.DeferedSchdDate, T1.DefSchdProfit, T1.DefSchdPrincipal, T1.DeferedRpyDate, T1.DefRpySchdPft, T1.DefRpySchdPri, 
                 T1.DefRpySchdPftBal, T1.DefRpySchdPriBal, T1.DefPaidPftTillDate, T1.DefPaidPriTillDate, T1.DefPftBalance, T1.DefPriBalance, T1.Version, 
                 T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          WIFFinDefermentDetail T1 			  
WHERE     NOT EXISTS
                       (SELECT         1
                         FROM            WIFFinDefermentDetail_Temp
                         WHERE          FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="5" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinDefermentHeader_View">
SELECT     T1.FinReference, T1.DeferedSchdDate, T1.DefSchdProfit, T1.DefSchdPrincipal, T1.DefRecalType, T1.DefTillDate, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          WIFFinDefermentHeader_Temp T1
			
UNION ALL
SELECT     T1.FinReference, T1.DeferedSchdDate, T1.DefSchdProfit, T1.DefSchdPrincipal, T1.DefRecalType, T1.DefTillDate, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          WIFFinDefermentHeader T1 	
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFFinDefermentHeader_Temp
                            WHERE      FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="6" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinDisbursementDetails_View">
SELECT     T1.FinReference, T1.DisbDate, T1.DisbSeq, T1.DisbDesc, T1.DisbAccountId, T1.DisbAmount, T1.DisbDisbursed, T1.DisbIsActive, T1.DisbRemarks, 
                      T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T1.DisbReqDate, T1.FeeChargeAmt,T1.InsuranceAmt
FROM          WIFFinDisbursementDetails_Temp T1 

UNION ALL
SELECT     T1.FinReference, T1.DisbDate, T1.DisbSeq, T1.DisbDesc, T1.DisbAccountId, T1.DisbAmount, T1.DisbDisbursed, T1.DisbIsActive, T1.DisbRemarks, 
                      T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T1.DisbReqDate, T1.FeeChargeAmt,T1.InsuranceAmt
FROM          WIFFinDisbursementDetails T1 		
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFFinDisbursementDetails_Temp
                            WHERE      FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="7" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinRepayInstruction_TView">
SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM         WIFFinRepayInstruction_Temp T1
</createView>   </changeSet>
<changeSet id="8" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinRepayInstruction_View">
SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM          WIFFinRepayInstruction_Temp T1 
					  
UNION ALL
SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM          WIFFinRepayInstruction T1 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFFinRepayInstruction_Temp
                            WHERE      FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="9" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinScheduleDetails_TView">
SELECT     T1.FinReference, T1.SchSeq, T1.SchDate, T1.PftOnSchDate, T1.RepayOnSchDate, T1.CpzOnSchDate, T1.RvwOnSchDate, T1.DisbOnSchDate, T1.Defered, 
                      T1.DeferedPay, T1.DownpaymentOnSchDate, T1.BalanceForPftCal, T1.BaseRate, T1.SplRate, T1.ActRate, T1.NoOfDays, T1.DayFactor, T1.ProfitCalc, T1.ProfitSchd, 
                      T1.PrincipalSchd, T1.RepayAmount, T1.ProfitBalance, T1.DisbAmount, T1.CpzAmount, T1.DefProfitSchd, T1.DownPaymentAmount, T1.DefPrincipalSchd, 
                      T1.ClosingBalance, T1.ProfitFraction, T1.DefProfitBal, T1.PrvRepayAmount, T1.DefPrincipalBal, T1.SchdPftPaid, T1.SchPftPaid, T1.SchdPriPaid, T1.SchPriPaid, 
                      T1.Specifier, T1.SchDetailIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T1.DefProfit, T1.DefPrincipal, T1.DefRepaySchd, T1.DefSchdDate, T1.SchdMethod, T1.MrgRate, T1.DefSchdPftPaid, T1.DefSchdPriPaid, 
                      T1.CalOnIndRate, T1.DefSchPftPaid, T1.DefSchPriPaid, T1.CalculatedRate, T1.FeeChargeAmt, T1.OrgPft, T1.OrgPri, T1.OrgEndBal, T1.OrgPlanPft, T1.FeeSchd, 
                      T1.SchdFeePaid, T1.SchdFeeOS, T1.TakafulFeeSchd, T1.SchdTakafulFeePaid,T1.PptTakafulFee, T1.PptTakafulFeePaid,
                      TakafulRate, PptTakafulRate,AdvPftRate ,AdvProfit , AdvRepayAmount ,AdvBaseRate ,AdvMargin ,AdvCalRate,SuplRent , 
                      IncrCost , SuplRentPaid , IncrCostPaid , CreditInsAmt , CreditInsPaid ,RolloverOnSchDate, RolloverAmount, RolloverAmountPaid, TDSAmount,PftDaysBasis,InsuranceAmt,InstNumber,BpiOrHoliday,FrqDate
FROM         WIFFinScheduleDetails_Temp T1
</createView>   </changeSet>
<changeSet id="10" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinScheduleDetails_View">
SELECT     T1.FinReference, T1.SchSeq, T1.SchDate, T1.PftOnSchDate, T1.RepayOnSchDate, T1.CpzOnSchDate, T1.RvwOnSchDate, T1.DisbOnSchDate, T1.Defered, 
                      T1.DeferedPay, T1.DownpaymentOnSchDate, T1.BalanceForPftCal, T1.BaseRate, T1.SplRate, T1.ActRate, T1.NoOfDays, T1.DayFactor, T1.ProfitCalc, T1.ProfitSchd, 
                      T1.PrincipalSchd, T1.RepayAmount, T1.ProfitBalance, T1.DisbAmount, T1.CpzAmount, T1.DefProfitSchd, T1.DownPaymentAmount, T1.DefPrincipalSchd, 
                      T1.ClosingBalance, T1.ProfitFraction, T1.DefProfitBal, T1.PrvRepayAmount, T1.DefPrincipalBal, T1.SchdPftPaid, T1.SchPftPaid, T1.SchdPriPaid, T1.SchPriPaid, 
                      T1.Specifier, T1.SchDetailIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T1.DefProfit, T1.DefPrincipal, T1.DefRepaySchd, T1.DefSchdDate, T1.SchdMethod, T1.MrgRate, T1.DefSchdPftPaid, T1.DefSchdPriPaid, 
                      T1.CalOnIndRate, T1.DefSchPftPaid, T1.DefSchPriPaid, T1.CalculatedRate, T1.FeeChargeAmt, T1.OrgPft, T1.OrgPri, T1.OrgEndBal, T1.OrgPlanPft, T1.FeeSchd, 
                      T1.SchdFeePaid, T1.SchdFeeOS, T1.TakafulFeeSchd, T1.SchdTakafulFeePaid,T1.PptTakafulFee, T1.PptTakafulFeePaid,
                      TakafulRate, PptTakafulRate,AdvPftRate ,AdvProfit , AdvRepayAmount ,AdvBaseRate ,AdvMargin ,AdvCalRate,SuplRent , 
                      IncrCost , SuplRentPaid , IncrCostPaid , CreditInsAmt , CreditInsPaid ,RolloverOnSchDate, RolloverAmount, RolloverAmountPaid, TDSAmount,PftDaysBasis,InsuranceAmt,T1.InstNumber, T1.BpiOrHoliday, T1.FrqDate
FROM         WIFFinScheduleDetails_Temp T1
UNION ALL
SELECT     T1.FinReference, T1.SchSeq, T1.SchDate, T1.PftOnSchDate, T1.RepayOnSchDate, T1.CpzOnSchDate, T1.RvwOnSchDate, T1.DisbOnSchDate, T1.Defered, 
                      T1.DeferedPay, T1.DownpaymentOnSchDate, T1.BalanceForPftCal, T1.BaseRate, T1.SplRate, T1.ActRate, T1.NoOfDays, T1.DayFactor, T1.ProfitCalc, T1.ProfitSchd, 
                      T1.PrincipalSchd, T1.RepayAmount, T1.ProfitBalance, T1.DisbAmount, T1.CpzAmount, T1.DefProfitSchd, T1.DownPaymentAmount, T1.DefPrincipalSchd, 
                      T1.ClosingBalance, T1.ProfitFraction, T1.DefProfitBal, T1.PrvRepayAmount, T1.DefPrincipalBal, T1.SchdPftPaid, T1.SchPftPaid, T1.SchdPriPaid, T1.SchPriPaid, 
                      T1.Specifier, T1.SchDetailIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T1.DefProfit, T1.DefPrincipal, T1.DefRepaySchd, T1.DefSchdDate, T1.SchdMethod, T1.MrgRate, T1.DefSchdPftPaid, T1.DefSchdPriPaid, 
                      T1.CalOnIndRate, T1.DefSchPftPaid, T1.DefSchPriPaid, T1.CalculatedRate, T1.FeeChargeAmt, T1.OrgPft, T1.OrgPri, T1.OrgEndBal, T1.OrgPlanPft, T1.FeeSchd, 
                      T1.SchdFeePaid, T1.SchdFeeOS, T1.TakafulFeeSchd, T1.SchdTakafulFeePaid,T1.PptTakafulFee, T1.PptTakafulFeePaid,
                      TakafulRate, PptTakafulRate     ,AdvPftRate ,AdvProfit , AdvRepayAmount     ,AdvBaseRate ,AdvMargin ,AdvCalRate  ,SuplRent , 
                      IncrCost , SuplRentPaid , IncrCostPaid  , CreditInsAmt , CreditInsPaid ,RolloverOnSchDate, RolloverAmount, RolloverAmountPaid,TDSAmount,PftDaysBasis,InsuranceAmt, T1.InstNumber, T1.BpiOrHoliday, T1.FrqDate

FROM         WIFFinScheduleDetails T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFFinScheduleDetails_Temp
                            WHERE      FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="11" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFFinStepPolicyDetail_View">
SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         WIFFinStepPolicyDetail_Temp T1

UNION ALL 
SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         WIFFinStepPolicyDetail T1

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFFinStepPolicyDetail_Temp
                            WHERE      FinReference = T1.FinReference AND StepNo = T1.StepNo)
</createView>   </changeSet>
<changeSet id="12" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserRights_View">
SELECT  T9.RightID, T9.RightType, T9.RightName, T8.AccessType, T9.Version, T1.UsrID, T10.AppCode,T5.RoleCd,T7.GrpCode
FROM          SecUsers T1 INNER JOIN
                       SecUserOperations T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecOperations T3 ON T2.OprID = T3.OprID INNER JOIN
                       SecOperationRoles T4 ON T3.OprID = T4.OprID INNER JOIN
                       SecRoles T5 ON T4.RoleID = T5.RoleID INNER JOIN
                       SecRoleGroups T6 ON T5.RoleID = T6.RoleID INNER JOIN
                       SecGroups T7 ON T6.GrpID = T7.GrpID INNER JOIN
                       SecGroupRights T8 ON T7.GrpID = T8.GrpID INNER JOIN
                       SecRights T9 ON T8.RightID = T9.RightID INNER JOIN
                       PTApplicationDetails T10 ON T5.RoleApp = T10.AppID
</createView>   </changeSet>
<changeSet id="13" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserRightsAll_View">
SELECT T1.UsrID, T10.AppCode, T5.RoleCd, T7.GrpCode, 
	T9.RightID, T9.RightType, T9.RightName, T9.Version, T9.LastMntBy, 
	T9.LastMntOn, T9.RecordStatus, T9.RoleCode, T9.NextRoleCode, 
	T9.TaskId, T9.NextTaskId, T9.RecordType, T9.WorkflowId 
FROM 
	 SecUsers T1 INNER JOIN 
	 SecUserOperations T2 ON T1.UsrID = T2.UsrID INNER JOIN 
	 SecOperations T3 ON T2.OprID = T3.OprID INNER JOIN 
	 SecOperationRoles T4 ON T3.OprID = T4.OprID INNER JOIN 
	 SecRoles T5 ON T4.RoleID = T5.RoleID INNER JOIN 
	 SecRoleGroups T6 ON T5.RoleID = T6.RoleID INNER JOIN 
	 SecGroups T7 ON T6.GrpID = T7.GrpID INNER JOIN 
	 SecGroupRights T8 ON T7.GrpID = T8.GrpID INNER JOIN 
	 SecRights T9 ON T8.RightID = T9.RightID INNER JOIN 
	 PTApplicationDetails T10 ON T5.RoleApp = T10.AppID
</createView>   </changeSet>
<changeSet id="14" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserRoles_View">
SELECT     T1.UsrID, T3.RoleID, T3.RoleApp, T4.AppCode, T3.RoleCd, T3.RoleDesc, T3.RoleCategory, T3.Version, T3.LastMntBy, T3.LastMntOn, 
                      T1.UsrEmail
FROM          SecUsers T1 INNER JOIN
                       SecUserRoles T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecRoles T3 ON T2.RoleID = T3.RoleID INNER JOIN
                       PTApplicationDetails T4 ON T4.AppID = T3.RoleApp
</createView>   </changeSet>
<changeSet id="15" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasProductCategory_AView">
SELECT     T1.ProductCtg, T1.ProductCtgDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active
FROM        VasProductCategory T1
</createView>   </changeSet>
<changeSet id="16" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasProductCategory_View">
SELECT     T1.ProductCtg, T1.ProductCtgDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active
FROM        VasProductCategory_Temp T1
UNION ALL
SELECT     T1.ProductCtg, T1.ProductCtgDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active
FROM        VasProductCategory T1

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          VasProductCategory_Temp
                            WHERE      ProductCtg = T1.ProductCtg)
</createView>   </changeSet>
<changeSet id="17" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasProductType_AView">
SELECT     T1.ProductType, T1.ProductTypeDesc,T1.ProductCtg, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active, T2.ProductCtgDesc
FROM        VasProductType T1 INNER JOIN
			VasProductCategory T2 ON T1.ProductCtg = T2.ProductCtg
</createView>   </changeSet>
<changeSet id="18" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasProductType_AView">
SELECT     T1.ProductType, T1.ProductTypeDesc,T1.ProductCtg, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active, T2.ProductCtgDesc
FROM        VasProductType_Temp T1 INNER JOIN
			VasProductCategory T2 ON T1.ProductCtg = T2.ProductCtg

UNION ALL
SELECT     T1.ProductType, T1.ProductTypeDesc,T1.ProductCtg, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active,T2.ProductCtgDesc
FROM        VasProductType T1 INNER JOIN
			VasProductCategory T2 ON T1.ProductCtg = T2.ProductCtg

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          VasProductType_Temp
                            WHERE      ProductType = T1.ProductType)
</createView>   </changeSet>
<changeSet id="19" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VASRecording_Aview">
SELECT    T1.ProductCode, T1.PostingAgainst, T1.PrimaryLinkRef, T1.VasReference, T1.Fee, T1.RenewalFee, T1.FeePaymentMode,
          T1.ValueDate, T1.AccrualTillDate, T1.RecurringDate, T1.DsaId, T1.DmaId, T1.FulfilOfficerId,T1.ReferralId,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T2.ProductDesc , T3.ROfficerDesc DsaIdDesc,
          T4.ROfficerDesc DmaIdDesc,T5.ROfficerDesc FulfilOfficerIdDesc,T6.ROfficerDesc ReferralIdDesc,
          T7.ProductType, T7.ProductTypeDesc,  T8.ProductCtg, T8.ProductCtgDesc ,T9.DealerName ManufacturerDesc,VasStatus,FinanceProcess
          
          FROM   VASRecording  T1 LEFT OUTER JOIN
          VasStructure  T2 ON T1.ProductCode = T2.ProductCode LEFT OUTER JOIN
          RelationshipOfficers  T3 ON T1.DsaId = T3.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T4 ON T1.DmaId = T4.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T5 ON T1.FulfilOfficerId = T5.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T6 ON T1.ReferralId = T6.ROfficerCode INNER JOIN 
          VasProductType  T7 ON T7.ProductType = T2.ProductType INNER JOIN
          VasProductCategory  T8 ON T7.ProductCtg = T8.ProductCtg LEFT OUTER JOIN
          AMTVehicleDealer T9 ON T2.ManufacturerId = T9.DealerId
</createView>   </changeSet>
<changeSet id="20" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VASRecording_view">
SELECT    T1.ProductCode, T1.PostingAgainst, T1.PrimaryLinkRef, T1.VasReference, T1.Fee, T1.RenewalFee, T1.FeePaymentMode,
          T1.ValueDate, T1.AccrualTillDate, T1.RecurringDate, T1.DsaId, T1.DmaId, T1.FulfilOfficerId,T1.ReferralId,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T2.ProductDesc , T3.ROfficerDesc DsaIdDesc,
          T4.ROfficerDesc DmaIdDesc,T5.ROfficerDesc FulfilOfficerIdDesc,T6.ROfficerDesc ReferralIdDesc,
          T7.ProductType, T7.ProductTypeDesc,  T8.ProductCtg, T8.ProductCtgDesc ,T9.DealerName ManufacturerDesc,VasStatus,FinanceProcess
          
          FROM   VASRecording_Temp  T1 LEFT OUTER JOIN
          VasStructure  T2 ON T1.ProductCode = T2.ProductCode LEFT OUTER JOIN
          RelationshipOfficers  T3 ON T1.DsaId = T3.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T4 ON T1.DmaId = T4.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T5 ON T1.FulfilOfficerId = T5.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T6 ON T1.ReferralId = T6.ROfficerCode INNER JOIN 
          VasProductType  T7 ON T7.ProductType = T2.ProductType INNER JOIN
          VasProductCategory  T8 ON T7.ProductCtg = T8.ProductCtg  LEFT OUTER JOIN
          AMTVehicleDealer T9 ON T2.ManufacturerId = T9.DealerId
UNION ALL
SELECT    T1.ProductCode, T1.PostingAgainst, T1.PrimaryLinkRef, T1.VasReference, T1.Fee, T1.RenewalFee, T1.FeePaymentMode,
          T1.ValueDate, T1.AccrualTillDate, T1.RecurringDate, T1.DsaId, T1.DmaId, T1.FulfilOfficerId,T1.ReferralId,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T2.ProductDesc , T3.ROfficerDesc DsaIdDesc,
          T4.ROfficerDesc DmaIdDesc,T5.ROfficerDesc FulfilOfficerIdDesc,T6.ROfficerDesc ReferralIdDesc,
          T7.ProductType, T7.ProductTypeDesc,  T8.ProductCtg, T8.ProductCtgDesc ,T9.DealerName ManufacturerDesc,VasStatus,FinanceProcess
          
          FROM   VASRecording  T1 LEFT OUTER JOIN
          VasStructure  T2 ON T1.ProductCode = T2.ProductCode LEFT OUTER JOIN
          RelationshipOfficers  T3 ON T1.DsaId = T3.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T4 ON T1.DmaId = T4.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T5 ON T1.FulfilOfficerId = T5.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T6 ON T1.ReferralId = T6.ROfficerCode INNER JOIN 
          VasProductType  T7 ON T7.ProductType = T2.ProductType INNER JOIN
          VasProductCategory  T8 ON T7.ProductCtg = T8.ProductCtg  LEFT OUTER JOIN
          AMTVehicleDealer T9 ON T2.ManufacturerId = T9.DealerId
          
          WHERE     NOT EXISTS
                    (SELECT     1  FROM          VASRecording_Temp WHERE      VasReference = T1.VasReference)

</createView>   </changeSet>
<changeSet id="21" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasStructure_AView">
SELECT    T1.ProductCode, T1.ProductDesc, T1.RecAgainst, T1.FeeAccrued, T1.FeeAccounting, T1.AccrualAccounting,
          T1.RecurringType, T1.FreeLockPeriod, T1.Active, T1.PreValidationReq, T1.PostValidationReq, T1.Remarks,
          T1.ProductType, T1.VasFee, T1.AllowFeeToModify, T1.ManufacturerId, T1.PreValidation, T1.PostValidation,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId,  T2.AccountSetCodeName FeeAccountingName,
          T3.AccountSetCodeName AccrualAccountingName,T2.AccountSetCode FeeAccountingDesc
          ,T3.AccountSetCode AccrualAccountingDesc,T4.ProductTypeDesc , T5.DealerName ManufacturerName, T6.ProductCtg,T6.ProductCtgDesc ProductCategory
          
          FROM   VasStructure T1 LEFT OUTER JOIN
          RMTAccountingSet T2 ON T1.FeeAccounting = T2.AccountSetid LEFT OUTER JOIN
          RMTAccountingSet T3 ON T1.AccrualAccounting = T3.AccountSetid 	INNER JOIN
		  VasProductType T4 ON T1.ProductType = T4.ProductType INNER JOIN
          VasProductCategory T6 ON T6.ProductCtg = T4.ProductCtg INNER JOIN
          AMTVehicleDealer T5 ON T1.ManufacturerId = T5.DealerId
</createView>   </changeSet>
<changeSet id="22" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasStructure_View">
SELECT    T1.ProductCode, T1.ProductDesc, T1.RecAgainst, T1.FeeAccrued, T1.FeeAccounting, T1.AccrualAccounting,
          T1.RecurringType, T1.FreeLockPeriod, T1.Active, T1.PreValidationReq, T1.PostValidationReq, T1.Remarks,
          T1.ProductType, T1.VasFee, T1.AllowFeeToModify, T1.ManufacturerId,  T1.PreValidation, T1.PostValidation,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId,  T2.AccountSetCodeName FeeAccountingName,
          T3.AccountSetCodeName AccrualAccountingName,T2.AccountSetCode FeeAccountingDesc
          ,T3.AccountSetCode AccrualAccountingDesc,T4.ProductTypeDesc , T5.DealerName ManufacturerName, T6.ProductCtg,T6.ProductCtgDesc ProductCategory
          
          FROM   VasStructure_Temp T1 LEFT OUTER JOIN
          RMTAccountingSet T2 ON T1.FeeAccounting = T2.AccountSetid LEFT OUTER JOIN
          RMTAccountingSet T3 ON T1.AccrualAccounting = T3.AccountSetid 	INNER JOIN
		  VasProductType T4 ON T1.ProductType = T4.ProductType INNER JOIN
          VasProductCategory T6 ON T6.ProductCtg = T4.ProductCtg INNER JOIN
          AMTVehicleDealer T5 ON T1.ManufacturerId = T5.DealerId	  

UNION ALL
SELECT    T1.ProductCode, T1.ProductDesc, T1.RecAgainst, T1.FeeAccrued, T1.FeeAccounting, T1.AccrualAccounting,
          T1.RecurringType, T1.FreeLockPeriod, T1.Active, T1.PreValidationReq, T1.PostValidationReq, T1.Remarks,
          T1.ProductType, T1.VasFee, T1.AllowFeeToModify, T1.ManufacturerId,  T1.PreValidation, T1.PostValidation,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId,  T2.AccountSetCodeName FeeAccountingName,
          T3.AccountSetCodeName AccrualAccountingName,T2.AccountSetCode FeeAccountingDesc
          ,T3.AccountSetCode AccrualAccountingDesc,T4.ProductTypeDesc , T5.DealerName ManufacturerName,T6.ProductCtg, T6.ProductCtgDesc ProductCategory
          
          FROM   VasStructure T1 LEFT OUTER JOIN
          RMTAccountingSet T2 ON T1.FeeAccounting = T2.AccountSetid LEFT OUTER JOIN
          RMTAccountingSet T3 ON T1.AccrualAccounting = T3.AccountSetid 	INNER JOIN
		  VasProductType T4 ON T1.ProductType = T4.ProductType INNER JOIN
          VasProductCategory T6 ON T6.ProductCtg = T4.ProductCtg INNER JOIN
          AMTVehicleDealer T5 ON T1.ManufacturerId = T5.DealerId	  

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          VasStructure_Temp
                            WHERE      ProductCode = T1.ProductCode)
</createView>   </changeSet>
<changeSet id="23" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VesselDetails_AView">
SELECT  VesselTypeID, VesselType, VesselSubType, Active,T1.Version,T1.LastMntBy, T1.LastMntOn, 
		T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
	    T2.FieldCode VesselTypeCode,T2.FieldCodeValue VesselTypeName
FROM     VesselDetails T1 LEFT OUTER JOIN
           RMTLovFieldDetail T2 ON T1.VesselType = T2.FieldCodeId
</createView>   </changeSet>
<changeSet id="24" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VesselDetails_View">
SELECT  VesselTypeID, VesselType, VesselSubType,Active, T1.Version,
		T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
		T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
		T2.FieldCode VesselTypeCode,T2.FieldCodeValue VesselTypeName
FROM     VesselDetails_Temp T1 LEFT OUTER JOIN
           RMTLovFieldDetail T2 ON T1.VesselType = T2.FieldCodeId
UNION ALL
SELECT  VesselTypeID, VesselType, VesselSubType,Active, T1.Version,
	    T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
	    T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
	    T2.FieldCode VesselTypeCode,T2.FieldCodeValue VesselTypeName
FROM     VesselDetails T1 LEFT OUTER JOIN
           RMTLovFieldDetail T2 ON T1.VesselType = T2.FieldCodeId

WHERE     NOT EXISTS
        (SELECT 1
         FROM   VesselDetails_Temp
         WHERE  VesselTypeID= T1.VesselTypeID )
</createView>   </changeSet>
<changeSet id="25" author="Pruthvi">
		<createView replaceIfExists="true" viewName="TargetDetails_AView">
SELECT     TargetCode, TargetDesc, Active, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         TargetDetails  T1
</createView>   </changeSet>
<changeSet id="26" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Task_Assignments_MView">
	SELECT     COUNT(T1.Reference) AssignedCount, T1.RoleCode UserRoleCode, T2.RoleDesc
FROM          Task_Owners T1 INNER JOIN
                       SecRoles T2 ON T1.RoleCode = T2.RoleCd
WHERE     (T1.ActualOwner = 0) AND (T1.CurrentOwner = 0) AND (T1.Processed = 0)
GROUP BY T1.RoleCode, T2.RoleDesc
</createView>   </changeSet>
<changeSet id="27" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Templates_AView">
SELECT     TemplateId, TemplateCode, Module, TemplateDesc, SMSTemplate, SMSContent, EmailTemplate, EmailContent, EmailFormat, EmailSubject, Active, 
                      Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId, EmailSendTo, TemplateFor, 
                      TurnAroundTime, Repeat
FROM         Templates T1
</createView>   </changeSet>
<changeSet id="28" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Templates_View">
SELECT     T1.TemplateId, T1.TemplateCode, T1.Module, T1.TemplateDesc, T1.SMSTemplate, T1.SMSContent, T1.EmailTemplate, T1.EmailContent, T1.EmailFormat, 
                      T1.EmailSubject, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T1.EmailSendTo, T1.TemplateFor, T1.TurnAroundTime, T1.Repeat
FROM         Templates_TEMP T1
UNION ALL
SELECT     T1.TemplateId, T1.TemplateCode, T1.Module, T1.TemplateDesc, T1.SMSTemplate, T1.SMSContent, T1.EmailTemplate, T1.EmailContent, T1.EmailFormat, 
                      T1.EmailSubject, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T1.EmailSendTo, T1.TemplateFor, T1.TurnAroundTime, T1.Repeat
FROM         Templates T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          Templates_TEMP
                            WHERE      TemplateId = T1.TemplateId )
</createView>   </changeSet>
<changeSet id="29" author="Pruthvi">
		<createView replaceIfExists="true" viewName="MandateStatusUpdate_View">
SELECT		T1.FileId, T1.Filename, T1.UserId, T1.StartDate, T1.EndDate, T1.TotalCount, T1.Success, T1.Fail, T1.Remarks		
FROM    	MandateStatusUpdate T1 
</createView>   </changeSet>
<changeSet id="30" author="Pruthvi">
		<createView replaceIfExists="true" viewName="MMAgreements_View">
SELECT		T1.MMAId, T1.MMAReference, T1.CustCIF, T1.PurchRegOffice, T1.ContractAmt, T1.ContractDate
			,T1.Rate,T1.Fax,T1.PurchAddress,T1.Attention,T2.CustShrtName,
			T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
			T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T1.TitleNo,
			 T3.CPProvinceName lovDescPurchRegOffice,T1.MMAgreeType,T1.Product,T1.AgreeName
			 ,T1.FOLIssueDate,T1.MaturityDate,T1.FacilityLimit,T1.ProfitRate,
			 T1.BaseRateCode,T1.minRate,T1.Margin,T1.ProfitPeriod,
             T1.MinAmount,T1.NumberOfTerms,T1.LatePayRate, T4.BRTypeDesc lovDescBaseRateName
			,T1.FOlReference,T1.AvlPerDays,T1.MaxCapProfitRate,T1.PmaryRelOfficer,T1.FacOfferLetterDate,T1.MinCapRate,T1.custAccount
			,T1.AssetValue,T1.AssetDesc,T1.SharePerc,T1.Dealer,T9.PObox DealerPOBox,T9.DealerCountry, T9.DealerName,T9.DealerCity,
			 T5.CustAddrStreet,T5.CustPOBox,T5.CustAddrCity,T5.CustAddrCountry,T5.CustAddrLine1,T5.CustAddrLine2,
			T6.PCCityName lovDescCustAddrCityName,T7.CPProvinceName lovDescCustAddrProvinceName,
			T8.CountryDesc lovDescCustAddrCountryName,T2.CustShrtNameLclLng
FROM    	MMAgreements_Temp  T1 INNER JOIN	
			Customers T2 On T1.CustCIF = T2.CustCIF INNER JOIN 
            RMTCountryVsProvince T3 on T1.PurchRegOffice=T3.CPProvince and T3.CPCountry='AE' LEFT OUTER JOIN
             RMTBaseRateCodes T4 ON T1.BaseRateCode = T4.BRType LEFT OUTER JOIN 
            CustomerAddresses T5 On T5.CustID = T2.CustID and T5.CustAddrType = 'PERM'  LEFT OUTER JOIN
             RMTProvinceVsCity T6   ON T5.CustAddrCountry = T6.PCCountry
            AND T5.CustAddrProvince = T6.PCProvince AND T5.CustAddrCity = T6.PCCity
            LEFT JOIN RMTCountryVsProvince T7   ON T5.CustAddrCountry = T7.CPCountry
            AND T5.CustAddrProvince = T7.CPProvince
            LEFT JOIN BMTCountries T8   ON T5.CustAddrCountry = T8.CountryCode LEFT OUTER JOIN
            AMTVehicleDealer T9   ON T1.Dealer = T9.DealerId
			
UNION ALL

SELECT		T1.MMAId, T1.MMAReference, T1.CustCIF, T1.PurchRegOffice, T1.ContractAmt, T1.ContractDate
			,T1.Rate,T1.Fax,T1.PurchAddress,T1.Attention,T2.CustShrtName,
			T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
			T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T1.TitleNo,
			 T3.CPProvinceName lovDescPurchRegOffice,T1.MMAgreeType,T1.Product,T1.AgreeName
			 ,T1.FOLIssueDate,T1.MaturityDate,T1.FacilityLimit,T1.ProfitRate,
			 T1.BaseRateCode,T1.minRate,T1.Margin,T1.ProfitPeriod,
             T1.MinAmount,T1.NumberOfTerms,T1.LatePayRate, T4.BRTypeDesc lovDescBaseRateName
			,T1.FOlReference,T1.AvlPerDays,T1.MaxCapProfitRate,T1.PmaryRelOfficer,T1.FacOfferLetterDate,T1.MinCapRate,T1.custAccount
			,T1.AssetValue,T1.AssetDesc,T1.SharePerc,T1.Dealer,T9.PObox DealerPOBox,T9.DealerCountry, T9.DealerName,T9.DealerCity,
			 T5.CustAddrStreet,T5.CustPOBox,T5.CustAddrCity,T5.CustAddrCountry,T5.CustAddrLine1,T5.CustAddrLine2,
			T6.PCCityName lovDescCustAddrCityName,T7.CPProvinceName lovDescCustAddrProvinceName,
			T8.CountryDesc lovDescCustAddrCountryName,T2.CustShrtNameLclLng
			
FROM    	MMAgreements   T1 INNER JOIN
		Customers T2 On T1.CustCIF = T2.CustCIF INNER JOIN 
            RMTCountryVsProvince T3 on T1.PurchRegOffice=T3.CPProvince and T3.CPCountry='AE' LEFT OUTER JOIN
             RMTBaseRateCodes T4 ON T1.BaseRateCode = T4.BRType LEFT OUTER JOIN 
            CustomerAddresses T5 On T5.CustID = T2.CustID and T5.CustAddrType = 'PERM'  LEFT OUTER JOIN
             RMTProvinceVsCity T6   ON T5.CustAddrCountry = T6.PCCountry
            AND T5.CustAddrProvince = T6.PCProvince AND T5.CustAddrCity = T6.PCCity
            LEFT JOIN RMTCountryVsProvince T7   ON T5.CustAddrCountry = T7.CPCountry
            AND T5.CustAddrProvince = T7.CPProvince
            LEFT JOIN BMTCountries T8   ON T5.CustAddrCountry = T8.CountryCode LEFT OUTER JOIN
            AMTVehicleDealer T9   ON T1.Dealer = T9.DealerId

WHERE     NOT EXISTS (SELECT 1 FROM MMAgreements_TEMP WHERE MMAId = T1.MMAId)
</createView>   </changeSet>
<changeSet id="31" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Notifications_View">
SELECT    RuleId,RuleCode, RuleModule, RuleCodeDesc, TemplateType,
                      RuleTemplate, ActualBlockTemplate, RuleReciepent, ActualBlockReciepent,RuleAttachment,ActualBlockAtachment,
					  Version, LastMntBy,LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId 
                      
FROM         	 Notifications_Temp 

UNION ALL
SELECT     RuleId,RuleCode, RuleModule, RuleCodeDesc, TemplateType,
                      RuleTemplate, ActualBlockTemplate, RuleReciepent, ActualBlockReciepent, RuleAttachment, ActualBlockAtachment, 
					  Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId 
                      
FROM         Notifications 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          Notifications_Temp
                            WHERE      RuleCode = Notifications.RuleCode)
</createView>   </changeSet>
<changeSet id="32" author="Pruthvi">
		<createView replaceIfExists="true" viewName="OtherBankFinanceType_View">
SELECT     FinType,FinTypeDesc,Active, Version, LastMntBy, LastMntOn, 
                      RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         OtherBankFinanceType_Temp T1
UNION ALL
SELECT      FinType,FinTypeDesc,Active,Version, LastMntBy, LastMntOn, 
                      RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         OtherBankFinanceType T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          OtherBankFinanceType_Temp
                            WHERE      FinType = T1.FinType)
</createView>   </changeSet>
<changeSet id="33" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SalesOfficers_AView">
SELECT     T1.SalesOffCode, T1.SalesOffFName, T1.SalesOffMName, T1.SalesOffLName, T1.SalesOffShrtName, T1.SalesOffDept, T1.SalesOffIsActive, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T2.DeptDesc lovDescSalesOffDeptName
FROM         SalesOfficers T1 INNER JOIN
                      BMTDepartments T2 ON T1.SalesOffDept = T2.DeptCode
 </createView>   </changeSet>
					 
	<changeSet id="34" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SalesOfficers_View">				 
SELECT     T1.SalesOffCode, T1.SalesOffFName, T1.SalesOffMName, T1.SalesOffLName, T1.SalesOffShrtName, T1.SalesOffDept, T1.SalesOffIsActive, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T2.DeptDesc lovDescSalesOffDeptName
FROM         SalesOfficers_TEMP T1 INNER JOIN
                      BMTDepartments T2 ON T1.SalesOffDept = T2.DeptCode
UNION ALL
SELECT     T1.SalesOffCode, T1.SalesOffFName, T1.SalesOffMName, T1.SalesOffLName, T1.SalesOffShrtName, T1.SalesOffDept, T1.SalesOffIsActive, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T2.DeptDesc lovDescSalesOffDeptName
FROM         SalesOfficers T1 INNER JOIN
                      BMTDepartments T2 ON T1.SalesOffDept = T2.DeptCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          SalesOfficers_TEMP
                            WHERE      SalesOffCode = T1.SalesOffCode)

 </createView>   </changeSet>
 	<changeSet id="35" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecGroups_View">	
 SELECT		T1.GrpID, T1.GrpCode, T1.GrpDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SecGroups T1
 </createView>   </changeSet>
  	<changeSet id="36" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecOperationRoles_AView">	
 SELECT     T1.OprRoleID, T1.OprID, T1.RoleID, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.OprCode, T2.OprDesc, T3.RoleCd, T3.RoleDesc, T3.RoleCategory, T3.RoleApp, 
                      T3.RoleCd LovDescRoleCd, T3.RoleDesc LovDescRoleDesc
FROM          SecOperationRoles T1 INNER JOIN
                       SecOperations T2 ON T1.OprID = T2.OprID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID
 </createView>   </changeSet>
   	<changeSet id="37" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecOperationRoles_View">	
 SELECT     T1.OprRoleID, T1.OprID, T1.RoleID, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.OprCode, T2.OprDesc, T3.RoleCd, T3.RoleDesc, T3.RoleCategory, T3.RoleApp, 
                      T3.RoleCd LovDescRoleCd, T3.RoleDesc LovDescRoleDesc
FROM          SecOperationRoles_Temp T1 INNER JOIN
                       SecOperations T2 ON T1.OprID = T2.OprID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID
UNION ALL
SELECT     T1.OprRoleID, T1.OprID, T1.RoleID, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.OprCode, T2.OprDesc, T3.RoleCd, T3.RoleDesc, T3.RoleCategory, T3.RoleApp, 
                      T3.RoleCd LovDescRoleCd, T3.RoleDesc LovDescRoleDesc
FROM          SecOperationRoles T1 INNER JOIN
                       SecOperations T2 ON T1.OprID = T2.OprID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          SecOperationRoles_Temp
                            WHERE      RoleID = T1.RoleID AND OprID = T1.OprID)
 </createView>   </changeSet>
    	<changeSet id="38" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecOperations_AView">
 SELECT     OprID, OprCode, OprDesc, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         SecOperations
 </createView>   </changeSet>
 
     	<changeSet id="39" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecOperations_RView">
 SELECT     T1.OprID, T1.OprCode, T1.OprDesc, T1.Version, T1.LastMntBy,T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          SecOperations_RTemp T1
UNION ALL
SELECT     T1.OprID,T1.OprCode,T1.OprDesc,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          SecOperations T1
WHERE NOT EXISTS(SELECT 1 FROM SecOperations_RTemp  WHERE OPRID=T1.OPRID)
 </createView>   </changeSet>
<changeSet id="40" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecOperations_RView">
 SELECT     OprID, OprDesc, OprCode, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         SecOperations_Temp
  </createView>   </changeSet>
  <changeSet id="41" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecOperations_View">
  SELECT    T1.OprID,T1.OprCode, T1.OprDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId
FROM         SecOperations_Temp T1
UNION ALL
SELECT    T1.OprID,T1.OprCode, T1.OprDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId
FROM         SecOperations T1
WHERE NOT EXISTS( SELECT 1 FROM SecOperations_Temp  WHERE  OprID= T1.OprID)
  </createView>   </changeSet>
    <changeSet id="42" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecRights_View">
  SELECT     RightID, RightType, RightName, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         SecRights
 </createView>   </changeSet>
     <changeSet id="43" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecRoles_View">
 SELECT  RoleApp,RoleID,AppDescription lovDescRoleAppName,RoleCd,RoleDesc,RoleCategory,T1.Version,
T1.LastMntBy,T1.LastMntOn,T1.RecordStatus,T1.RoleCode,T1.NextRoleCode,T1.TaskId,
T1.NextTaskId,T1.RecordType,T1.WorkflowId FROM  
SecRoles T1 LEFT JOIN PTApplicationDetails PT
ON T1.RoleAPP =PT.APPID
 </createView>   </changeSet>
      <changeSet id="44" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecRolesRights_View">
 SELECT  
                       SecRoles.RoleCd,  SecGroups.GrpCode,  SecRights.RightName,  SecRights.RightType, 
                       SecGroupRights.AccessType,  PTApplicationDetails.AppCode,  SecUsers.UsrID,  SecRights.Page
FROM          PTApplicationDetails INNER JOIN
                       SecGroups INNER JOIN
                       SecRoleGroups ON  SecGroups.GrpID =  SecRoleGroups.GrpID INNER JOIN
                       SecGroupRights ON  SecGroups.GrpID =  SecGroupRights.GrpID INNER JOIN
                       SecRights ON  SecGroupRights.RightID =  SecRights.RightID INNER JOIN
                       SecRoles ON  SecRoleGroups.RoleID =  SecRoles.RoleID ON  PTApplicationDetails.AppID =  SecRoles.RoleApp INNER JOIN
                       SecOperationRoles ON  SecRoles.RoleID =  SecRoles.RoleID INNER JOIN
                       SecOperations ON  SecOperationRoles.OprID =  SecOperations.OprID INNER JOIN
                       SecUserOperations ON  SecOperations.OprID =  SecUserOperations.OprID INNER JOIN
                       SecUsers ON  SecUserOperations.UsrID =  SecUsers.UsrID
  </createView>   </changeSet>
        <changeSet id="45" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecurityUserDivBranch_View">
  SELECT     T1.UsrID, T1.UserDivision, T1.UserBranch, T2.BranchDesc UserBranchDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskID, T1.RecordType, T1.WorkFlowId
FROM          SecurityUserDivBranch_Temp T1 INNER JOIN
                       RMTBranches T2 ON T1.UserBranch = T2.BranchCode
UNION ALL
SELECT     T1.UsrID, T1.UserDivision, T1.UserBranch, T2.BranchDesc UserBranchDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskID, T1.RecordType, T1.WorkFlowId
FROM          SecurityUserDivBranch T1 INNER JOIN
                       RMTBranches T2 ON T1.UserBranch = T2.BranchCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM           SecurityUserDivBranch_Temp
                            WHERE      UsrID = T1.UsrID)
   </createView>   </changeSet>
         <changeSet id="46" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecUserOperations_View">  
   SELECT     T1.UsrOprID, T1.UsrID, T2.UsrFName lovDescFirstName, T2.UsrMName lovDescMiddleName, T2.UsrLName lovDescLastName, T1.OprID, 
                      T3.OprCode lovDescOprCd, T3.OprDesc lovDescOprDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T4.UsrFName lovDescUsrFName, T4.UsrMName lovDescUsrMName, 
                      T4.UsrLName lovDescUsrLName
FROM          SecUserOperations_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecOperations T3 ON T1.OprID = T3.OprID INNER JOIN
                       SecUsers T4 ON T1.LastMntBy = T4.UsrID
UNION ALL
SELECT     T1.UsrOprID, T1.UsrID, T2.UsrFName lovDescFirstName, T2.UsrMName lovDescMiddleName, T2.UsrLName lovDescLastName, T1.OprID, 
                      T3.OprCode lovDescOprCd, T3.OprDesc lovDescOprDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T4.UsrFName lovDescUsrFName, T4.UsrMName lovDescUsrMName, 
                      T4.UsrLName lovDescUsrLName
FROM          SecUserOperations T1 INNER JOIN
                       SecUsers T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecOperations T3 ON T1.OprID = T3.OprID INNER JOIN
                       SecUsers T4 ON T1.LastMntBy = T4.UsrID
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           SecUserOperations_Temp
                            WHERE      (OprID = T1.OprID AND UsrID = T1.UsrID)))
 
    </createView>   </changeSet>
         <changeSet id="47" author="Pruthvi">
<createView replaceIfExists="true" viewName="SecUserRoles_View"> 	
SELECT     T1.UsrRoleID, T1.UsrID, T2.UsrFName lovDescFirstName, T2.UsrMName lovDescMiddleName, T2.UsrLName lovDescLastName, T1.RoleID, T3.RoleApp, T3.RoleCd lovDescRoleCd, 
                      T3.RoleDesc lovDescRoleDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, 
                      T1.WorkflowId, T4.UsrFName lovDescUsrFName, T4.UsrMName lovDescUsrMName, T4.UsrLName lovDescUsrLName
FROM          SecUserRoles_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID INNER JOIN
                       SecUsers T4 ON T1.LastMntBy = T4.UsrID
UNION ALL
SELECT     T1.UsrRoleID, T1.UsrID, T2.UsrFName lovDescFirstName, T2.UsrMName lovDescMiddleName, T2.UsrLName lovDescLastName, T1.RoleID, T3.RoleApp, T3.RoleCd lovDescRoleCd, 
                      T3.RoleDesc lovDescRoleDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, 
                      T1.WorkflowId,  T4.UsrFName lovDescUsrFName, T4.UsrMName lovDescUsrMName, T4.UsrLName lovDescUsrLName
FROM          SecUserRoles T1 INNER JOIN
                       SecUsers T2 ON T1.UsrID = T2.UsrID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID INNER JOIN
                       SecUsers T4 ON T1.LastMntBy = T4.UsrID
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           SecUserRoles_Temp
                            WHERE      (UsrRoleID = T1.UsrRoleID)))
     </createView>   </changeSet>
          <changeSet id="48" author="Pruthvi">
<createView replaceIfExists="true" viewName="SMTDivisionDetail_AView"> 	
 SELECT     T1.DivisionCode, T1.DivisionCodeDesc, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn,
			 T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType,
			 T1.WorkflowId,T1.AlwPromotion, T1.DivSuspTrigger, T1.DivSuspRemarks

FROM         SMTDivisionDetail T1
      </createView>   </changeSet>
           <changeSet id="49" author="Pruthvi">
<createView replaceIfExists="true" viewName="SMTDivisionDetail_TView"> 
 SELECT     T1.DivisionCode, T1.DivisionCodeDesc, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId,T1.AlwPromotion, T1.DivSuspTrigger, T1.DivSuspRemarks
			 
FROM         SMTDivisionDetail_Temp T1
 
       </createView>   </changeSet>
	              <changeSet id="50" author="Pruthvi">
<createView replaceIfExists="true" viewName="SMTDivisionDetail_View"> 
 SELECT     T1.DivisionCode, T1.DivisionCodeDesc, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.AlwPromotion, T1.DivSuspTrigger, T1.DivSuspRemarks
FROM         SMTDivisionDetail_Temp T1 

UNION ALL 
SELECT     T1.DivisionCode, T1.DivisionCodeDesc, T1.Active, T1.Version, T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.AlwPromotion, T1.DivSuspTrigger, T1.DivSuspRemarks
FROM         SMTDivisionDetail T1 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          SMTDivisionDetail_TEMP
                            WHERE      DivisionCode = T1.DivisionCode)
         </createView>   </changeSet>
 	              <changeSet id="51" author="Pruthvi">
<createView replaceIfExists="true" viewName="SMTparameters_AView"> 
SELECT     SysParmCode, LastMntOn, LastMntBy, Version, SysParmValdMod, SysParmList, SysParmDec, SysParmLength, SysParmValue, SysParmMaint, SysParmType, 
                      SysParmDesc, SysParmDescription
FROM         SMTparameters 
         </createView>   </changeSet>
		 
 	              <changeSet id="52" author="Pruthvi">
<createView replaceIfExists="true" viewName="SMTparameters_View"> 
SELECT     SysParmCode, LastMntOn, LastMntBy, Version, SysParmValdMod, SysParmList, SysParmDec, SysParmLength, SysParmValue, SysParmMaint, SysParmType, 
                      SysParmDesc, SysParmDescription
FROM         SMTparameters
         </createView>   </changeSet>
		
 	              <changeSet id="53" author="Pruthvi">
<createView replaceIfExists="true" viewName="StepPolicyDetail_AView"> 
SELECT     T1.PolicyCode, T1.StepNumber, T1.TenorSplitPerc, T1.RateMargin, T1.EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyDetail T1
         </createView>   </changeSet>
		 
 	              <changeSet id="54" author="Pruthvi">
<createView replaceIfExists="true" viewName="StepPolicyHeader_AView"> 
SELECT     T1.PolicyCode, T1.PolicyDesc,T1.StepType, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader T1
         </createView>   </changeSet>
	 	              <changeSet id="55" author="Pruthvi">
<createView replaceIfExists="true" viewName="StepPolicyHeader_View"> 	 
SELECT     T1.PolicyCode, T1.PolicyDesc,T1.StepType, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader_Temp T1 
UNION ALL
SELECT     T1.PolicyCode,T1.PolicyDesc,T1.StepType,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader T1 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          StepPolicyHeader_Temp
                            WHERE      PolicyCode = T1.PolicyCode )		 
         </createView>   </changeSet>		 
		 	              <changeSet id="56" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBonds_AView"> 	 
SELECT		T1.BondCode, T1.BondDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBonds T1		 
		 
         </createView>   </changeSet>		 
			 	              <changeSet id="57" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBonds_TView"> 		 
SELECT		T1.BondCode, T1.BondDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBonds_Temp T1		 
         </createView>   </changeSet>			 
			 	              <changeSet id="58" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBonds_View"> 			 
SELECT		T1.BondCode, T1.BondDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBonds_Temp T1 
UNION ALL

SELECT		T1.BondCode, T1.BondDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBonds T1 

WHERE     NOT EXISTS (SELECT 1 FROM SukukBonds_TEMP WHERE BondCode = T1.BondCode)		 
         </createView>   </changeSet>			 
			 	              <changeSet id="59" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBrokers_AView"> 				 
		 
	SELECT		T1.BrokerCode, T1.BrokerDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBrokers T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID	 
	         </createView>   </changeSet>		 
				 	              <changeSet id="60" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBrokers_TView"> 			 
SELECT		T1.BrokerCode, T1.BrokerDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBrokers_Temp T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID		 
		 
	         </createView>   </changeSet>	
				 	              <changeSet id="61" author="Pruthvi">
<createView replaceIfExists="true" viewName="SukukBrokers_View">			 
SELECT		T1.BrokerCode, T1.BrokerDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBrokers_Temp T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
UNION ALL

SELECT		T1.BrokerCode, T1.BrokerDesc		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	SukukBrokers T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID

WHERE     NOT EXISTS (SELECT 1 FROM SukukBrokers_TEMP WHERE BrokerCode = T1.BrokerCode)		 
	         </createView>   </changeSet>			 
				 	              <changeSet id="62" author="Pruthvi">
<createView replaceIfExists="true" viewName="SysNotification_AView">
SELECT			T1.SysNotificationId, T1.QueryCode, T1.Description, T1.TemplateCode, T1.Doctype, T1.DocName,T1.DocImage,T1.Version, T1.LastMntBy, T1.LastMntOn, 
				T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
				T2.QueryDesc lovDescQueryDesc, T3.TemplateDesc lovDescTemplateDesc, T2.SqlQuery lovDescSqlQuery
FROM			 SysNotification T1  INNER JOIN
				 Queries T2 ON T1.QueryCode = T2.QueryCode INNER JOIN
				 Templates T3 ON T3.TemplateCode = T1.TemplateCode		 
		         </createView>   </changeSet>		 
					 	              <changeSet id="63" author="Pruthvi">
<createView replaceIfExists="true" viewName="SysNotification_View">			 
SELECT			T1.SysNotificationId, T1.QueryCode, T1.Description, T1.TemplateCode, T1.Doctype, T1.DocName,T1.DocImage,T1.Version, T1.LastMntBy, T1.LastMntOn, 
				T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
				T2.QueryDesc lovDescQueryDesc, T3.TemplateDesc lovDescTemplateDesc, T2.SqlQuery lovDescSqlQuery
FROM			 SysNotification_Temp T1  INNER JOIN
				 Queries T2 ON T1.QueryCode = T2.QueryCode INNER JOIN
				 Templates T3 ON T3.TemplateCode = T1.TemplateCode 
              
UNION ALL
SELECT			T1.SysNotificationId, T1.QueryCode, T1.Description, T1.TemplateCode, T1.Doctype, T1.DocName,T1.DocImage,T1.Version, T1.LastMntBy, T1.LastMntOn, 
				T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
				T2.QueryDesc lovDescQueryDesc, T3.TemplateDesc lovDescTemplateDesc, T2.SqlQuery lovDescSqlQuery
FROM			 SysNotification T1  INNER JOIN
				 Queries T2 ON T1.QueryCode = T2.QueryCode INNER JOIN
				 Templates T3 ON T3.TemplateCode = T1.TemplateCode 

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM         SysNotification_Temp  WHERE      SysNotificationId = T1.SysNotificationId)
		         </createView>   </changeSet>
						 	              <changeSet id="64" author="Pruthvi">
<createView replaceIfExists="true" viewName="SystemInternalAccountDef_AView">				 
SELECT     T1.SIACode, T1.SIAName, T1.SIAShortName, T1.SIAAcType, T1.SIANumber, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.AcTypeDesc lovDescSIAAcTypeName
FROM         SystemInternalAccountDef T1 INNER JOIN
                      RMTAccountTypes T2 ON T1.SIAAcType = T2.AcType
		         </createView>   </changeSet>
						 	              <changeSet id="65" author="Pruthvi">
<createView replaceIfExists="true" viewName="SystemInternalAccountDef_View">					 
SELECT     T1.SIACode, T1.SIAName, T1.SIAShortName, T1.SIAAcType, T1.SIANumber, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.AcTypeDesc lovDescSIAAcTypeName
FROM          SystemInternalAccountDef_Temp T1 INNER JOIN
                       RMTAccountTypes T2 ON T1.SIAAcType = T2.AcType
UNION ALL
SELECT     T1.SIACode, T1.SIAName, T1.SIAShortName, T1.SIAAcType, T1.SIANumber, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.AcTypeDesc lovDescSIAAcTypeName
FROM          SystemInternalAccountDef T1 INNER JOIN
                       RMTAccountTypes T2 ON T1.SIAAcType = T2.AcType
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          SystemInternalAccountDef_TEMP
                            WHERE      SIACode = T1.SIACode)				 
		         </createView>   </changeSet>				 
	<changeSet id="66" author="Pruthvi">
		<createView replaceIfExists="true" viewName="TargetDetails_View">
SELECT     TargetCode, TargetDesc, Active, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM          TargetDetails_Temp T1
Union all
SELECT     TargetCode, TargetDesc, Active, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM          TargetDetails T1

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM         TargetDetails_TEMP
                            WHERE      TargetCode= T1.TargetCode)
</createView>   </changeSet>	
	<changeSet id="67" author="Pruthvi">
		<createView replaceIfExists="true" viewName="PoliceCaseCustomers_View">
SELECT     CustCIF, CustFName, CustLName,CustDOB,CustCRCPR,MobileNumber,CustNationality,CustPassportNo,CustProduct, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T2.NationalityDesc lovDescNationalityDesc
FROM          PoliceCaseCustomers_Temp T1 INNER JOIN
			 BMTNationalityCodes T2 on T2.NationalityCode = T1.CustNationality
UNION ALL
SELECT     CustCIF, CustFName, CustLName,CustDOB,CustCRCPR,MobileNumber,CustNationality,CustPassportNo,CustProduct, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T2.NationalityDesc lovDescNationalityDesc
FROM          PoliceCaseCustomers T1 INNER JOIN
			 BMTNationalityCodes T2 on T2.NationalityCode = T1.CustNationality

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM         PoliceCaseCustomers_Temp
                            WHERE      CustCIF= T1.CustCIF)
</createView>   </changeSet>

<changeSet id="68" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Postings_View">
		SELECT     T1.LinkedTranId, T1.Postref, T1.PostingId, T1.finReference, T1.FinEvent, T1.PostDate, T1.ValueDate, T1.TranCode, T1.RevTranCode, T1.DrOrCr, 
                      T1.Account, T1.PostAmount, T1.PostStatus, T1.ErrorId, T1.ErrorMsg, T2.AEEventCodeDesc LovDescEventCodeName, 
                      T1.ShadowPosting, T1.TranDesc, T1.AmountType, T1.AcCcy, T3.CcyEditField Formatter, T1.PostBranch
FROM          Postings T1 INNER JOIN
                       BMTAEEvents T2 ON T1.FinEvent = T2.AEEventCode
                      INNER JOIN RMTCurrencies T3 ON T3.CcyCode = T1.AcCcy
</createView>   </changeSet>
<changeSet id="69" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Queries_AView">

SELECT		  T1.QueryCode, T1.QueryModule, T1.QueryDesc, T1.SqlQuery, T1.ActualBlock, T1.SubQuery		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active,
			  T3.QueryModuleDesc, T3.TableName, T3.ResultColumns, T3.DisplayColumns	
FROM    	Queries T1 
			INNER JOIN SecUsers T2 ON T1.LastMntBy = T2.UsrID
			INNER JOIN  QueryModules T3 ON T1.QueryModule = T3.QueryModuleCode
			</createView>   </changeSet>
	<changeSet id="70" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Queries_TView">		
SELECT		 T1.QueryCode, T1.QueryModule, T1.QueryDesc, T1.SqlQuery, T1.ActualBlock, T1.SubQuery		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active
			, T3.QueryModuleDesc, T3.TableName, T3.ResultColumns, T3.DisplayColumns	
FROM    	Queries_Temp T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID
			INNER JOIN   QueryModules T3 ON T1.QueryModule = T3.QueryModuleCode
					</createView>   </changeSet>
	<changeSet id="71" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Queries_View">							
SELECT		 T1.QueryCode, T1.QueryModule, T1.QueryDesc, T1.SqlQuery, T1.ActualBlock, T1.SubQuery		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.				NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active,
			  T3.QueryModuleDesc, T3.TableName, T3.ResultColumns, T3.DisplayColumns	
FROM    	Queries_Temp T1 
			INNER JOIN  SecUsers T2 ON T1.LastMntBy = T2.UsrID
			INNER JOIN   QueryModules T3 ON T1.QueryModule = T3.QueryModuleCode 
UNION ALL

SELECT		 T1.QueryCode, T1.QueryModule, T1.QueryDesc, T1.SqlQuery, T1.ActualBlock, T1.SubQuery		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.				NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active,
			  T3.QueryModuleDesc, T3.TableName, T3.ResultColumns, T3.DisplayColumns
FROM    	Queries T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID
			INNER JOIN   QueryModules T3 ON T1.QueryModule = T3.QueryModuleCode 

WHERE     NOT EXISTS (SELECT 1 FROM Queries_TEMP WHERE  QueryCode = T1.QueryCode)
					</createView>   </changeSet>
		<changeSet id="72" author="Pruthvi">
		<createView replaceIfExists="true" viewName="ReinstateFinance_View">						
					SELECT     T1.FinReference, T2.FinType, T3.FinTypeDesc,T3.FinCategory,T4.CustCIF,T2.FinBranch,T5.BranchDesc,T2.FinStartDate,
            T2.NumberOfTerms,T2.GraceTerms, T2.MaturityDate,T2.FinCcy,T6.CcyDesc FinCcyDesc,T2.FinAmount,
		    T2.FinRepaymentAmount,T2.ScheduleMethod,T7.IntRateBasisDesc ProfitDaysBasis, T2.FeeChargeAmt, T2.DownPayBank, T2.DownPaySupl,
		    T2.EffectiveRateOfReturn, T2.TotalProfit,T6.CcyEditField formatter, T3.FinDivision LovDescFinDivision, T2.FinPreApprovedRef,
			T1.Version,T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,T1.TaskId, T1. NextTaskId, T1.RecordType, T1.WorkflowId
FROM        ReinstateFinance_TEMP T1  INNER JOIN
			RejectFinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
			RMTFinanceTypes T3 ON T2.FinType=T3.FinType INNER JOIN
             Customers T4 ON T2.CustID = T4.CustID  INNER JOIN
            RMTBranches T5 ON T2.FinBranch = T5.BranchCode  INNER JOIN
            RMTCurrencies T6 ON T2.FinCcy = T6.CcyCode INNER JOIN 
            BMTIntRateBasisCodes T7 ON T2.ProfitDaysBasis = T7.IntRateBasisCode
				</createView>   </changeSet>
		<changeSet id="73" author="Pruthvi">
		<createView replaceIfExists="true" viewName="REPORTCONFIGURATION_View">				
SELECT     T1.ReportId, T1.ReportName, T1.ReportHeading, T1.PromptRequired, T1.ReportJasperName, T1.DataSourceName, T1.ShowTempLibrary, 
                      T1.MenuItemCode, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM          ReportConfiguration T1
				</createView>   </changeSet>
				
		<changeSet id="74" author="Pruthvi">
		<createView replaceIfExists="true" viewName="REPORTFILTERFIELDS_View">		
SELECT     T1.ReportId, T1.FieldID, T1.FieldName, T1.FieldType, T1.FieldLabel, T1.FieldDBName, T1.AppUtilMethodName, 
                      T1.ModuleName, T1.LovHiddenFieldMethod, T1.LovTextFieldMethod, T1.MultiSelectSearch, 
                      T1.FieldLength, T1.FieldMaxValue, T1.FieldMinValue, T1.SeqOrder, T1.Mandatory, 
                      T1.FieldConstraint, T1.FieldErrorMessage, T1.WhereCondition, T1.StaticValue, T1.FieldWidth,
                       T1.FilterRequired, T1.DefaultFilter, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus,
                        T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         ReportFilterFields T1		
				</createView>   </changeSet>
		<changeSet id="75" author="Pruthvi">
		<createView replaceIfExists="true" viewName="ReportList_View">	
	SELECT		T1.Code,T1.Module, T1.FieldLabels, T1.FieldValues, T1.FieldType, T1.Addfields, T1.ReportFileName, T1.ReportHeading, T1.ModuleType		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.FormatReq
FROM    	ReportList_TEMP T1
UNION ALL
SELECT		T1.Code,T1.Module, T1.FieldLabels, T1.FieldValues, T1.FieldType, T1.Addfields, T1.ReportFileName, T1.ReportHeading, T1.ModuleType		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.FormatReq
FROM    	ReportList T1
WHERE     NOT EXISTS (SELECT 1 FROM ReportList_TEMP WHERE Module = T1.Module)	
			</createView>   </changeSet>
	<changeSet id="76" author="Pruthvi">
		<createView replaceIfExists="true" viewName="RMTAccountingSet_AView">				
SELECT     T1.AccountSetid, T1.EventCode, T1.AccountSetCode, T1.AccountSetCodeName, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       BMTAEEvents.AEEventCodeDesc lovDescEventCodeName, T1.SystemDefault, T1.EntryByInvestment
FROM          RMTAccountingSet T1 INNER JOIN
                       BMTAEEvents ON T1.EventCode =  BMTAEEvents.AEEventCode
					  		</createView>   </changeSet>
	<changeSet id="77" author="Pruthvi">
		<createView replaceIfExists="true" viewName="RMTAccountingSet_View">								
SELECT     T1.AccountSetid, T1.EventCode, T1.AccountSetCode, T1.AccountSetCodeName, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.AEEventCodeDesc lovDescEventCodeName, 
                      T1.SystemDefault, T1.EntryByInvestment

FROM         RMTAccountingSet_Temp T1 INNER JOIN
                       BMTAEEvents T2 ON T1.EventCode = T2.AEEventCode
UNION ALL
SELECT     T1.AccountSetid, T1.EventCode, T1.AccountSetCode, T1.AccountSetCodeName, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.AEEventCodeDesc lovDescEventCodeName, 
                      T1.SystemDefault, T1.EntryByInvestment

FROM         RMTAccountingSet T1 INNER JOIN
                       BMTAEEvents T2 ON T1.EventCode = T2.AEEventCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTAccountingSet_TEMP
                            WHERE      AccountSetid = T1.AccountSetid)
	  		</createView>   </changeSet>
<changeSet id="78" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTAccountTypes_AView">			
SELECT     AcType, AcTypeDesc, AcPurpose, AcHeadCode, InternalAc, CustSysAc, AcLmtCategory, AcTypeIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         RMTAccountTypes T1			
</createView>   </changeSet>			
<changeSet id="79" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTAccountTypes_View">		
SELECT     AcType, AcTypeDesc, AcPurpose, AcHeadCode, InternalAc, CustSysAc, AcLmtCategory, AcTypeIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         RMTAccountTypes_Temp T1
UNION ALL
SELECT     AcType, AcTypeDesc, AcPurpose, AcHeadCode, InternalAc, CustSysAc, AcLmtCategory, AcTypeIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         RMTAccountTypes T1
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          RMTAccountTypes_Temp
                            WHERE      (AcType = T1.AcType)))			
</createView>   </changeSet>				
<changeSet id="80" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTBaseRateCodes_AView">				
	SELECT     BRType, BRTypeDesc, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         RMTBaseRateCodes		
			
</createView>   </changeSet>				
<changeSet id="81" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTBaseRates_AView">				
SELECT     T1.BRType, T2.BRTypeDesc LovDescBRTypeName, T1.Currency, T1.BREffDate, T1.BRRate, T1.Version, T1.LastMntBy, 
           T1.LastMntOn, T1.RecordStatus,T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
		   T1.LastMdfDate, T1.DelExistingRates,T3.CcyDesc CurrencyDesc
FROM         RMTBaseRates T1 INNER JOIN
                      RMTBaseRateCodes T2 ON T1.BRType = T2.BRType  INNER JOIN
					  RMTCurrencies T3 ON T1.Currency = T3.CcyCode			
</createView>   </changeSet>			
			
	<changeSet id="82" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTBaseRates_View">			
SELECT     T1.BRType, T2.BRTypeDesc LovDescBRTypeName, T1.Currency, T1.BREffDate, T1.BRRate, T1.Version, T1.LastMntBy,
           T1.LastMntOn, T1.RecordStatus,T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
		   T1.LastMdfDate, T1.DelExistingRates,T3.CcyDesc CurrencyDesc

FROM         RMTBaseRates_Temp T1 INNER JOIN
                      RMTBaseRateCodes T2 ON T1.BRType = T2.BRType  INNER JOIN
					  RMTCurrencies T3 ON T1.Currency = T3.CcyCode
UNION ALL
SELECT     T1.BRType, T2.BRTypeDesc LovDescBRTypeName, T1.Currency, T1.BREffDate, T1.BRRate, T1.Version, T1.LastMntBy,
           T1.LastMntOn, T1.RecordStatus,T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
		   T1.LastMdfDate, T1.DelExistingRates,T3.CcyDesc CurrencyDesc

FROM         RMTBaseRates T1 INNER JOIN
                      RMTBaseRateCodes T2 ON T1.BRType = T2.BRType  INNER JOIN
					  RMTCurrencies T3 ON T1.Currency = T3.CcyCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTBaseRates_TEMP
                            WHERE      BRType = T1.BRType AND BREffDate = T1.BREffDate  AND Currency = T1.Currency)			
			
</createView>   </changeSet>			
		<changeSet id="83" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTCountryVsProvince_AView">		
SELECT  T1.CPCountry, T1.CPProvince, T1.CPProvinceName,T1.SystemDefault, T1.Version, T2.COUNTRYDESC lovDescCPCountryName, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T1.BankRefNo
				FROM         RMTCountryVsProvince T1 INNER JOIN
                      BMTCountries  T2 ON T1.CPCountry = T2.CountryCode			
			
	</createView>   </changeSet>		
		<changeSet id="84" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTCountryVsProvince_View">		
	SELECT  T1.CPCountry, T1.CPProvince, T1.CPProvinceName,T1.SystemDefault, T1.Version, T2.COUNTRYDESC lovDescCPCountryName, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T1.BankRefNo
				FROM         RMTCountryVsProvince_Temp T1 INNER JOIN
                      BMTCountries  T2 ON T1.CPCountry = T2.CountryCode
			UNION ALL
			SELECT     T1.CPCountry, T1.CPProvince, T1.CPProvinceName,T1.SystemDefault, T1.Version, T2.COUNTRYDESC lovDescCPCountryName, T1.LastMntBy, T1.LastMntOn, 
			                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T1.BankRefNo
			FROM         RMTCountryVsProvince  T1 INNER JOIN
			                      BMTCountries  T2 ON T1.CPCountry = T2.CountryCode
			WHERE     NOT EXISTS
			                          (SELECT     1
                            FROM          RMTCountryVsProvince_Temp
                            WHERE      CPCountry = T1.CPCountry AND CPProvince = T1.CPProvince)		
			
		</createView>   </changeSet>
		<changeSet id="85" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTCurrencies_AView">		
SELECT     T1.CcyCode, T1.CcyNumber, T1.CcyDesc, T1.CcySwiftCode, T1.CcyEditField, T1.CcyMinorCcyUnits, T1.CcyDrRateBasisCode, 
                      T2.IntRateBasisDesc lovDescCcyDrRateBasisCodeName, T1.CcyCrRateBasisCode, T3.IntRateBasisDesc lovDescCcyCrRateBasisCodeName, 
                      T1.CcyIsIntRounding, T1.CcySpotRate, T1.CcyIsReceprocal, T1.CcyUserRateBuy, T1.CcyUserRateSell, T1.CcyIsMember, T1.CcyIsGroup, T1.CcyIsAlwForLoans, 
                      T1.CcyIsAlwForDepo, T1.CcyIsAlwForAc, T1.CcyIsActive, T1.CcyMinorCcyDesc, T1.CcySymbol, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          RMTCurrencies T1 LEFT OUTER JOIN
                       BMTIntRateBasisCodes T2 ON T1.CcyDrRateBasisCode = T2.IntRateBasisCode  LEFT OUTER JOIN
                       BMTIntRateBasisCodes T3 ON T1.CcyCrRateBasisCode = T3.IntRateBasisCode	
		</createView>   </changeSet>					  
		<changeSet id="86" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTCurrencies_View">				
SELECT     T1.CcyCode, T1.CcyNumber, T1.CcyDesc, T1.CcySwiftCode, T1.CcyEditField, T1.CcyMinorCcyUnits, T1.CcyDrRateBasisCode, 
                      T2.IntRateBasisDesc lovDescCcyDrRateBasisCodeName, T1.CcyCrRateBasisCode, T3.IntRateBasisDesc lovDescCcyCrRateBasisCodeName, 
                      T1.CcyIsIntRounding, T1.CcySpotRate, T1.CcyIsReceprocal, T1.CcyUserRateBuy, T1.CcyUserRateSell, T1.CcyIsMember, T1.CcyIsGroup, T1.CcyIsAlwForLoans, 
                      T1.CcyIsAlwForDepo, T1.CcyIsAlwForAc, T1.CcyIsActive, T1.CcyMinorCcyDesc, T1.CcySymbol, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          RMTCurrencies_Temp T1 LEFT OUTER JOIN
                       BMTIntRateBasisCodes T2 ON T1.CcyDrRateBasisCode = T2.IntRateBasisCode LEFT OUTER JOIN
                       BMTIntRateBasisCodes T3 ON T1.CcyCrRateBasisCode = T3.IntRateBasisCode
UNION ALL
SELECT     T1.CcyCode, T1.CcyNumber, T1.CcyDesc, T1.CcySwiftCode, T1.CcyEditField, T1.CcyMinorCcyUnits, T1.CcyDrRateBasisCode, 
                      T2.IntRateBasisDesc lovDescCcyDrRateBasisCodeName, T1.CcyCrRateBasisCode, T3.IntRateBasisDesc lovDescCcyCrRateBasisCodeName, 
                      T1.CcyIsIntRounding, T1.CcySpotRate, T1.CcyIsReceprocal, T1.CcyUserRateBuy, T1.CcyUserRateSell, T1.CcyIsMember, T1.CcyIsGroup, T1.CcyIsAlwForLoans, 
                      T1.CcyIsAlwForDepo, T1.CcyIsAlwForAc, T1.CcyIsActive, T1.CcyMinorCcyDesc, T1.CcySymbol, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          RMTCurrencies T1 LEFT OUTER JOIN
                       BMTIntRateBasisCodes T2 ON T1.CcyDrRateBasisCode = T2.IntRateBasisCode  LEFT OUTER JOIN
                       BMTIntRateBasisCodes T3 ON T1.CcyCrRateBasisCode = T3.IntRateBasisCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTCurrencies_TEMP
                            WHERE      CcyCode = T1.CcyCode)
		</createView>   </changeSet>							
		<changeSet id="87" author="Pruthvi">
<createView replaceIfExists="true" viewName="RMTCustTypes_AView">		
SELECT     CustTypeCode, CustTypeCtg, CustTypeDesc, CustTypeIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, 
                      NextTaskId, RecordType, WorkflowId
FROM         RMTCustTypes
		</createView>   </changeSet>
			<changeSet id="88" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTCustTypes_View">	
		SELECT     T1.CustTypeCode, T1.CustTypeCtg, T1.CustTypeDesc, T1.CustTypeIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                  T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTCustTypes_TEMP T1
UNION ALL
SELECT     T1.CustTypeCode, T1.CustTypeCtg, T1.CustTypeDesc, T1.CustTypeIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTCustTypes T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTCustTypes_TEMP
                            WHERE      CustTypeCode = T1.CustTypeCode)
									</createView>   </changeSet>
			<changeSet id="89" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTEmpTypes_AView">				
									
SELECT     EmpType, EmpTypeDesc, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTEmpTypes
	</createView>   </changeSet>
			<changeSet id="90" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTFinFeeCharges_AView">	
	SELECT     T1.FinType, T1.FeeTranEvent, T1.FeeCode, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.RuleCodeDesc lovDescFeeCodeName
FROM          RMTFinFeeCharges T1 INNER JOIN
                       Rules T2 ON T1.FeeTranEvent = T2.RuleEvent AND T1.FeeCode = T2.RuleCode AND T2.RuleModule = 'fees'
					  	</createView>   </changeSet>
			<changeSet id="91" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTFinFeeCharges_View">							
						
SELECT     T1.FinType, T1.FeeTranEvent, T1.FeeCode, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.RuleCodeDesc lovDescFeeCodeName
FROM          RMTFinFeeCharges_Temp T1 INNER JOIN
                       Rules_Temp T2 ON T1.FeeTranEvent = T2.RuleEvent AND T1.FeeCode = T2.RuleCode
				AND    T2.RuleModule = 'fees'
UNION ALL
SELECT     T1.FinType, T1.FeeTranEvent, T1.FeeCode, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.RuleCodeDesc lovDescFeeCodeName
FROM          RMTFinFeeCharges T1 INNER JOIN
                       Rules_Temp T2 ON T1.FeeTranEvent = T2.RuleEvent AND T1.FeeCode = T2.RuleCode
		AND    T2.RuleModule = 'fees'

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM           RMTFinFeeCharges_Temp
                            WHERE      FinType= T1.FinType)
 	</createView>   </changeSet>
			<changeSet id="92" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTGenDepartments_AView">		
	SELECT     GenDepartment, GenDeptDesc, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTGenDepartments
 	</createView>   </changeSet>
				<changeSet id="93" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTGenDesignations_AView">		
	SELECT     GenDesignation, GenDesgDesc, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTGenDesignations
 	</createView>   </changeSet>
	
					<changeSet id="94" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTLovFieldDetail_AView">	
	SELECT     T1.FieldCodeId, T1.FieldCode, T1.FieldCodeValue, T1.ValueDesc, T1.isActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                   SystemDefault,   T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.FieldCodeDesc lovDescFieldCodeName
FROM         RMTLovFieldDetail T1 INNER JOIN
                      BMTLovFieldCode T2 ON T1.FieldCode = T2.FieldCode
					   	</createView>   </changeSet>
						<changeSet id="95" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTLovFieldDetail_View">						
SELECT     T1.FieldCodeId, T1.FieldCode, T2.FieldCodeDesc lovDescFieldCodeName, T1.FieldCodeValue,T1.ValueDesc, T1.isActive, T1.Version, T1.LastMntBy, 
                   SystemDefault,   T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.RecordType, T1.WorkflowId, T1.NextTaskId
FROM          RMTLovFieldDetail_Temp T1 INNER JOIN
                       BMTLovFieldCode T2 ON T1.FieldCode = T2.FieldCode
UNION ALL
SELECT     T1.FieldCodeId, T1.FieldCode, T2.FieldCodeDesc lovDescFieldCodeName, T1.FieldCodeValue, T1.ValueDesc, T1.isActive, T1.Version, T1.LastMntBy, 
                    SystemDefault,  T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.RecordType, T1.WorkflowId, T1.NextTaskId
FROM          RMTLovFieldDetail T1 INNER JOIN
                       BMTLovFieldCode T2 ON T1.FieldCode = T2.FieldCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTLovFieldDetail_TEMP
                            WHERE      FieldCodeId = T1.FieldCodeId)
					   	</createView>   </changeSet>
<changeSet id="96" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProductAssets_AView">						
	SELECT     AssetID, ProductCode, AssetCode, AssetDesc, AssetIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, 
                      NextTaskId, RecordType, WorkflowId
FROM         RMTProductAssets T1
   	</createView>   </changeSet>
<changeSet id="97" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProductAssets_View">
SELECT     T1.AssetID, T1.ProductCode, T1.AssetCode, T1.AssetDesc, T1.AssetIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId 
FROM         RMTProductAssets_TEMP T1 
UNION ALL
SELECT     T1.AssetID, T1.ProductCode, T1.AssetCode, T1.AssetDesc, T1.AssetIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId 
FROM         RMTProductAssets T1 WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTProductAssets_TEMP
                            WHERE      AssetID = T1.AssetID)

   	</createView>   </changeSet>
<changeSet id="98" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisionCodes_AView">	
	
	SELECT     ProvType, ProvDesc, ProvIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTProvisionCodes T1
   	</createView>   </changeSet>
<changeSet id="99" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisionCodes_View">	
SELECT     T1.ProvType, T1.ProvDesc, T1.ProvIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTProvisionCodes_TEMP T1
UNION ALL
SELECT     T1.ProvType, T1.ProvDesc, T1.ProvIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTProvisionCodes T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTProvisionCodes_TEMP
                            WHERE      ProvType = T1.ProvType)
	   	</createView>   </changeSet>
<changeSet id="100" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisions_AView">			
SELECT     T1.ProvType, T1.ProvSlab, T1.ProvPercentOnPri, T1.ProvPercentOnInt, T1.ProvIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.ProvDesc LovDescProvTypeName, 
                      T3.ProvSlabDesc LovDescProvSlabName
FROM          RMTProvisions T1 INNER JOIN
                       RMTProvisionCodes T2 ON T2.ProvType = T1.ProvType INNER JOIN
                       RMTProvisionSlabs T3 ON T3.ProvSlab = T1.ProvSlab
					  	   	</createView>   </changeSet>
<changeSet id="101" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisions_View">								
SELECT     T1.ProvType, T1.ProvSlab, T1.ProvPercentOnPri, T1.ProvPercentOnInt, T1.ProvIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.ProvDesc LovDescProvTypeName, 
                      T3.ProvSlabDesc LovDescProvSlabName
FROM         RMTProvisions_TEMP T1 INNER JOIN
                      RMTProvisionCodes T2 ON T2.ProvType = T1.ProvType INNER JOIN
                      RMTProvisionSlabs T3 ON T3.ProvSlab = T1.ProvSlab
UNION ALL
SELECT     T1.ProvType, T1.ProvSlab, T1.ProvPercentOnPri, T1.ProvPercentOnInt, T1.ProvIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.ProvDesc LovDescProvTypeName, 
                      T3.ProvSlabDesc LovDescProvSlabName
FROM         RMTProvisions T1 INNER JOIN
                      RMTProvisionCodes T2 ON T2.ProvType = T1.ProvType INNER JOIN
                      RMTProvisionSlabs T3 ON T3.ProvSlab = T1.ProvSlab
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTProvisions_TEMP
                            WHERE      ProvType = T1.ProvType AND ProvSlab=T1.ProvSlab)
					  	   	</createView>   </changeSet>
<changeSet id="102" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisionSlabs_AView">								
SELECT     ProvSlab, ProvSlabDesc, ProvSlabDays, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTProvisionSlabs T1
	</createView>   </changeSet>
<changeSet id="103" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTProvisionSlabs_View">		
	
	SELECT     T1.ProvSlab, T1.ProvSlabDesc, T1.ProvSlabDays, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTProvisionSlabs_TEMP T1
UNION ALL
SELECT     T1.ProvSlab, T1.ProvSlabDesc, T1.ProvSlabDays, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTProvisionSlabs T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTProvisionSlabs_TEMP
                            WHERE      ProvSlab = T1.ProvSlab)
								</createView>   </changeSet>
<changeSet id="104" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTScoringGroup_AView">								
SELECT     ScoreGroupId, ScoreGroupCode, MinScore, ScoreGroupName, CategoryType, Isoverride, OverrideScore, Version, LastMntBy, LastMntOn, 
                      RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         RMTScoringGroup
			</createView>   </changeSet>
<changeSet id="105" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTScoringSlab_AView">				
			SELECT     T1.ScoreGroupId, T1.ScoringSlab, T1.CreditWorthness, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,  RMTScoringGroup.ScoreGroupCode lovDescScoreGroupCode
FROM         RMTScoringSlab T1 LEFT OUTER JOIN
                       RMTScoringGroup ON T1.ScoreGroupId =  RMTScoringGroup.ScoreGroupId
					  		</createView>   </changeSet>
	<changeSet id="106" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTScoringSlab_View">							
SELECT     T1.ScoreGroupId, T1.ScoringSlab, T1.CreditWorthness, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,  RMTScoringGroup.ScoreGroupCode lovDescScoreGroupCode
FROM          RMTScoringSlab_Temp T1 LEFT OUTER JOIN
                       RMTScoringGroup ON T1.ScoreGroupId =  RMTScoringGroup.ScoreGroupId
UNION ALL

SELECT     T1.ScoreGroupId, T1.ScoringSlab, T1.CreditWorthness, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,  RMTScoringGroup.ScoreGroupCode lovDescScoreGroupCode
FROM          RMTScoringSlab  T1 LEFT OUTER JOIN
                       RMTScoringGroup ON T1.ScoreGroupId =  RMTScoringGroup.ScoreGroupId
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTScoringSlab_TEMP
                            WHERE      ScoreGroupId = T1.ScoreGroupId AND ScoringSlab = T1.ScoringSlab)
		</createView>   </changeSet>
	<changeSet id="107" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTSplRateCodes_AView">			
		SELECT     SRType, SRTypeDesc, SRIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         RMTSplRateCodes T1
		</createView>   </changeSet>
			<changeSet id="108" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTSplRateCodes_View">	
		SELECT     T1.SRType, T1.SRTypeDesc, T1.SRIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTSplRateCodes_TEMP T1
UNION ALL
SELECT     T1.SRType, T1.SRTypeDesc, T1.SRIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         RMTSplRateCodes T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTSplRateCodes_TEMP
                            WHERE      SRType = T1.SRType)
		</createView>   </changeSet>
				<changeSet id="109" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTSplRates_AView">		
		SELECT     T1.SRType, T1.SREffDate, T1.SRRate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.SRTypeDesc lovDescSRTypeName, T1.LastMdfDate, T1.DelExistingRates
FROM          RMTSplRates T1 INNER JOIN
                       RMTSplRateCodes T2 ON T2.SRType = T1.SRType
		</createView>   </changeSet>
				<changeSet id="110" author="pruthvi">
<createView replaceIfExists="true" viewName="RMTSplRates_View">			
SELECT     T1.SRType, T1.SREffDate, T1.SRRate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.SRTypeDesc lovDescSRTypeName, T1.LastMdfDate, T1.DelExistingRates
FROM         RMTSplRates_TEMP T1 INNER JOIN
                      RMTSplRateCodes T2 ON T2.SRType = T1.SRType
UNION ALL
SELECT     T1.SRType, T1.SREffDate, T1.SRRate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.SRTypeDesc lovDescSRTypeName, T1.LastMdfDate, T1.DelExistingRates
FROM         RMTSplRates T1 INNER JOIN
                      RMTSplRateCodes T2 ON T2.SRType = T1.SRType
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTSplRates_TEMP
                            WHERE      SRType = T1.SRType AND SREffDate = T1.SREffDate)
			</createView>   </changeSet>
							<changeSet id="111" author="pruthvi">
<createView replaceIfExists="true" viewName="ManagerCheques_AView">		
SELECT		T1.ChequeID, T1.ChqPurposeCode, T1.ChequeRef, T1.ChequeNo, T1.BeneficiaryName, T1.CustCIF, 
			T1.DraftCcy, T1.FundingCcy, T1.FundingAccount, T1.NostroAccount, T1.NostroFullName, T1.ChequeAmount,
			T1.ValueDate, T1.Narration1, T1.Narration2, T1.Reprint, T1.OldChequeID, T1.Cancel, T1.Version , 
			T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.BranchCode, 
			T6.BranchDesc lovDescBranchDesc, T1.StopOrderRef, T1.IssueDate, T1.ChargeAmount, 
			T1.ChequeAmount + T1.ChargeAmount FundingAmount, T1.AddressLine1, T1.AddressLine2, T1.AddressLine3, 
			T1.AddressLine4, T1.AddressLine5, T3.Description ChqPurposeCodeName, T4.CcyDesc DraftCcyName, 
			T5.CcyDesc FundingCcyName, T5.CcyEditField lovDescFundingCcyEditField, T4.CcyEditField lovDescDraftCcyEditField,
			T7.CustShrtName lovDescCustShrtName
 FROM    	ManagerCheques T1
 INNER JOIN  SecUsers T2 ON T1.LastMntBy = T2.UsrID
 INNER JOIN  ChequePurpose T3 ON T1.ChqPurposeCode = T3.Code
 INNER JOIN  RMTCurrencies T4 ON T1.DraftCcy = T4.CcyCode
 INNER JOIN  RMTCurrencies T5 ON T1.FundingCcy = T5.CcyCode
 INNER JOIN  RMTBranches T6 ON T1.BranchCode = T6.BranchCode
 LEFT JOIN  Customers T7 ON T1.CustCIF = T7.CustCIF
	</createView>   </changeSet>
								<changeSet id="112" author="pruthvi">
<createView replaceIfExists="true" viewName="ManagerCheques_TView">	
		SELECT		T1.ChequeID, T1.ChqPurposeCode, T1.ChequeRef, T1.ChequeNo, T1.BeneficiaryName, T1.CustCIF, 
			T1.DraftCcy, T1.FundingCcy, T1.FundingAccount, T1.NostroAccount, T1.NostroFullName, T1.ChequeAmount,
			T1.ValueDate, T1.Narration1, T1.Narration2, T1.Reprint, T1.OldChequeID, T1.Cancel, T1.Version , 
			T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, 
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.BranchCode, T6.BranchDesc lovDescBranchDesc, 
			T1.StopOrderRef, T1.IssueDate, T1.ChargeAmount, T1.ChequeAmount + T1.ChargeAmount FundingAmount, T1.AddressLine1, 
			T1.AddressLine2, T1.AddressLine3, T1.AddressLine4, T1.AddressLine5, T3.Description ChqPurposeCodeName, 
			T4.CcyDesc DraftCcyName, T5.CcyDesc FundingCcyName, T5.CcyEditField lovDescFundingCcyEditField, 
			T4.CcyEditField lovDescDraftCcyEditField, T7.CustShrtName lovDescCustShrtName
 FROM    	ManagerCheques_Temp T1
 INNER JOIN  SecUsers T2 ON T1.LastMntBy = T2.UsrID
 INNER JOIN  ChequePurpose T3 ON T1.ChqPurposeCode = T3.Code
 INNER JOIN  RMTCurrencies T4 ON T1.DraftCcy = T4.CcyCode
 INNER JOIN  RMTCurrencies T5 ON T1.FundingCcy = T5.CcyCode
 INNER JOIN  RMTBranches T6 ON T1.BranchCode = T6.BranchCode
 LEFT JOIN  Customers T7 ON T1.CustCIF = T7.CustCIF
 	</createView>   </changeSet>
								<changeSet id="113" author="pruthvi">
<createView replaceIfExists="true" viewName="ManagerCheques_View">						  
SELECT		T1.ChequeID, T1.ChqPurposeCode, T1.ChequeRef, T1.ChequeNo, T1.BeneficiaryName, T1.CustCIF, T1.DraftCcy, T1.FundingCcy, T1.FundingAccount, 
			T1.NostroAccount, T1.NostroFullName, T1.ChequeAmount, T1.ValueDate, T1.Narration1, T1.Narration2, T1.Reprint, T1.OldChequeID, T1.Cancel, 
			T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
			T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.BranchCode, T6.BranchDesc lovDescBranchDesc, T1.StopOrderRef, T1.IssueDate, 
			T1.ChargeAmount, T1.ChequeAmount + T1.ChargeAmount FundingAmount, T1.AddressLine1, T1.AddressLine2, T1.AddressLine3, T1.AddressLine4, 
			T1.AddressLine5, T3.Description ChqPurposeCodeName, T4.CcyDesc DraftCcyName, T5.CcyDesc FundingCcyName, 
			T5.CcyEditField lovDescFundingCcyEditField, T4.CcyEditField lovDescDraftCcyEditField, T7.CustShrtName lovDescCustShrtName
FROM    	ManagerCheques_Temp T1 
INNER JOIN  SecUsers T2 ON T1.LastMntBy = T2.UsrID
INNER JOIN  ChequePurpose T3 ON T1.ChqPurposeCode = T3.Code
INNER JOIN  RMTCurrencies T4 ON T1.DraftCcy = T4.CcyCode
INNER JOIN  RMTCurrencies T5 ON T1.FundingCcy = T5.CcyCode
INNER JOIN  RMTBranches T6 ON T1.BranchCode = T6.BranchCode
LEFT JOIN  Customers T7 ON T1.CustCIF = T7.CustCIF

UNION ALL

SELECT		T1.ChequeID, T1.ChqPurposeCode, T1.ChequeRef, T1.ChequeNo, T1.BeneficiaryName, T1.CustCIF, T1.DraftCcy, T1.FundingCcy, T1.FundingAccount, 
			T1.NostroAccount, T1.NostroFullName, T1.ChequeAmount, T1.ValueDate, T1.Narration1, T1.Narration2, T1.Reprint, T1.OldChequeID, T1.Cancel, 
			T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
			T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.BranchCode, T6.BranchDesc lovDescBranchDesc, T1.StopOrderRef, T1.IssueDate, 
			T1.ChargeAmount, T1.ChequeAmount + T1.ChargeAmount FundingAmount, T1.AddressLine1, T1.AddressLine2, T1.AddressLine3, T1.AddressLine4, 
			T1.AddressLine5, T3.Description ChqPurposeCodeName, T4.CcyDesc DraftCcyName, T5.CcyDesc FundingCcyName, 
			T5.CcyEditField lovDescFundingCcyEditField, T4.CcyEditField lovDescDraftCcyEditField, T7.CustShrtName lovDescCustShrtName
FROM    	ManagerCheques T1 
INNER JOIN  SecUsers T2 ON T1.LastMntBy = T2.UsrID
INNER JOIN  ChequePurpose T3 ON T1.ChqPurposeCode = T3.Code
INNER JOIN  RMTCurrencies T4 ON T1.DraftCcy = T4.CcyCode
INNER JOIN  RMTCurrencies T5 ON T1.FundingCcy = T5.CcyCode
INNER JOIN  RMTBranches T6 ON T1.BranchCode = T6.BranchCode
LEFT JOIN  Customers T7 ON T1.CustCIF = T7.CustCIF

WHERE     NOT EXISTS (SELECT 1 FROM ManagerCheques_TEMP WHERE ChequeID = T1.ChequeID)
 	</createView>   </changeSet>
									<changeSet id="114" author="pruthvi">
<createView replaceIfExists="true" viewName="MandateFileUpload_View">	
	SELECT		T1.FileHeaderId, T1.Filename, T1.UserId, T1.StartDate, T1.EndDate, T1.TotalRecords, T1.SuccessCount, T1.FailCount, T1.Remarks		
FROM    	MandateFileUpload T1 
 	</createView>   </changeSet>	
 	<changeSet id="115" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinDisbursementDetails_View">
SELECT     T1.FinReference, T1.DisbDate, T1.DisbSeq, T1.DisbDesc, T1.DisbAccountId, T1.DisbAmount, T1.DisbReqDate, T1.DisbDisbursed, T1.DisbIsActive, T1.DisbRemarks, 
                      T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T1.FeeChargeAmt,   T1.DisbType, T1.DisbClaim, T1.DisbExpType, T1.DisbRetPerc, T1.DisbRetAmount, T1.AutoDisb, T1.NetAdvDue, T1.NetRetDue, T1.DisbRetPaid, T1.RetPaidDate, 
                    T2.ExpenceTypeName  lovDescDisbExpType, T1.ConsultFeeFrq,T1.ConsultFeeStartDate,T1.ConsultFeeEndDate, T1.ContractorId,T1.InsuranceAmt
FROM          FinDisbursementDetails_Temp  T1 LEFT OUTER JOIN
                       AMTExpenseType  T2 ON T2.ExpenceTypeId = T1.DisbExpType 
UNION ALL
SELECT     T1.FinReference, T1.DisbDate, T1.DisbSeq, T1.DisbDesc, T1.DisbAccountId, T1.DisbAmount, T1.DisbReqDate, T1.DisbDisbursed, T1.DisbIsActive, T1.DisbRemarks, 
                      T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T1.FeeChargeAmt,   T1.DisbType, T1.DisbClaim, T1.DisbExpType, T1.DisbRetPerc, T1.DisbRetAmount, T1.AutoDisb, T1.NetAdvDue, T1.NetRetDue, T1.DisbRetPaid, T1.RetPaidDate, 
                    T2.ExpenceTypeName  lovDescDisbExpType, T1.ConsultFeeFrq,T1.ConsultFeeStartDate,T1.ConsultFeeEndDate, T1.ContractorId,T1.InsuranceAmt
FROM          FinDisbursementDetails  T1 LEFT OUTER JOIN
                       AMTExpenseType  T2 ON T2.ExpenceTypeId = T1.DisbExpType
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinDisbursementDetails_Temp
                            WHERE      FinReference = T1.FinReference)
</createView>   </changeSet>
<changeSet id="116" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinFlagsHeader_TView">
SELECT      T1.FinReference, T2.FinType, T3.FinTypeDesc,T3.FinCategory,T4.CustCIF,T2.FinBranch,T5.BranchDesc,
T2.FinStartDate,
		    T2.NumberOfTerms,T2.GraceTerms, T2.MaturityDate,T2.FinCcy,T6.CcyDesc FinCcyDesc,T2.FinAmount,
		    T2.FinRepaymentAmount,T2.ScheduleMethod,T7.IntRateBasisDesc ProfitDaysBasis, T2.FeeChargeAmt, T2.DownPayBank, T2.DownPaySupl,
		    T2.EffectiveRateOfReturn, T2.TotalProfit,T6.CcyEditField formatter,
            T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
            T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.FinDivision LovDescFinDivision
FROM         FinFlagsHeader_Temp T1  INNER JOIN
			 FinanceMain T2 ON T1.FinReference = T2.FinReference LEFT OUTER JOIN
			RMTFinanceTypes T3 ON T2.FinType=T3.FinType INNER JOIN
             Customers T4 ON T2.CustID = T4.CustID  INNER JOIN
            RMTBranches T5 ON T2.FinBranch = T5.BranchCode  INNER JOIN
            RMTCurrencies T6 ON T2.FinCcy = T6.CcyCode INNER JOIN 
            BMTIntRateBasisCodes T7 ON T2.ProfitDaysBasis = T7.IntRateBasisCode
</createView>   </changeSet>
<changeSet id="117" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinFlagsHeader_View">
SELECT      T1.FinReference, T2.FinType, T3.FinTypeDesc,T3.FinCategory,T4.CustCIF,T2.FinBranch,T5.BranchDesc,
T2.FinStartDate,
		    T2.NumberOfTerms,T2.GraceTerms, T2.MaturityDate,T2.FinCcy,T6.CcyDesc FinCcyDesc,T2.FinAmount,
		    T2.FinRepaymentAmount,T2.ScheduleMethod,T7.IntRateBasisDesc ProfitDaysBasis, T2.FeeChargeAmt, T2.DownPayBank, T2.DownPaySupl,
		    T2.EffectiveRateOfReturn, T2.TotalProfit,T6.CcyEditField formatter,
            T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
            T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.FinDivision LovDescFinDivision
FROM         FinFlagsHeader_Temp T1  INNER JOIN
			 FinanceMain T2 ON T1.FinReference = T2.FinReference LEFT OUTER JOIN
			RMTFinanceTypes T3 ON T2.FinType=T3.FinType INNER JOIN
             Customers T4 ON T2.CustID = T4.CustID  INNER JOIN
            RMTBranches T5 ON T2.FinBranch = T5.BranchCode  INNER JOIN
            RMTCurrencies T6 ON T2.FinCcy = T6.CcyCode INNER JOIN 
            BMTIntRateBasisCodes T7 ON T2.ProfitDaysBasis = T7.IntRateBasisCode

UNION ALL
SELECT      T1.FinReference, T2.FinType, T3.FinTypeDesc,T3.FinCategory,T4.CustCIF,T2.FinBranch,T5.BranchDesc,
T2.FinStartDate,
		    T2.NumberOfTerms,T2.GraceTerms, T2.MaturityDate,T2.FinCcy,T6.CcyDesc FinCcyDesc,T2.FinAmount,
		    T2.FinRepaymentAmount,T2.ScheduleMethod,T7.IntRateBasisDesc ProfitDaysBasis, T2.FeeChargeAmt, T2.DownPayBank, T2.DownPaySupl,
		    T2.EffectiveRateOfReturn, T2.TotalProfit,T6.CcyEditField formatter,
            T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
            T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.FinDivision LovDescFinDivision
FROM         FinFlagsHeader T1  INNER JOIN
			 FinanceMain T2 ON T1.FinReference = T2.FinReference LEFT OUTER JOIN
			RMTFinanceTypes T3 ON T2.FinType=T3.FinType INNER JOIN
             Customers T4 ON T2.CustID = T4.CustID  INNER JOIN
            RMTBranches T5 ON T2.FinBranch = T5.BranchCode  INNER JOIN
            RMTCurrencies T6 ON T2.FinCcy = T6.CcyCode INNER JOIN 
            BMTIntRateBasisCodes T7 ON T2.ProfitDaysBasis = T7.IntRateBasisCode
			
			WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           FinFlagsHeader_Temp
                            WHERE      (FinReference = T1.FinReference)))
</createView>   </changeSet>
<changeSet id="118" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinGuarantorsDetails_AView">
SELECT     T1.GuarantorId, T1.FinReference, T1.BankCustomer, T1.GuarantorCIF, T1.GuarantorIDType, T1.GuarantorIDNumber, T1.GuranteePercentage, T1.MobileNo, T1.EmailId, 
                      T1.GuarantorProof, T1.GuarantorProofName, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.GuarantorCIFName, T1.Remarks,
                          (SELECT     IdentityDesc
                            FROM          BMTIdentityType
                            WHERE      (IdentityType = T1.GuarantorIDType)) GuarantorIDTypeName, T1.AddrHNbr, 
                            T1.FlatNbr, T1.AddrStreet, T1.AddrLine1, T1.AddrLine2, 
                            T1.POBox, T1.AddrCity, T1.AddrProvince, T1.AddrCountry, T1.AddrZIP
FROM         FinGuarantorsDetails T1 INNER JOIN
                      SecUsers T2 ON T1.LastMntBy = T2.UsrID
					  </createView>   </changeSet>
					  <changeSet id="119" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinGuarantorsDetails_TView">
SELECT     T1.GuarantorId, T1.FinReference, T1.BankCustomer, T1.GuarantorCIF, T1.GuarantorIDType, T1.GuarantorIDNumber, T1.GuranteePercentage, T1.MobileNo, T1.EmailId, 
                      T1.GuarantorProof, T1.GuarantorProofName, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Remarks, T1.GuarantorCIFName,
                          (SELECT     IdentityDesc
                            FROM           BMTIdentityType
                            WHERE      (IdentityType = T1.GuarantorIDType)) GuarantorIDTypeName, T1.AddrHNbr, 
                            T1.FlatNbr, T1.AddrStreet, T1.AddrLine1, T1.AddrLine2, 
                            T1.POBox, T1.AddrCity, T1.AddrProvince, T1.AddrCountry, T1.AddrZIP
FROM          FinGuarantorsDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID
					  		  </createView>   </changeSet>
					  <changeSet id="120" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinGuarantorsDetails_View">							  
SELECT     T1.GuarantorId, T1.FinReference, T1.BankCustomer, T1.GuarantorCIF, T1.GuarantorIDType, T1.GuarantorIDNumber, T1.GuranteePercentage, T1.MobileNo, T1.EmailId, 
                      T1.GuarantorProof, T1.GuarantorProofName, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Remarks, T1.GuarantorCIFName, 
                  (SELECT     IdentityDesc
                            FROM           BMTIdentityType
                            WHERE      (IdentityType = T1.GuarantorIDType)) GuarantorIDTypeName, T1.AddrHNbr, 
                            T1.FlatNbr, T1.AddrStreet, T1.AddrLine1, T1.AddrLine2, 
                            T1.POBox, T1.AddrCity, T1.AddrProvince, T1.AddrCountry, T1.AddrZIP
FROM         FinGuarantorsDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID

UNION ALL

SELECT     T1.GuarantorId, T1.FinReference, T1.BankCustomer, T1.GuarantorCIF, T1.GuarantorIDType, T1.GuarantorIDNumber, T1.GuranteePercentage, T1.MobileNo, T1.EmailId, 
                      T1.GuarantorProof, T1.GuarantorProofName, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Remarks, T1.GuarantorCIFName, 
                    (SELECT     IdentityDesc
                            FROM           BMTIdentityType
                            WHERE      (IdentityType = T1.GuarantorIDType)) GuarantorIDTypeName, T1.AddrHNbr, 
                            T1.FlatNbr, T1.AddrStreet, T1.AddrLine1, T1.AddrLine2, 
                            T1.POBox, T1.AddrCity, T1.AddrProvince, T1.AddrCountry, T1.AddrZIP
FROM         FinGuarantorsDetails T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinGuarantorsDetails_TEMP
                            WHERE      GuarantorId = T1.GuarantorId)
							 </createView>   </changeSet>
							 				  <changeSet id="121" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinGuarantorsSmryDtls_View">
SELECT     T1.GuarantorId, T1.FinReference, T1.BankCustomer, T1.GuarantorCIF, T1.GuarantorIDType, T1.GuarantorIDNumber, T1.GuranteePercentage, T1.MobileNo, T1.EmailId, 
                      T1.GuarantorProof, T1.GuarantorProofName, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.UsrLogin, T1.UsrFName, T1.UsrMName, T1.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Remarks, T1.GuarantorCIFName, T1.GuarantorIDTypeName, 
                      T2.CurrentExpoSurePriamry primaryExposure, T2.CurrentExpoSureSecondary secondaryExposure, T2.CurrentExpoSureGuarantor guarantorExposure, 
                      T2.WorstStatus, T2.Status
FROM          FinGuarantorsDetails_View T1 
			LEFT JOIN  FinGuarantorsExpsrDtls_View T2 ON T1.FinReference = T2.FINReference 
			AND T1.BankCustomer = 1
			</createView>   </changeSet>
							 				  <changeSet id="122" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinJointAccountDetails_AView">		
		SELECT     T1.JointAccountId, T1.FinReference, T1.CustCIF, T1.IncludeRepay, T1.RepayAccountId, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, 
                      T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       Customers.CustShrtName LovDescCIFName
FROM          FinJointAccountDetails T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       Customers ON T1.CustCIF =  Customers.CustCIF
					  			</createView>   </changeSet>
					  <changeSet id="123" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinJointAccountDetails_TView">							
		SELECT     T1.JointAccountId, T1.FinReference, T1.CustCIF, T1.IncludeRepay, T1.RepayAccountId, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, 
                      T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       Customers.CustShrtName LovDescCIFName
FROM          FinJointAccountDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       Customers ON T1.CustCIF =  Customers.CustCIF
					  	</createView>   </changeSet>
						  <changeSet id="124" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinJointAccountDetails_View">				
						SELECT     T1.JointAccountId, T1.FinReference, T1.CustCIF, T1.IncludeRepay, T1.RepayAccountId, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, 
                      T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                 T3. CustShrtName LovDescCIFName
FROM         FinJointAccountDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID  INNER JOIN
                       Customers  T3 ON T1.CustCIF = T3.CustCIF
UNION ALL
SELECT     T1.JointAccountId, T1.FinReference, T1.CustCIF, T1.IncludeRepay, T1.RepayAccountId, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, 
                      T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                 T3. CustShrtName LovDescCIFName
FROM         FinJointAccountDetails T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID  INNER JOIN
                       Customers  T3 ON T1.CustCIF = T3.CustCIF
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinJointAccountDetails_TEMP
                            WHERE      JointAccountId = T1.JointAccountId)  
							</createView>   </changeSet>
	  <changeSet id="125" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinJointAcDetails_IView">								
	SELECT T1.FinReference,T1.CustCIF CustomerNo, (T2.CustFName + T2.CustMName +T2.CustLName) CustomerName
FROM FinJointAccountDetails T1 INNER JOIN
Customers T2 ON T1.CustCIF=T2.CustCIF
</createView>   </changeSet>
	  <changeSet id="126" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinJointSummaryDetails_View">	
SELECT     T1.JointAccountId, T1.FinReference, T1.CustCIF, T1.IncludeRepay, T1.RepayAccountId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
							  T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.LovDescCIFName, T2.CurrentExpoSurePriamry PrimaryExposure, 
							  T2.CurrentExpoSureSecondary SecondaryExposure, T2.CurrentExpoSureGuarantor GuarantorExposure, T2.FinStatus WorstStatus, T2.Status
		FROM          FinJointAccountDetails_View T1 LEFT OUTER JOIN
							   FinJointExposureDetails_View T2 ON T1.CustCIF = T2.CUSTCIF
							  </createView>   </changeSet>
							  
	  <changeSet id="127" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinLegalExpenses_AView">	
	SELECT		T1.expReference,T1.CustomerId, T1.BookingDate, T1.Amount, T1.FinReference, T1.TransactionType, T1.Remarks, T1.RecoveredAmount, T1.Amountdue, T1.IsRecoverdFromMOPA, T1.TotalCharges		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinLegalExpenses T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID	
  </createView>   </changeSet>		
 <changeSet id="128" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinLegalExpenses_TView">	
	SELECT		T1.expReference,T1.CustomerId, T1.BookingDate, T1.Amount, T1.FinReference, T1.TransactionType, T1.Remarks, T1.RecoveredAmount, T1.Amountdue, T1.IsRecoverdFromMOPA, T1.TotalCharges		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinLegalExpenses_Temp T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID	
  </createView>   </changeSet>			
	  <changeSet id="129" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinLegalExpenses_View">	
SELECT		T1.expReference,T1.CustomerId, T1.BookingDate, T1.Amount, T1.FinReference, T1.TransactionType, T1.Remarks, T1.RecoveredAmount, T1.Amountdue, T1.IsRecoverdFromMOPA, T1.TotalCharges		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinLegalExpenses_Temp T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID
UNION ALL

SELECT		T1.expReference,T1.CustomerId, T1.BookingDate, T1.Amount, T1.FinReference, T1.TransactionType, T1.Remarks, T1.RecoveredAmount, T1.Amountdue, T1.IsRecoverdFromMOPA, T1.TotalCharges		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinLegalExpenses T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID

WHERE     NOT EXISTS (SELECT 1 FROM FinLegalExpenses_TEMP WHERE CustomerID = T1.CustomerID)		
	  </createView>   </changeSet>		
			  <changeSet id="130" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FINLIABILITYREQ_VIEW">	
		SELECT		T1.FinReference, T1.InitiatedBy, T1.FinEvent,T1.TakafulPaidStatus,T1.TakafulClaimAmount,T1.TakafulClaimReason, T2.FinType, T4.CustCIF, T2.FinBranch, T2.FinStartDate, T2.NumberOfTerms, T2.MaturityDate, T2.FinCcy, T2.FinAmount, T3.CcyEditField formatter,
            T4.CustShrtName , T5.BranchDesc , T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T6.FinDivision lovDescFinDivision
FROM    	FinLiabilityReq_Temp T1 INNER JOIN
               FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode INNER JOIN
                       Customers T4 ON T2.CustID = T4.CustID    INNER JOIN
                      RMTBranches T5 ON T2.FinBranch = T5.BranchCode  INNER JOIN
                      RMTFinanceTypes T6 ON T2.FinType = T6.FinType 
UNION ALL
SELECT		T1.FinReference, T1.InitiatedBy, T1.FinEvent,T1.TakafulPaidStatus,T1.TakafulClaimAmount,T1.TakafulClaimReason, T2.FinType, T4.CustCIF, T2.FinBranch, T2.FinStartDate, T2.NumberOfTerms, T2.MaturityDate, T2.FinCcy, T2.FinAmount, T3.CcyEditField formatter,
            T4.CustShrtName , T5.BranchDesc , T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T6.FinDivision lovDescFinDivision
FROM    	FinLiabilityReq T1 INNER JOIN
               FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode INNER JOIN
                       Customers T4 ON T2.CustID = T4.CustID    INNER JOIN
                      RMTBranches T5 ON T2.FinBranch = T5.BranchCode   INNER JOIN
                      RMTFinanceTypes T6 ON T2.FinType = T6.FinType     

WHERE     NOT EXISTS (SELECT 1 FROM FinLiabilityReq_TEMP WHERE FinReference = T1.FinReference AND FinEvent = T1.FinEvent)
	  </createView>   </changeSet>				
	
			  <changeSet id="131" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCDetails_View">	
	SELECT		T1.ODCRuleCode, T1.ODCCustCtg, T1.ODCType, T1.ODCOn, T1.ODCAmount, T1.ODCGraceDays, T1.ODCAllowWaiver, T1.ODCMaxWaiver		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinODCDetails_TEMP T1
UNION ALL
SELECT		T1.ODCRuleCode, T1.ODCCustCtg, T1.ODCType, T1.ODCOn, T1.ODCAmount, T1.ODCGraceDays, T1.ODCAllowWaiver, T1.ODCMaxWaiver		
			, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	FinODCDetails T1
WHERE     NOT EXISTS (SELECT 1 FROM FinODCDetails_TEMP WHERE ODCRuleCode = T1.ODCRuleCode)
	  </createView>   </changeSet>	
	
			  <changeSet id="132" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCHeader_AView">	
		SELECT     T1.ODCRuleCode, T1.ODCPLAccount, T1.ODCCharityAccount, T1.ODCPLSubHead, T1.ODCCharitySubHead, T1.ODCPLShare, T1.ODCSweepCharges, 
                      T1.ODCRuleDescription, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T2.SIAName lovDescSIAAcTypeName, T3.RuleCodeDesc lovDescODCPLSubHeadName, 
                      T4.RuleCodeDesc lovDescODCCharitySubHeadName
FROM          FinODCHeader T1 INNER JOIN
                       SystemInternalAccountDef T2 ON T1.ODCPLAccount = T2.SIACode LEFT OUTER JOIN
                       Rules T3 ON T1.ODCPLSubHead = T3.RuleCode AND T3.RuleModule = 'SUBHEAD' LEFT OUTER JOIN
                       Rules T4 ON T1.ODCCharitySubHead = T4.RuleCode AND T4.RuleModule = 'SUBHEAD'
		  </createView>   </changeSet>		
		
		
			  <changeSet id="133" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCHeader_View">	
SELECT     T1.ODCRuleCode, T1.ODCPLAccount, T1.ODCCharityAccount, T1.ODCPLSubHead, T1.ODCCharitySubHead, T1.ODCPLShare, T1.ODCSweepCharges, 
                      T1.ODCRuleDescription, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T2.SIAName lovDescODCPLAccountName,T3.RuleCodeDesc lovDescODCPLSubHeadName,
                      T4.RuleCodeDesc lovDescODCCharitySubHeadName,T5.SIAName lovDescODCCharityAccountName
FROM         FinODCHeader_Temp T1 INNER JOIN
                       SystemInternalAccountDef T2 ON T1.ODCPLAccount = T2.SIACode INNER JOIN
                       SystemInternalAccountDef T5 ON T1.ODCCharityAccount= T5.SIACode left outer JOIN
                       Rules T3 ON T1.ODCPLSubHead = T3.RuleCode AND T3.RuleModule = 'SUBHEAD' left outer JOIN
                       Rules T4 ON T1.ODCCharitySubHead= T4.RuleCode AND T4.RuleModule = 'SUBHEAD'
UNION ALL
SELECT     T1.ODCRuleCode, T1.ODCPLAccount, T1.ODCCharityAccount, T1.ODCPLSubHead, T1.ODCCharitySubHead, T1.ODCPLShare, T1.ODCSweepCharges, 
                      T1.ODCRuleDescription, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId, T2.SIAName lovDescODCPLAccountName,T3.RuleCodeDesc lovDescODCPLSubHeadName,
                      T4.RuleCodeDesc lovDescODCCharitySubHeadName,T5.SIAName lovDescODCCharityAccountName
FROM         FinODCHeader T1 INNER JOIN
                       SystemInternalAccountDef T2 ON T1.ODCPLAccount = T2.SIACode INNER JOIN
                       SystemInternalAccountDef T5 ON T1.ODCCharityAccount= T5.SIACode left outer JOIN
                       Rules T3 ON T1.ODCPLSubHead = T3.RuleCode AND T3.RuleModule = 'SUBHEAD' left outer JOIN
                       Rules T4 ON T1.ODCCharitySubHead= T4.RuleCode AND T4.RuleModule = 'SUBHEAD'WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinODCHeader_TEMP
                            WHERE      ODCRuleCode = T1.ODCRuleCode)		
		
			  </createView>   </changeSet>	
		
		
			  <changeSet id="134" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCRecovery_AMView">	
		SELECT     FinReference, FinODSchdDate, FinODFor, MovementDate, ODDays, FinCurODAmt, FinCurODPri, PenaltyType, FinCurODPft, PenaltyCalOn, PenaltyAmtPerc, Penalty, 
                      MaxWaiver, WaivedAmt, PenaltyPaid, PenaltyBal, RcdCanDel, SeqNo
FROM          FinODCRecovery ODR
WHERE     (SeqNo =
                          (SELECT     MAX(SeqNo) Expr1
                            FROM           FinODCRecovery FinODCRecovery_1
                            WHERE      (FinReference = ODR.FinReference) AND (FinODSchdDate = ODR.FinODSchdDate) AND (FinODFor = ODR.FinODFor))) AND (MovementDate =
                          (SELECT     MAX(MovementDate) Expr1
                            FROM           FinODCRecovery
                            WHERE      (FinReference = ODR.FinReference) AND (FinODSchdDate = ODR.FinODSchdDate) AND (FinODFor = ODR.FinODFor)))
		
			  </createView>   </changeSet>	
		
			  <changeSet id="135" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCRecovery_ATView">	
		SELECT     FinReference, FinODSchdDate, FinODFor, MovementDate, ODDays, FinCurODAmt, FinCurODPri, PenaltyType, FinCurODPft, PenaltyCalOn, PenaltyAmtPerc, Penalty, 
                      MaxWaiver, WaivedAmt, PenaltyPaid, PenaltyBal, RcdCanDel, SeqNo  
FROM          FinODCRecovery ODR
WHERE    (SeqNo =
           (SELECT     MAX(SeqNo) Expr1
            FROM           FinODCRecovery FinODCRecovery_1
             WHERE     rcdCanDel=0 and  FinReference = ODR.FinReference AND FinODSchdDate = ODR.FinODSchdDate AND FinODFor = ODR.FinODFor)) AND (MovementDate =
              (SELECT     MAX(MovementDate) Expr1
             FROM           FinODCRecovery
             WHERE   rcdCanDel=0 and    (FinReference = ODR.FinReference) AND (FinODSchdDate = ODR.FinODSchdDate) AND (FinODFor = ODR.FinODFor)))
		
			  </createView>   </changeSet>	
		
			  <changeSet id="136" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCRecoveryEnquiry_View">	
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.FinCcy, T1.ScheduleMethod, T1.ProfitDaysBasis, T1.FinStartDate, T1.NumberOfTerms, T1.CustID, T1.FinAmount, 
                      T1.GrcPeriodEndDate, T1.MaturityDate, T1.FinRepaymentAmount, T1.FinIsActive, T1.AllowGrcPeriod,T1.DownPayment, 
                      T1.MigratedFinance,T1.LastRepayDate, T1.LastRepayPftDate, T2.CcyEditField LovDescFinFormatter, 
                      T2.CcyDesc LovDescFinCcyName, T3.SchdMethodDesc LovDescScheduleMethodName, T4.IntRateBasisDesc LovDescProfitDaysBasisName, 
                      T5.FinTypeDesc LovDescFinTypeName, T6.CustCIF LovDescCustCIF, T6.CustShrtName LovDescCustShrtName, T7.BranchDesc LovDescFinBranchName, 
                      T1.Blacklisted, T5.FinScheduleOn LovDescFinScheduleOn, T1.FeeChargeAmt, T1.ClosingStatus, T8.CustTypeCtg, 
                      T1.GraceTerms, T5.FinDivision lovDescFinDivision, T5.FinCategory lovDescProductCodeName, 
                      T5.FinIsAlwMD lovDescFinIsAlwMD, T5.FinIsAlwDifferment lovDescFinAlwDeferment,T1.Defferments,
                     (T1.FinAmount-T1.DownPayment+ T1.FeeChargeAmt -  T1.FinRepaymentAmount) CurFinAmount,
                     (T1.FinAmount- T1.DownPayment+ T1.FeeChargeAmt) FinancingAmount, T1.FinStatus 
FROM          FinanceMain T1 INNER JOIN
                       RMTCurrencies T2 ON T1.FinCcy = T2.CcyCode INNER JOIN
                       BMTSchdMethod T3 ON T1.ScheduleMethod = T3.SchdMethod INNER JOIN
                       BMTIntRateBasisCodes T4 ON T1.ProfitDaysBasis = T4.IntRateBasisCode INNER JOIN
                       RMTFinanceTypes T5 ON T1.FinType = T5.FinType INNER JOIN
                       Customers T6 ON T1.CustID = T6.CustID INNER JOIN
                       RMTBranches T7 ON T1.FinBranch = T7.BranchCode INNER JOIN
                       RMTCustTypes T8 ON T6.CustTypeCode = T8.CustTypeCode
                      Where FinReference in (Select FinReference From FinODCRecovery)
		
			  </createView>   </changeSet>	
		
			  <changeSet id="137" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODCWaiverRecovery_AView">	
		Select FinOD.FinReference, FinOD.FinODSchdDate, FinOD.FinODFor, FinOD.MovementDate, FinOD.SeqNo, FinOD.ODDays, FinOD.FinCurODAmt, FinOD.FinCurODPri, FinOD.FinCurODPft, 
FinOD.PenaltyType, FinOD.PenaltyCalOn, FinOD.PenaltyAmtPerc, FinOD.Penalty, FinOD.MaxWaiver, FinOD.WaivedAmt, FinOD.PenaltyPaid, FinOD.PenaltyBal, FinOD.RcdCanDel,
T3.CcyEditField lovDescFinFormatter, T4.CustCIF
from FinODCRecovery FinOD inner join (
	Select T1.* from (
		Select FinReference,MAX(FinEffectDate)MAXFinEffectDate from FinODPenaltyRates
		Group by FinReference) T inner join 
	FinODPenaltyRates T1 ON T.FinReference=T1.FinReference and T.MAXFinEffectDate = T1.FinEffectDate
		Where ODMaxWaiverPerc>0) FInP ON FInP.FinReference=FinOD.FinReference
		inner join 
	FinanceMain T2 on FinOD.FinReference=T2.FinReference inner join
	RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode
	Inner Join customers T4 on T4.CustID = T2.CustID
		
			  </createView>   </changeSet>	
		
			  <changeSet id="138" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODPenalty_Latest_Rates_View">	
		SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, ODAllowWaiver, ODMaxWaiverPerc
FROM          FinODPenaltyRates ODPR
WHERE     (FinEffectDate =
                          (SELECT     MAX(FinEffectDate) Expr1
                            FROM           FinODPenaltyRates
                            WHERE      (FinReference = ODPR.FinReference)))
		
			  </createView>   </changeSet>	
		
			  <changeSet id="139" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODPenaltyRates_AView">	
		SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, ODAllowWaiver, 
                      ODMaxWaiverPerc
FROM          FinODPenaltyRates  PR
WHERE     (FinEffectDate =
                          (SELECT     MAX(FinEffectDate)  Expr1
                            FROM           FinODPenaltyRates
                            WHERE      (FinReference = PR.FinReference)))
			  </createView>   </changeSet>	
		
			  <changeSet id="140" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODPenaltyRates_TView">	
		SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, 
           ODChargeAmtOrPerc, ODAllowWaiver, ODMaxWaiverPerc
FROM          FinODPenaltyRates_Temp PR WHERE     (FinEffectDate = (SELECT     MAX(FinEffectDate) Expr1
                            FROM          (SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, 
                                              ODAllowWaiver, ODMaxWaiverPerc FROM    FinODPenaltyRates_Temp) T
                            WHERE      (FinReference = PR.FinReference)))
		
			  </createView>   </changeSet>	
			  <changeSet id="141" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinODPenaltyRates_View">	
		
		SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, ODAllowWaiver, 
                      ODMaxWaiverPerc
FROM          FinODPenaltyRates_Temp PR

UNION 

SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, ODAllowWaiver, 
                      ODMaxWaiverPerc
FROM          FinODPenaltyRates PR


WHERE     (FinEffectDate =
                          (SELECT     MAX(FinEffectDate) Expr1
                            FROM          (SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, 
                                                                           ODAllowWaiver, ODMaxWaiverPerc
                                                    FROM           FinODPenaltyRates
                                                    UNION
                                                    SELECT     FinReference, FinEffectDate, ApplyODPenalty, ODIncGrcDays, ODChargeType, ODGraceDays, ODChargeCalOn, ODChargeAmtOrPerc, 
                                                                          ODAllowWaiver, ODMaxWaiverPerc
                                                    FROM          FinODPenaltyRates_Temp) T
                            WHERE      (FinReference = PR.FinReference)))
			  </createView>   </changeSet>	
			  <changeSet id="142" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinOverdueEnquiry_View">	
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.FinCcy, T1.ScheduleMethod, T1.ProfitDaysBasis, T1.FinStartDate, T1.NumberOfTerms, T1.CustID, T1.FinAmount, 
                      T1.GrcPeriodEndDate, T1.MaturityDate, T1.FinRepaymentAmount, T1.FinIsActive, T1.AllowGrcPeriod,T1.DownPayment, 
                      T1.MigratedFinance,T1.LastRepayDate, T1.LastRepayPftDate, T2.CcyEditField LovDescFinFormatter, 
                      T2.CcyDesc LovDescFinCcyName, T3.SchdMethodDesc LovDescScheduleMethodName, T4.IntRateBasisDesc LovDescProfitDaysBasisName, 
                      T5.FinTypeDesc LovDescFinTypeName, T6.CustCIF LovDescCustCIF, T6.CustShrtName LovDescCustShrtName, T7.BranchDesc LovDescFinBranchName, 
                      T1.Blacklisted, T5.FinScheduleOn LovDescFinScheduleOn, T1.FeeChargeAmt, T1.ClosingStatus, T8.CustTypeCtg, 
                      T1.GraceTerms, T5.FinDivision lovDescFinDivision, T5.FinCategory lovDescProductCodeName, 
                      T5.FinIsAlwMD lovDescFinIsAlwMD, T5.FinIsAlwDifferment lovDescFinAlwDeferment,T1.Defferments,
                     (T1.FinAmount-T1.DownPayment+ T1.FeeChargeAmt -  T1.FinRepaymentAmount) CurFinAmount,
                     (T1.FinAmount- T1.DownPayment+ T1.FeeChargeAmt) FinancingAmount, T1.FinStatus 
FROM          FinanceMain T1 INNER JOIN
                       RMTCurrencies T2 ON T1.FinCcy = T2.CcyCode INNER JOIN
                       BMTSchdMethod T3 ON T1.ScheduleMethod = T3.SchdMethod INNER JOIN
                       BMTIntRateBasisCodes T4 ON T1.ProfitDaysBasis = T4.IntRateBasisCode INNER JOIN
                       RMTFinanceTypes T5 ON T1.FinType = T5.FinType INNER JOIN
                       Customers T6 ON T1.CustID = T6.CustID INNER JOIN
                       RMTBranches T7 ON T1.FinBranch = T7.BranchCode INNER JOIN
                       RMTCustTypes T8 ON T6.CustTypeCode = T8.CustTypeCode
                      Where FinReference in (Select FinReference From FinODDetails)
		
			  </createView>   </changeSet>	
		
			  <changeSet id="143" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinPendingDtlsByRole_View">	
		SELECT     T2.MenuRef, T2.MenuCode, T1.FinReference, T1.CustID CustCIF, T3.CustShrtName, T2.MenuZulPath, T1.NextRoleCode
FROM          FinanceMain_Temp T1 INNER JOIN
                       PTMenuDetails T2 ON T1.RcdMaintainSts = T2.MenuCode LEFT OUTER JOIN
                       Customers T3 ON T1.CustID = T3.CustID
			  </createView>   </changeSet>	
		
			  <changeSet id="144" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinProvisions_AView">	
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustID, T1.ProvisionCalDate, T1.ProvisionedAmt, T1.ProvisionAmtCal, T1.ProvisionDue, 
                      T1.NonFormulaProv, T1.UseNFProv, T1.PrincipalDue, T1.ProfitDue, T1.AutoReleaseNFP, T1.DueFromDate, T1.LastFullyPaidDate, 
                      T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIF, T4.CustShrtName lovDescCustShrtName,
                      T1.Version, T1.LastMntOn, T1.LastMntBy,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          FinProvisions T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustID = T4.CustID
		
			  </createView>   </changeSet>	
		
			  <changeSet id="145" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinProvisions_View">	
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustID, T1.ProvisionCalDate, T1.ProvisionedAmt, T1.ProvisionAmtCal, T1.ProvisionDue, T1.NonFormulaProv, T1.UseNFProv, T1.PrincipalDue, 
                      T1.ProfitDue, T1.AutoReleaseNFP, T1.DueFromDate, T1.LastFullyPaidDate, T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIF, T4.CustShrtName lovDescCustShrtName, 
                      T1.Version, T1.LastMntOn, T1.LastMntBy, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                       T5.FinDivision lovDescFinDivision
FROM          FinProvisions_Temp T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustID = T4.CustID INNER JOIN
                      RMTFinanceTypes T5 ON T2.FinType = T5.FinType
                      
                      UNION ALL
                      
SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustID, T1.ProvisionCalDate, T1.ProvisionedAmt, T1.ProvisionAmtCal, T1.ProvisionDue, T1.NonFormulaProv, T1.UseNFProv, T1.PrincipalDue, 
                      T1.ProfitDue, T1.AutoReleaseNFP, T1.DueFromDate, T1.LastFullyPaidDate, T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIF, T4.CustShrtName lovDescCustShrtName, 
                      T1.Version, T1.LastMntOn, T1.LastMntBy, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                       T5.FinDivision lovDescFinDivision
FROM          FinProvisions T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustID = T4.CustID INNER JOIN
                      RMTFinanceTypes T5 ON T2.FinType = T5.FinType
                      
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinProvisions_Temp
                            WHERE      FinReference = T1.FinReference)
			  </createView>   </changeSet>	
		
			  <changeSet id="146" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinProvMovements_AView">	
	SELECT     FinReference, ProvMovementDate, ProvMovementSeq, ProvCalDate, ProvisionedAmt, ProvisionAmtCal, ProvisionDue, ProvisionPostSts, 
                      NonFormulaProv, UseNFProv, AutoReleaseNFP, PrincipalDue, ProfitDue, DueFromDate, LastFullyPaidDate, LinkedTranId
FROM         FinProvMovements	
		
		
			  </createView>   </changeSet>	
			    <changeSet id="147" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinRepayInstruction_AView">
		SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM         FinRepayInstruction T1
		 </createView>   </changeSet>
		 
		    <changeSet id="148" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinRepayInstruction_TView">
		SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM         FinRepayInstruction_Temp T1
		 </createView>   </changeSet>
		 
		    <changeSet id="149" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinRepayInstruction_View">
		SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM         FinRepayInstruction_Temp T1 
UNION ALL
SELECT     T1.FinReference, T1.RepayDate, T1.RepayAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.RepaySchdMethod
FROM         FinRepayInstruction T1 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinRepayInstruction_Temp
                            WHERE      FinReference = T1.FinReference)
		 </createView>   </changeSet>
		 
		    <changeSet id="150" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinRpyPriority_AView">
		SELECT     T1.FinType, T1.FinPriority, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId,  RMTFinanceTypes.FinTypeDesc lovDescFinTypeName
FROM          FinRpyPriority_Temp T1 INNER JOIN
                       RMTFinanceTypes ON T1.FinType =  RMTFinanceTypes.FinType
		 </createView>   </changeSet>
		    <changeSet id="151" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinRpyPriority_View">
		SELECT     T1.FinType, T1.FinPriority, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId,  RMTFinanceTypes.FinTypeDesc lovDescFinTypeName
FROM          FinRpyPriority_Temp T1 INNER JOIN
                       RMTFinanceTypes ON T1.FinType =  RMTFinanceTypes.FinType
UNION ALL
SELECT     T1.FinType, T1.FinPriority, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId,  RMTFinanceTypes.FinTypeDesc lovDescFinTypeName
FROM          FinRpyPriority T1 INNER JOIN
                       RMTFinanceTypes ON T1.FinType =  RMTFinanceTypes.FinType
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinRpyPriority_TEMP
                            WHERE      FinType = T1.FinType)
		 </createView>   </changeSet>
		    <changeSet id="152" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinStepPolicyDetail_AView">
		SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FinStepPolicyDetail T1
		 </createView>   </changeSet>
		    <changeSet id="153" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinStepPolicyDetail_TView">
		SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FinStepPolicyDetail_Temp T1
		 </createView>   </changeSet>  
		    <changeSet id="154" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinSuspenses_View">
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustId, T1.FinSuspSeq, T1.FinIsInSusp, T1.ManualSusp, T1.FinSuspDate, T1.FinSuspAmt, 
                      T1.FinCurSuspAmt, T2.CustCIF lovDescCustCIFName, T2.CustShrtName lovDescCustShrtName, T4.CcyEditField lovDescFinFormatter
FROM          FinSuspHead T1 INNER JOIN
                       Customers T2 ON T1.CustId = T2.CustID INNER JOIN
                       FinanceMain T3 ON T1.FinReference = T3.FinReference INNER JOIN
                       RMTCurrencies T4 ON T3.FinCcy = T4.CcyCode
		 </createView>   </changeSet>
		    <changeSet id="155" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinSuspHead_AView">
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustId, T1.FinSuspSeq, T1.FinIsInSusp, T1.ManualSusp, T1.FinSuspDate,T1.FinSuspTrfDate, T1.FinSuspAmt, 
                      T1.FinCurSuspAmt, T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIFName, T4.CustShrtName lovDescCustShrtName,
                       T1.Version, T1.LastMntOn, T1.LastMntBy, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          FinSuspHead T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustId = T4.CustID
		 </createView>   </changeSet>
		    <changeSet id="156" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinSuspHead_View">
		SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustId, T1.FinSuspSeq, T1.FinIsInSusp, T1.ManualSusp, T1.FinSuspDate,  T1.FinSuspTrfDate, T1.FinSuspAmt, 
                      T1.FinCurSuspAmt, T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIFName, T4.CustShrtName lovDescCustShrtName,
                       T1.Version, T1.LastMntOn, T1.LastMntBy, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                       T5.FinDivision lovDescFinDivision
FROM          FinSuspHead_Temp T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustId = T4.CustID  INNER JOIN
                      RMTFinanceTypes T5 ON T2.FinType = T5.FinType
UNION ALL

SELECT     T1.FinReference, T1.FinBranch, T1.FinType, T1.CustId, T1.FinSuspSeq, T1.FinIsInSusp, T1.ManualSusp, T1.FinSuspDate,  T1.FinSuspTrfDate, T1.FinSuspAmt, 
                      T1.FinCurSuspAmt, T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIFName, T4.CustShrtName lovDescCustShrtName,
                       T1.Version, T1.LastMntOn, T1.LastMntBy, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
                                              T5.FinDivision lovDescFinDivision
FROM          FinSuspHead T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       Customers T4 ON T1.CustId = T4.CustID  INNER JOIN
                      RMTFinanceTypes T5 ON T2.FinType = T5.FinType

                      
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinSuspHead_Temp
                            WHERE      FinReference = T1.FinReference)
		 </createView>   </changeSet>
		    <changeSet id="157" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinSuspHold_AView">
		SELECT		T1.SuspHoldID, T1.Product, T2.ProductDesc, T3.FinTypeDesc,T1.FinType, T1.FinReference, T1.CustID, T4.CustCIF,
            T4.CustShrtName,T1.Active , T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId
FROM    	FinSuspHold T1 LEFT OUTER JOIN 
            BMTProduct T2 ON T1.Product = T2.ProductCode LEFT OUTER JOIN
            RMTFinanceTypes T3  ON T1.FinType = T3.FinType LEFT OUTER JOIN
            Customers T4  ON T1.CustID = T4.CustID
		 </createView>   </changeSet>
		    <changeSet id="158" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinSuspHold_View">
		SELECT		T1.SuspHoldID, T1.Product, T2.ProductDesc, T3.FinTypeDesc,T1.FinType, T1.FinReference, T1.CustID, T4.CustCIF,
            T4.CustShrtName, T1.Active , T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId
FROM    	FinSuspHold_Temp T1 LEFT OUTER JOIN 
            BMTProduct T2 ON T1.Product = T2.ProductCode LEFT OUTER JOIN
            RMTFinanceTypes T3  ON T1.FinType = T3.FinType LEFT OUTER JOIN
            Customers T4  ON T1.CustID = T4.CustID 
UNION ALL
SELECT		T1.SuspHoldID, T1.Product, T2.ProductDesc, T3.FinTypeDesc,T1.FinType, T1.FinReference, T1.CustID, T4.CustCIF,
            T4.CustShrtName,T1.Active , T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId
FROM    	FinSuspHold T1 LEFT OUTER JOIN 
            BMTProduct T2 ON T1.Product = T2.ProductCode LEFT OUTER JOIN
            RMTFinanceTypes T3  ON T1.FinType = T3.FinType LEFT OUTER JOIN
            Customers T4  ON T1.CustID = T4.CustID 
WHERE     NOT EXISTS (SELECT 1 FROM FinSuspHold_TEMP WHERE FinSuspHold_TEMP.SuspHoldID = T1.SuspHoldID)
		 </createView>   </changeSet>
		    <changeSet id="159" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinTransactionHistory_IView">
		SELECT  T1.FinReference FinanceRef, T1.PostDate TransactionDate, T1.Account AccountNumber, 
T1.AcCcy Currency, T1.LinkedTranId TransactionRef,
T1.TranDesc TransactionNarration, T1.DrOrCr, T1.TranOrderId, T1.PostAmount TxnAmount,
T2.CcyEditField ccyEditField
FROM Postings T1 INNER JOIN
RMTCurrencies T2 ON T1.AcCcy = T2.CcyCode
		 </createView>   </changeSet>   <changeSet id="160" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinTypeAccounting_AView">
		SELECT     T1.FinType, T1.Event, T1.AccountSetID,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus,
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId,
		   T2.AccountSetCode lovDescEventAccountingName,T2.AccountSetCodeName lovDescAccountingName
FROM         FinTypeAccounting T1 LEFT OUTER JOIN
             RMTAccountingSet T2 ON T1.AccountSetID = T2.AccountSetid
		 </createView>   </changeSet>
		    <changeSet id="161" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinTypeAccounting_View">
		SELECT     T1.FinType, T1.Event, T1.AccountSetID,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus,
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId,
		   T2.AccountSetCode lovDescEventAccountingName,T2.AccountSetCodeName lovDescAccountingName
FROM          FinTypeAccounting_Temp T1 LEFT OUTER JOIN
              RMTAccountingSet T2 ON T1.AccountSetID = T2.AccountSetid 
UNION ALL
SELECT     T1.FinType, T1.Event, T1.AccountSetID,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus,
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId,T1.RecordType, T1.WorkflowId,
		   T2.AccountSetCode lovDescEventAccountingName,T2.AccountSetCodeName lovDescAccountingName
FROM          FinTypeAccounting T1 LEFT OUTER JOIN
              RMTAccountingSet T2 ON T1.AccountSetID = T2.AccountSetid 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinTypeAccounting_Temp
                            WHERE      FinType = T1.FinType AND Event = T1.Event)
		 </createView>   </changeSet>
		    <changeSet id="162" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FlagDetails_AView">
		SELECT    T1.Reference, T1.FlagCode, T1.ModuleName,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
          T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId                         
                     
FROM        FlagDetails T1
		 </createView>   </changeSet>
		    <changeSet id="163" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FlagDetails_View">
		SELECT    T1.Reference, T1.FlagCode, T1.ModuleName,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
          T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FlagDetails_Temp T1  
			
UNION ALL
SELECT    T1.Reference, T1.FlagCode,T1.ModuleName,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
          T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FlagDetails T1 
WHERE     (NOT EXISTS
                          (SELECT     1 FROM     FlagDetails_Temp
                            WHERE      Reference = T1.Reference and FlagCode=T1.FlagCode AND ModuleName= T1.ModuleName ))
		 </createView>   </changeSet>
		    <changeSet id="164" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Flags_AView">
		SELECT     FlagCode, FlagDesc, Active, Version,LastMntBy, LastMntOn, 
RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         Flags
		 </createView>   </changeSet>
		    <changeSet id="165" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Flags_View">
		SELECT     T1.FlagCode, T1.FlagDesc, Active, T1.Version, T1.LastMntBy, T1.LastMntOn, 
T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         Flags_Temp T1 
UNION ALL
SELECT     FlagCode, FlagDesc, Active, T1.Version, T1.LastMntBy, T1.LastMntOn,
 T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         Flags T1 
			

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM         Flags_Temp
                            WHERE      FlagCode= T1.FlagCode)
		 </createView>   </changeSet>
		    
			 <changeSet id="166" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinStepPolicyDetail_View">
		SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FinStepPolicyDetail_Temp T1

UNION ALL 
SELECT     T1.FinReference, T1.StepNo, T1.TenorSplitPerc, T1.Installments, T1.RateMargin, T1.EMISplitPerc, T1.SteppedEMI, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         FinStepPolicyDetail T1

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FinStepPolicyDetail_Temp
                            WHERE      FinReference = T1.FinReference AND StepNo = T1.StepNo)
		 </createView>   </changeSet>	
		 
		 			 <changeSet id="167" author="Pruthvi">
		<createView replaceIfExists="true" viewName="InventorySettlement_AView">
		SELECT		T1.Id, T1.BrokerCode, T1.SettlementDate		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	InventorySettlement T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
			 </createView>   </changeSet>
			 
			 		 <changeSet id="168" author="Pruthvi">
		<createView replaceIfExists="true" viewName="InventorySettlement_View">
		SELECT		T1.Id, T1.BrokerCode, T1.SettlementDate		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T4.CustShrtName BrokerCodeName
FROM    	InventorySettlement_Temp T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
			 FCMTBrokerDetail T3 ON T1.BrokerCode = T3.BrokerCode INNER JOIN
			 Customers T4 ON T3.BrokerCustID = T4.CustID
UNION ALL

SELECT		T1.Id, T1.BrokerCode, T1.SettlementDate		
			, T1.Version , T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T4.CustShrtName BrokerCodeName
FROM    	InventorySettlement T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
			 FCMTBrokerDetail T3 ON T1.BrokerCode = T3.BrokerCode INNER JOIN
			 Customers T4 ON T3.BrokerCustID = T4.CustID

WHERE     NOT EXISTS (SELECT 1 FROM InventorySettlement_TEMP WHERE Id = T1.Id)
			 </createView>   </changeSet>
			 
			 		 <changeSet id="169" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Investment_Deal_TView">
		SELECT     T1.FinReference, T1.InvestmentRef, T1.FinType, T3.FinTypeDesc lovDescFinTypeName, T1.FinCcy, T5.CcyDesc LovDescFinCcyName, 
                      T5.CcyEditField lovDescFinFormatter, T1.FinAmount, T1.TotalProfit, T1.TotalRepayAmt, T1.FinStartDate, T1.MaturityDate, T1.LastRepayDate, T1.LastRepayPftDate, 
                      T1.LastRepayRvwDate, T1.LastRepayCpzDate, T1.RecordStatus, T1.RecordType, T1.RoleCode, T1.NextRoleCode, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.TaskId, T1.NextTaskId, T1.WorkflowId, T2.CustID, T2.CustCIF lovDescCustCif, T2.CustShrtName lovDescCustShrtName, 
                      T3.FinCategory lovDescProductCodeName, T5.CcyEditField, T1.RepayProfitRate, T1.FinBranch, T7.BranchDesc lovDescFinBranchName, 
                      T1.ScheduleMethod, T10.SchdMethodDesc lovDescScheduleMethodName, T1.ProfitDaysBasis, 
                      T9.IntRateBasisCode LovDescProfitDaysBasisName, T1.DisbAccountId, T1.RepayAccountId
FROM          FinanceMain_Temp T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID INNER JOIN
                       RMTFinanceTypes T3 ON T3.FinType = T1.FinType INNER JOIN
                       InvestmentFinHeader_View T6 ON T6.InvestmentRef = T1.InvestmentRef INNER JOIN
                       RMTCurrencies T5 ON T6.finCcy = T5.CcyCode INNER JOIN
                       RMTBranches T7 ON T7.BranchCode = T1.FinBranch INNER JOIN
                       BMTIntRateBasisCodes T9 ON T9.IntRateBasisCode = T1.ProfitDaysBasis INNER JOIN
                       BMTSchdMethod T10 ON T1.ScheduleMethod = T10.SchdMethod
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="170" author="Pruthvi">
		<createView replaceIfExists="true" viewName="InvestmentFinHeader_AView">
		SELECT     T1.InvestmentRef, T1.TotPrincipalAmt, T1.finCcy, T2.CcyDesc lovDescfinCcyName, T2.CcyEditField lovDescFinFormatter, T1.ProfitDaysBasis, 
                      T3.IntRateBasisDesc lovDescProfitDaysBasisName, T1.StartDate, T1.MaturityDate, T1.PrincipalInvested, T1.PrincipalMaturity, 
                      T1.PrincipalDueToInvest, T1.AvgPftRate, T1.ApprovalRequired, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          InvestmentFinHeader T1 INNER JOIN
                       RMTCurrencies T2 ON T2.CcyCode = T1.finCcy INNER JOIN
                       BMTIntRateBasisCodes T3 ON T3.IntRateBasisCode = T1.ProfitDaysBasis
			 </createView>   </changeSet>
			 
			 		 <changeSet id="171" author="Pruthvi">
		<createView replaceIfExists="true" viewName="InvestmentFinHeader_View">
		SELECT     T1.InvestmentRef, T1.TotPrincipalAmt, T1.finCcy, T2.CcyDesc lovDescfinCcyName, T2.CcyEditField lovDescFinFormatter, T1.ProfitDaysBasis, 
                      T3.IntRateBasisDesc lovDescProfitDaysBasisName, T1.StartDate, T1.MaturityDate, T1.PrincipalInvested, T1.PrincipalMaturity, T1.PrincipalDueToInvest, 
                      T1.AvgPftRate, T1.ApprovalRequired, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId,T2.CcyEditField ReportFormat
FROM          InvestmentFinHeader_Temp T1 INNER JOIN
                       RMTCurrencies T2 ON T2.CcyCode = T1.finCcy INNER JOIN
                       BMTIntRateBasisCodes T3 ON T3.IntRateBasisCode = T1.ProfitDaysBasis 
UNION ALL
SELECT     T1.InvestmentRef, T1.TotPrincipalAmt, T1.finCcy, T2.CcyDesc lovDescfinCcyName, T2.CcyEditField lovDescFinFormatter, T1.ProfitDaysBasis, 
                      T3.IntRateBasisDesc lovDescProfitDaysBasisName, T1.StartDate, T1.MaturityDate, T1.PrincipalInvested, T1.PrincipalMaturity, T1.PrincipalDueToInvest, 
                      T1.AvgPftRate, T1.ApprovalRequired, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId,T2.CcyEditField ReportFormat
FROM          InvestmentFinHeader T1 INNER JOIN
                       RMTCurrencies T2 ON T2.CcyCode = T1.finCcy INNER JOIN
                       BMTIntRateBasisCodes T3 ON T3.IntRateBasisCode = T1.ProfitDaysBasis
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           InvestmentFinHeader_Temp
                            WHERE      (InvestmentRef = T1.InvestmentRef)))
			 </createView>   </changeSet>
			 
			 		 <changeSet id="172" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostingEntry_AView">
		SELECT     T1.BatchReference, T1.AccountName, T1.TxnCCy, T1.TxnCode, T1.PostingDate, T1.ValueDate, T1.TxnAmount, T1.TxnReference, T1.NarrLine1, T1.NarrLine2, 
                      T1.NarrLine3, T1.NarrLine4, T1.ExchRate_Batch, T1.ExchRate_Ac, T1.TxnAmount_Batch, T1.TxnAmount_Ac, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyDesc TxnCCyName, T3.CcyEditField TxnCCyEditField, 
                      T1.AccCcy, T4.CcyDesc AccCCyName, T4.CcyEditField AccCCyEditField, T5.TranDesc TxnDesc, T1.ValidationStatus, T1.ModifiedFlag, T1.DeletedFlag, 
                      T1.TxnEntry, T1.PostingStatus, T1.HostSeqNo, T4.CcyNumber AcCcyNumber, T3.CcyNumber TxnCcyNumber, T1.AcType, T1.AcEntryRef, T1.ExternalAccount, 
                      T1.Account, T1.FileName, T1.LinkedTranId, T1.Version
FROM          JVPostingEntry T1 INNER JOIN
                       RMTCurrencies T3 ON T1.TxnCCy = T3.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T4 ON T1.AccCcy = T4.CcyCode LEFT OUTER JOIN
                       BMTTransactionCode T5 ON T1.TxnCode = T5.TranCode
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="173" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostingEntry_TView">
		SELECT     T1.BatchReference, T1.Account, T1.AccountName, T1.TxnCCy, T1.TxnCode, T1.PostingDate, T1.ValueDate, T1.TxnAmount, T1.TxnReference, T1.NarrLine1, 
                      T1.NarrLine2, T1.NarrLine3, T1.NarrLine4, T1.ExchRate_Batch, T1.ExchRate_Ac, T1.TxnAmount_Batch, T1.TxnAmount_Ac, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyDesc TxnCCyName, 
                      T3.CcyEditField TxnCCyEditField, T1.AccCcy, T4.CcyDesc AccCCyName, T4.CcyEditField AccCCyEditField, T5.TranDesc TxnDesc, T1.ValidationStatus, 
                      T1.ModifiedFlag, T1.DeletedFlag, T1.TxnEntry, T1.PostingStatus, T1.HostSeqNo, T4.CcyNumber AcCcyNumber, T3.CcyNumber TxnCcyNumber, T1.AcType, 
                      T1.AcEntryRef, T1.ExternalAccount, T1.FileName, T1.LinkedTranId
FROM          JVPostingEntry_Temp T1 INNER JOIN
                       RMTCurrencies T3 ON T1.TxnCCy = T3.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T4 ON T1.AccCcy = T4.CcyCode LEFT OUTER JOIN
                       BMTTransactionCode T5 ON T1.TxnCode = T5.TranCode
			 </createView>   </changeSet>
			 
			 		 <changeSet id="174" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostingEntry_View">
		SELECT     T1.BatchReference, T1.Account, T1.AccountName, T1.TxnCCy, T1.TxnCode, T1.PostingDate, T1.ValueDate, T1.TxnAmount, T1.TxnReference, T1.NarrLine1, 
                      T1.NarrLine2, T1.NarrLine3, T1.NarrLine4, T1.ExchRate_Batch, T1.ExchRate_Ac, T1.TxnAmount_Batch, T1.TxnAmount_Ac, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyDesc TxnCCyName, 
                      T3.CcyEditField TxnCCyEditField, T1.AccCcy, T4.CcyDesc AccCCyName, T4.CcyEditField AccCCyEditField, T5.TranDesc TxnDesc, T1.ValidationStatus, 
                      T1.ModifiedFlag, T1.DeletedFlag, T1.TxnEntry, T1.PostingStatus, T1.HostSeqNo, T4.CcyNumber AcCcyNumber, T3.CcyNumber TxnCcyNumber, T1.AcType, 
                      T1.AcEntryRef, T1.ExternalAccount, T1.FileName, T1.LinkedTranId, T1.derivedTxnRef
FROM          JVPostingEntry_Temp T1 INNER JOIN
                       RMTCurrencies T3 ON T1.TxnCCy = T3.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T4 ON T1.AccCcy = T4.CcyCode LEFT OUTER JOIN
                       BMTTransactionCode T5 ON T1.TxnCode = T5.TranCode
UNION ALL
SELECT     T1.BatchReference, T1.Account, T1.AccountName, T1.TxnCCy, T1.TxnCode, T1.PostingDate, T1.ValueDate, T1.TxnAmount, T1.TxnReference, T1.NarrLine1, 
                      T1.NarrLine2, T1.NarrLine3, T1.NarrLine4, T1.ExchRate_Batch, T1.ExchRate_Ac, T1.TxnAmount_Batch, T1.TxnAmount_Ac, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyDesc TxnCCyName, 
                      T3.CcyEditField TxnCCyEditField, T1.AccCcy, T4.CcyDesc AccCCyName, T4.CcyEditField AccCCyEditField, T5.TranDesc TxnDesc, T1.ValidationStatus, 
                      T1.ModifiedFlag, T1.DeletedFlag, T1.TxnEntry, T1.PostingStatus, T1.HostSeqNo, T4.CcyNumber AcCcyNumber, T3.CcyNumber TxnCcyNumber, T1.AcType, 
                      T1.AcEntryRef, T1.ExternalAccount, T1.FileName, T1.LinkedTranId ,T1.derivedTxnRef
FROM          JVPostingEntry T1 INNER JOIN
                       RMTCurrencies T3 ON T1.TxnCCy = T3.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T4 ON T1.AccCcy = T4.CcyCode LEFT OUTER JOIN
                       BMTTransactionCode T5 ON T1.TxnCode = T5.tRANCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          JVPostingEntry_TEMP
                            WHERE      BatchReference = T1.BatchReference AND TxnReference = T1.TxnReference)
			 </createView>   </changeSet>
			 
			 		 <changeSet id="175" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostings_AView">
		SELECT     T1.BatchReference, T1.Batch, T1.Filename, T1.DebitCount, T1.CreditsCount, T1.TotDebitsByBatchCcy, T1.TotCreditsByBatchCcy, T1.BatchPurpose, T1.Currency, 
                      T1.ExchangeRateType, T1.ValidationStatus, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyEditField CurrencyEditField, T3.CcyDesc CurrencyDesc, 
                      T1.BatchPostingStatus, T3.CcyNumber, T1.Branch, T1.PostingDate,T1.expReference
FROM          JVPostings T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       RMTCurrencies T3 ON T1.Currency = T3.CcyCode
			 </createView>   </changeSet>
			 
			 		 <changeSet id="176" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostings_TView">
		SELECT     T1.BatchReference, T1.Batch, T1.Filename, T1.DebitCount, T1.CreditsCount, T1.TotDebitsByBatchCcy, T1.TotCreditsByBatchCcy, T1.BatchPurpose, T1.Currency, 
                      T1.ExchangeRateType, T1.ValidationStatus, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyEditField CurrencyEditField, T3.CcyDesc CurrencyDesc, 
                      T1.BatchPostingStatus, T3.CcyNumber, T1.Branch, T1.PostingDate,T1.expReference
FROM          JVPostings_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       RMTCurrencies T3 ON T1.Currency = T3.CcyCode
			 </createView>   </changeSet>
			 
			 		 <changeSet id="177" author="Pruthvi">
		<createView replaceIfExists="true" viewName="JVPostings_View">
		SELECT     T1.BatchReference, T1.Batch, T1.Filename, T1.DebitCount, T1.CreditsCount, T1.TotDebitsByBatchCcy, T1.TotCreditsByBatchCcy, T1.BatchPurpose, T1.Currency, 
                      T1.ExchangeRateType, T1.ValidationStatus, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyEditField CurrencyEditField, T3.CcyDesc CurrencyDesc, 
                      T1.BatchPostingStatus, T3.CcyNumber, T1.Branch, T1.PostingDate,T1.expReference

FROM          JVPostings_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       RMTCurrencies T3 ON T1.Currency = T3.CcyCode
UNION ALL
SELECT     T1.BatchReference, T1.Batch, T1.Filename, T1.DebitCount, T1.CreditsCount, T1.TotDebitsByBatchCcy, T1.TotCreditsByBatchCcy, T1.BatchPurpose, T1.Currency, 
                      T1.ExchangeRateType, T1.ValidationStatus, T1.Version, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CcyEditField CurrencyEditField, T3.CcyDesc CurrencyDesc, 
                      T1.BatchPostingStatus, T3.CcyNumber, T1.Branch, T1.PostingDate,T1.expReference

FROM          JVPostings T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       RMTCurrencies T3 ON T1.Currency = T3.CcyCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          JVPostings_TEMP
                            WHERE      BatchReference = T1.BatchReference)
			 </createView>   </changeSet>
			 
			 		 <changeSet id="178" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroup_AView">
		SELECT		T1.LimitCategory,T1.GroupCode, T1.GroupName	,T1.Active	,T1.GroupOf	
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroup T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="179" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroup_TView">
		SELECT		T1.LimitCategory,T1.GroupCode, T1.GroupName,T1.Active,T1.GroupOf				
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroup_Temp T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
			 </createView>   </changeSet>
			 
			 		 <changeSet id="180" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroup_View">
		SELECT		T1.LimitCategory,T1.GroupCode, T1.GroupName,T1.Active,T1.GroupOf	
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroup_Temp T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID

UNION ALL

SELECT		T1.LimitCategory,T1.GroupCode, T1.GroupName,T1.Active,T1.GroupOf		
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroup T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID

WHERE     NOT EXISTS (SELECT 1 FROM LimitGroup_Temp WHERE GroupCode = T1.GroupCode)
			 </createView>   </changeSet>
			 
			 		 <changeSet id="181" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroupLines_AVIEW">
		SELECT		T1.LimitGroupCode, T5.LimitCategory, T1.GroupCode, T3.GroupName,T1.LimitLine,  T1.LimitLines ,	T4.RuleCodeDesc LimitLineDesc,T1.ItemSeq,	
			T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroupLines T1 INNER JOIN
			 LimitGroup_View T5 ON T1.LimitGroupCode = T5.GroupCode INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT JOIN
             LimitGroup T3 ON T1.GroupCode = T3.GroupCode LEFT JOIN
              Rules T4 ON T1.LimitLine = T4.Rulecode and RuleModule='LMTLINE'
			 </createView>   </changeSet>
			 
			 		 <changeSet id="182" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroupLines_TVIEW">
		SELECT		T1.LimitGroupCode,T5.LimitCategory, T1.GroupCode,T3.GroupName, T1.LimitLine,  T1.LimitLines ,	T4.RuleCodeDesc LimitLineDesc,T1.ItemSeq,
			T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroupLines_Temp T1 INNER JOIN
			 LimitGroup_View T5 ON T1.LimitGroupCode = T5.GroupCode INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT JOIN
             LimitGroup T3 ON T1.GroupCode = T3.GroupCode LEFT JOIN
             Rules T4 ON T1.LimitLine = T4.Rulecode and  RuleModule='LMTLINE'
			 </createView>   </changeSet>
			 
			 		 <changeSet id="183" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitGroupLines_View">
		SELECT		T1.LimitGroupCode,T5.LimitCategory, T1.GroupCode, T3.GroupName,T1.LimitLine , T1. LimitLines,	T4.RuleCodeDesc LimitLineDesc,T1.ItemSeq,
			T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroupLines_Temp T1 INNER JOIN
			 LimitGroup_View T5 ON T1.LimitGroupCode = T5.GroupCode INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT JOIN
             LimitGroup T3 ON T1.GroupCode = T3.GroupCode LEFT JOIN
             Rules T4 ON T1.LimitLine = T4.Rulecode and  RuleModule='LMTLINE'
UNION ALL

SELECT		T1.LimitGroupCode, T5.LimitCategory, T1.GroupCode, T3.GroupName,T1.LimitLine , T1.LimitLines ,	T4.RuleCodeDesc LimitLineDesc,T1.ItemSeq,	
			T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitGroupLines T1 INNER JOIN
			 LimitGroup_View T5 ON T1.LimitGroupCode = T5.GroupCode INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT JOIN
             LimitGroup T3 ON T1.GroupCode = T3.GroupCode LEFT JOIN
              Rules T4 ON T1.LimitLine = T4.Rulecode and  RuleModule='LMTLINE'

WHERE     NOT EXISTS (SELECT 1 FROM LimitGroupLines_Temp WHERE LimitGroupCode = T1.LimitGroupCode AND (GroupCode=T1.GroupCode  OR LimitLine=T1.LimitLine))
			 </createView>   </changeSet>
			 
			 		 <changeSet id="184" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitParams_AView">
		SELECT     QueryId,QueryCode, QueryModule, SQLQuery, ActualBlock, T1.Active,Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId, QuerySubCode, QueryDesc
FROM         LimitParams T1
			 </createView>   </changeSet>
			 
			 		
			 
			 		 <changeSet id="185" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructure_AView">
		SELECT		T1.LimitCategory,T1.StructureCode, T1.StructureName, T1.Active,T1.LimitCheckFilter,T1.ShowLimitsIn			
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitStructure T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
			 </createView>   </changeSet>
			 
			 		 <changeSet id="186" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructure_TView">
		SELECT		T1.LimitCategory,T1.StructureCode, T1.StructureName, T1.Active	,T1.LimitCheckFilter,T1.ShowLimitsIn		
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitStructure_Temp T1 INNER JOIN
            SecUsers T2 ON T1.LastMntBy = T2.UsrID
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="187" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructure_View">
		SELECT		T1.LimitCategory,T1.StructureCode, T1.StructureName, T1.Active	,T1.LimitCheckFilter,T1.ShowLimitsIn
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitStructure_Temp T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID 

UNION ALL

SELECT		T1.LimitCategory,T1.StructureCode, T1.StructureName,T1.Active,T1.LimitCheckFilter,T1.ShowLimitsIn
			, T1.Version ,T1.CreatedBy,T1.CreatedOn, T1.LastMntBy, T1.LastMntOn,T2.UsrLogin,T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.
RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM    	LimitStructure T1 INNER JOIN
             SecUsers T2 ON T1.LastMntBy = T2.UsrID

WHERE     NOT EXISTS (SELECT 1 FROM LimitStructure_Temp WHERE StructureCode = T1.StructureCode)
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="188" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructureDetails_AView">
		SELECT     T1.LimitStructureDetailsID,T1.LimitStructureCode, T5.StructureName, T1.GroupCode, T3.GroupName, T1.LimitLine, T4.RuleCodeDesc LimitLineDesc,T1.Revolving,T1.LimitCategory, T1.ItemPriority ,T1.LimitCheck, 
                      T1.ItemSeq,T1.ItemLevel,T1.Editable, T1.DisplayStyle, T1.Version, T1.CreatedBy, T1.CreatedOn, 
                      T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM          LimitStructureDetails T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       LimitStructure_Temp T5 ON T1.LimitStructureCode = T5.StructureCode LEFT OUTER JOIN
                       Rules T4 ON T1.LimitLine = T4.Rulecode and  RuleModule='LMTLINE' LEFT OUTER JOIN
                       LimitGroup T3 ON T1.GroupCode = T3.GroupCode
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="189" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructureDetails_TView">
		SELECT     T1.LimitStructureDetailsID,T1.LimitStructureCode, T5.StructureName, T1.GroupCode, T3.GroupName, T1.LimitLine, T4.RuleCodeDesc LimitLineDesc,T1.Revolving, T1.LimitCategory, T1.ItemPriority ,T1.LimitCheck, 
                      T1.ItemSeq, T1.ItemLevel,T1.Editable, T1.DisplayStyle, T1.Version, T1.CreatedBy, T1.CreatedOn, 
                      T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM          LimitStructureDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       LimitStructure_Temp T5 ON T1.LimitStructureCode = T5.StructureCode LEFT OUTER JOIN
                       Rules T4 ON T1.LimitLine = T4.Rulecode  and RuleModule='LMTLINE' LEFT OUTER JOIN
                       LimitGroup T3 ON T1.GroupCode = T3.GroupCode
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="190" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitStructureDetails_View">
		SELECT     T1.LimitStructureDetailsID,T1.LimitStructureCode, T5.StructureName, T1.GroupCode, T3.GroupName, T1.LimitLine, T4.RuleCodeDesc LimitLineDesc,T1.Revolving, T1.LimitCategory, T1.ItemPriority ,T1.LimitCheck,  T1.ItemSeq, T1.ItemLevel,T1.Editable, T1.DisplayStyle, T1.Version,
                       T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LimitStructureDetails_Temp T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       LimitStructure_Temp T5 ON T1.LimitStructureCode = T5.StructureCode LEFT OUTER JOIN
                      Rules T4 ON T1.LimitLine = T4.Rulecode and RuleModule='LMTLINE' LEFT OUTER JOIN
                       LimitGroup T3 ON T1.GroupCode = T3.GroupCode 
UNION ALL
SELECT     T1.LimitStructureDetailsID,T1.LimitStructureCode, T5.StructureName, T1.GroupCode, T3.GroupName, T1.LimitLine, T4.RuleCodeDesc LimitLineDesc,T1.Revolving,T1.LimitCategory, T1.ItemPriority ,T1.LimitCheck,  T1.ItemSeq, T1.ItemLevel,T1.Editable, T1.DisplayStyle, T1.Version,
                       T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1.LastMntOn, T2.UsrLogin, T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LimitStructureDetails T1 INNER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID INNER JOIN
                       LimitStructure T5 ON T1.LimitStructureCode = T5.StructureCode LEFT OUTER JOIN
                       Rules T4 ON T1.LimitLine = T4.Rulecode and RuleModule='LMTLINE' LEFT OUTER JOIN
                       LimitGroup T3 ON T1.GroupCode = T3.GroupCode
WHERE     NOT EXISTS (SELECT  1 FROM LimitStructureDetails_Temp WHERE LimitStructureDetailsID= T1.LimitStructureDetailsID)
			 </createView>   </changeSet>
			 
			 		 <changeSet id="191" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTAircraftLoanDetail_AView">
		SELECT   T1.FinReference, T1.AircraftDesc, T1.FlagCountry, T1.AircraftOwnership, T1.Marketvalue, T1.MSN, T1.RegisteredAgency,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId		 
         FROM  LMTAircraftLoanDetail T1 
         INNER JOIN   FinanceMain T2 ON T2.FinReference = T1.FinReference
			 </createView>   </changeSet>
			 
			 		 <changeSet id="192" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTAircraftLoanDetail_TView">
		SELECT   T1.FinReference, T1.AircraftDesc, T1.FlagCountry, T1.AircraftOwnership, T1.Marketvalue, T1.MSN, T1.RegisteredAgency,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	  
		 FROM LMTAircraftLoanDetail_Temp T1 
		 INNER JOIN FinanceMain_Temp T2 ON T2.FinReference = T1.FinReference
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="193" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTAircraftLoanDetail_View">
		SELECT   T1.FinReference, T1.AircraftDesc, T1.FlagCountry, T1.AircraftOwnership, T1.Marketvalue, T1.MSN, T1.RegisteredAgency,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	  
		 FROM  LMTAircraftLoanDetail_Temp T1 
		 INNER JOIN  FinanceMain_Temp T2 ON T2.FinReference = T1.FinReference 
		
UNION ALL
SELECT   T1.FinReference, T1.AircraftDesc, T1.FlagCountry, T1.AircraftOwnership, T1.Marketvalue, T1.MSN, T1.RegisteredAgency,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	
		 FROM  LMTAircraftLoanDetail T1  
		 INNER JOIN  FinanceMain T2 ON T2.FinReference = T1.FinReference 
		
WHERE NOT EXISTS 
                 (SELECT   1 
				  FROM        LMTAircraftLoanDetail_Temp 
				  WHERE       FinReference = T1.FinReference)
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="194" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCarLoanDetail_AView">
		SELECT T1.LoanRefNumber ,
          T1.ItemNumber ,
          T1.LoanRefType ,
          T1.CarLoanFor ,
          T2.FieldCode LovDescLoanForCode  ,
          T14.FieldCodeDesc LovDescLoanForCodeName,
          T2.FieldCodeValue LovDescCarLoanForName,
          T1.CarUsage ,
          T3.FieldCode LovDescCarUsageCode  ,
          T15.FieldCodeDesc LovDescCarUsageCodeName  ,
          T3.FieldCodeValue LovDescCarUsageName  ,
          T7.ManufacturerName LovDescManufacturerName  ,
          T8.VehicleModelDesc LovDescModelDesc  ,
          T1.CarVersion ,
          T4.VehicleVersionCode LovDescCarVersionName  ,
          T1.CarMakeYear ,
          T1.CarCapacity ,
          T1.CarDealer ,
          T6.DealerName LovDescCarDealerName  ,
          T1.CarCc ,
          T1.CarChasisNo ,
          T1.CarRegNo ,
          T1.CarColor ,
		  T1.Description ,
          T1.Version ,
          T1.LastMntBy ,
          T1.LastMntOn ,
          T1.RecordStatus ,
          T1.RoleCode ,
          T1.NextRoleCode ,
          T1.TaskId ,
          T1.NextTaskId ,
          T1.RecordType ,
          T1.WorkflowId ,
          T1.EngineNumber ,
          T1.PaymentMode ,
          T1.PurchageOdrNumber ,
          T1.QuoationNbr ,
          T1.QuoationDate ,
          T1.DealerPhone ,
          T1.PurchaseDate ,
          T1.VehicleModelId ,
          T1.ManufacturerId ,
          T6.DealerTelephone lovDescCarDealerPhone  ,
          T6.DealerFax lovDescCarDealerFax  ,
          T1.ThirdPartyReg ,
          T1.ThirdPartyName ,
          T1.PassportNum ,
          T1.ThirdPartyNat ,
          T11.ValueDesc LovDescCarColorName  ,
          T9.NationalityDesc lovDescThirdPartyNatName  ,
          T6.Email lovDescCarDealerEmail  ,
          T6.AccountNumber CarDealerDftAccount  ,
          T1.EmiratesRegNum ,
          T10.CPProvinceName LovDescEmiratesRegNumName  ,
          T1.SellerType ,
          T1.DealerOrSellerAcc ,
          T1.VehicleValue ,
          T1.PrivateDealerName ,
          T1.SalesPersonName ,
          T1.TrafficProfileNo ,
          T1.MortgageTranID ,
          T12.DealerName SalesPersonDesc  ,
          T13.CPProvinceName lovDescDealerAddr  ,
          T4.VehicleCategory lovDescVersionCategory,
          T6.PObox DealerPOBox,
          T6.DealerCountry,
          T19.CountryDesc lovDescCountry,
          T18.CPProvinceName lovDescProvince,
          T6.DealerProvince,
          T17.PCCityName lovDescCity,
          T6.DealerCity,
          T1.VehicleWarranty,
          T20.DealerName lovDescPrivateDealerName,
          T1.inspectionDetail,
          T1.LPODate,
		  T1.Quantity,
		  T1.MortgageCancelSts,
		  T1.ResponseCode
		  
     FROM LMTCarLoanDetail T1
            LEFT JOIN RMTLovFieldDetail T2   ON T1.CarLoanFor = T2.FieldCodeId
            LEFT JOIN BMTLovFieldCode T14   ON T2.FieldCode = T14.FieldCode
            LEFT JOIN RMTLovFieldDetail T3   ON T1.CarUsage = T3.FieldCodeId
            LEFT JOIN BMTLovFieldCode T15   ON T3.FieldCode = T15.FieldCode
            LEFT JOIN RMTLovFieldDetail T11  ON T1.CarColor = T11.FieldCodeId
            LEFT JOIN BMTLovFieldCode T16	 ON T11.FieldCode = T16.FieldCode
            LEFT JOIN AMTVehicleManufacturer T7   ON T7.ManufacturerId = T1.ManufacturerId
            LEFT JOIN AMTVehicleModel T8   ON T8.VehicleModelId = T1.VehicleModelId
            LEFT JOIN AMTVehicleVersion T4   ON T1.CarVersion = T4.VehicleVersionId
            LEFT JOIN BMTNationalityCodes T9   ON T1.ThirdPartyNat = T9.NationalityCode
            LEFT JOIN AMTVehicleDealer T6   ON T1.CarDealer = T6.DealerId
            JOIN FinanceMain T5   ON T5.FinReference = T1.LoanRefNumber
            LEFT OUTER JOIN  RMTProvinceVsCity T17 ON T6.DealerCountry = T17.PCCountry AND T6.DealerProvince = T17.PCProvince AND T6.DealerCity = T17.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T18 ON T6.DealerCountry = T18.CPCountry AND T6.DealerProvince = T18.CPProvince LEFT OUTER JOIN
              BMTCountries T19 ON T6.DealerCountry = T19.CountryCode LEFT OUTER JOIN
            RMTCountryVsProvince T10   ON T1.EmiratesRegNum = T10.CPProvince
            AND T10.CPCountry = 'AE'
            LEFT JOIN AMTVehicleDealer T12   ON T1.SalesPersonName = T12.DealerId 
            LEFT JOIN RMTCountryVsProvince T13 ON T6.DealerProvince=T13.CPProvince 
			and T13.CPCountry='AE'
			LEFT JOIN AMTVehicleDealer T20   ON T1.PrivateDealerName = T20.DealerId
     WHERE NOT EXISTS ( SELECT 1 
                        FROM LMTCarLoanDetail_Temp 
                          WHERE LoanRefNumber = T1.LoanRefNumber )
			 </createView>   </changeSet>
			 
			 		 <changeSet id="195" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCarLoanDetail_TView">
		SELECT T1.LoanRefNumber ,
          T1.ItemNumber ,
          T1.LoanRefType ,
          T1.CarLoanFor ,
          T2.FieldCode LovDescLoanForCode  ,
          T14.FieldCodeDesc LovDescLoanForCodeName  ,
          T2.FieldCodeValue LovDescCarLoanForName  ,
          T1.CarUsage ,
          T3.FieldCode LovDescCarUsageCode  ,
          T15.FieldCodeDesc LovDescCarUsageCodeName  ,
          T3.FieldCodeValue LovDescCarUsageName  ,
          T7.ManufacturerName LovDescManufacturerName  ,
          T8.VehicleModelDesc LovDescModelDesc  ,
          T1.CarVersion ,
          T4.VehicleVersionCode LovDescCarVersionName  ,
          T1.CarMakeYear ,
          T1.CarCapacity ,
          T1.CarDealer ,
          T6.DealerName LovDescCarDealerName  ,
          T1.CarCc ,
          T1.CarChasisNo ,
          T1.CarRegNo ,
          T1.CarColor ,
		  T1.Description ,
          T1.Version ,
          T1.LastMntBy ,
          T1.LastMntOn ,
          T1.RecordStatus ,
          T1.RoleCode ,
          T1.NextRoleCode ,
          T1.TaskId ,
          T1.NextTaskId ,
          T1.RecordType ,
          T1.WorkflowId ,
          T1.EngineNumber ,
          T1.PaymentMode ,
          T1.PurchageOdrNumber ,
          T1.QuoationNbr ,
          T1.QuoationDate ,
          T1.DealerPhone ,
          T1.PurchaseDate ,
          T1.VehicleModelId ,
          T1.ManufacturerId ,
          T6.DealerTelephone lovDescCarDealerPhone  ,
          T6.DealerFax lovDescCarDealerFax  ,
          T6.Email lovDescCarDealerEmail  ,
          T1.ThirdPartyReg ,
          T1.ThirdPartyName ,
          T1.PassportNum ,
          T1.ThirdPartyNat ,
          T11.ValueDesc LovDescCarColorName  ,
          T9.NationalityDesc lovDescThirdPartyNatName  ,
          T6.AccountNumber CarDealerDftAccount  ,
          T1.EmiratesRegNum ,
          T10.CPProvinceName LovDescEmiratesRegNumName  ,
          T1.SellerType ,
          T1.DealerOrSellerAcc ,
          T1.VehicleValue ,
          T1.PrivateDealerName ,
          T1.SalesPersonName ,
          T1.TrafficProfileNo ,
          T1.MortgageTranID ,
          T12.DealerName SalesPersonDesc  ,
          T13.CPProvinceName lovDescDealerAddr  ,
          T4.VehicleCategory lovDescVersionCategory,
          T6.PObox DealerPOBox,
          T6.DealerCountry,
          T19.CountryDesc lovDescCountry,
          T18.CPProvinceName lovDescProvince,
          T6.DealerProvince,
          T17.PCCityName lovDescCity,
          T6.DealerCity,
          T1.VehicleWarranty,
          T20.DealerName lovDescPrivateDealerName,
          T1.inspectionDetail,
          T1.LPODate,
		  T1.Quantity,
		  T1.MortgageCancelSts,
		  T1.ResponseCode
          
     FROM LMTCarLoanDetail_Temp T1
            LEFT JOIN RMTLovFieldDetail T2   ON T1.CarLoanFor = T2.FieldCodeId
            LEFT JOIN BMTLovFieldCode T14   ON T2.FieldCode = T14.FieldCode
            LEFT JOIN RMTLovFieldDetail T3   ON T1.CarUsage = T3.FieldCodeId
            LEFT JOIN BMTLovFieldCode T15   ON T3.FieldCode = T15.FieldCode
            LEFT JOIN RMTLovFieldDetail T11  ON T1.CarColor = T11.FieldCodeId
            LEFT JOIN BMTLovFieldCode T16	 ON T11.FieldCode = T16.FieldCode
            LEFT JOIN AMTVehicleManufacturer T7   ON T7.ManufacturerId = T1.ManufacturerId
            LEFT JOIN AMTVehicleModel T8   ON T8.VehicleModelId = T1.VehicleModelId
            LEFT JOIN AMTVehicleVersion T4   ON T1.CarVersion = T4.VehicleVersionId
            LEFT JOIN BMTNationalityCodes T9   ON T1.ThirdPartyNat = T9.NationalityCode
            LEFT JOIN AMTVehicleDealer T6   ON T1.CarDealer = T6.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T17 ON T6.DealerCountry = T17.PCCountry AND T6.DealerProvince = T17.PCProvince AND T6.DealerCity = T17.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T18 ON T6.DealerCountry = T18.CPCountry AND T6.DealerProvince = T18.CPProvince LEFT OUTER JOIN
              BMTCountries T19 ON T6.DealerCountry = T19.CountryCode LEFT OUTER JOIN
            RMTCountryVsProvince T10   ON T1.EmiratesRegNum = T10.CPProvince
            AND T10.CPCountry = 'AE'
            LEFT JOIN AMTVehicleDealer T12   ON T1.SalesPersonName = T12.DealerId 
            LEFT JOIN RMTCountryVsProvince T13 ON T6.DealerProvince=T13.CPProvince 
			and T13.CPCountry='AE'
			LEFT JOIN AMTVehicleDealer T20  ON T1.PrivateDealerName = T20.DealerId
			 </createView>   </changeSet>
			 
			 
			 
			 		 <changeSet id="196" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCarLoanDetail_View">
		SELECT T1.LoanRefNumber ,
          T1.ItemNumber ,
          T1.LoanRefType ,
          T1.CarLoanFor ,
          T2.FieldCode LovDescLoanForCode  ,
          T14.FieldCodeDesc LovDescLoanForCodeName  ,
          T2.FieldCodeValue LovDescCarLoanForName  ,
          T1.CarUsage ,
          T3.FieldCode LovDescCarUsageCode  ,
          T15.FieldCodeDesc LovDescCarUsageCodeName  ,
          T3.FieldCodeValue LovDescCarUsageName  ,
          T7.ManufacturerName LovDescManufacturerName  ,
          T8.VehicleModelDesc LovDescModelDesc  ,
          T1.CarVersion ,
          T4.VehicleVersionCode LovDescCarVersionName  ,
          T1.CarMakeYear ,
          T1.CarCapacity ,
          T1.CarDealer ,
          T6.DealerName LovDescCarDealerName  ,
          T1.CarCc ,
          T1.CarChasisNo ,
          T1.CarRegNo ,
          T1.CarColor ,
		  T1.Description ,
          T1.Version ,
          T1.LastMntBy ,
          T1.LastMntOn ,
          T1.RecordStatus ,
          T1.RoleCode ,
          T1.NextRoleCode ,
          T1.TaskId ,
          T1.NextTaskId ,
          T1.RecordType ,
          T1.WorkflowId ,
          T1.EngineNumber ,
          T1.PaymentMode ,
          T1.PurchageOdrNumber ,
          T1.QuoationNbr ,
          T1.QuoationDate ,
          T1.DealerPhone ,
          T1.PurchaseDate ,
          T1.VehicleModelId ,
          T1.ManufacturerId ,
          T6.DealerTelephone lovDescCarDealerPhone  ,
          T6.DealerFax lovDescCarDealerFax  ,
          T6.Email lovDescCarDealerEmail  ,
          T1.ThirdPartyReg ,
          T1.ThirdPartyName ,
          T1.PassportNum ,
          T1.ThirdPartyNat ,
          T11.ValueDesc LovDescCarColorName  ,
          T9.NationalityDesc lovDescThirdPartyNatName  ,
          T6.AccountNumber CarDealerDftAccount  ,
          T1.EmiratesRegNum ,
          T10.CPProvinceName LovDescEmiratesRegNumName  ,
          T1.SellerType ,
          T1.DealerOrSellerAcc ,
          T1.VehicleValue ,
          T1.PrivateDealerName ,
          T1.SalesPersonName ,
          T1.TrafficProfileNo ,
          T1.MortgageTranID ,
          T12.DealerName SalesPersonDesc  ,
          T13.CPProvinceName lovDescDealerAddr  ,
          T4.VehicleCategory lovDescVersionCategory,
          T6.PObox DealerPOBox,
          T6.DealerCountry,
          T19.CountryDesc lovDescCountry,
          T18.CPProvinceName lovDescProvince,
          T6.DealerProvince,
          T17.PCCityName lovDescCity,
          T6.DealerCity,
          T1.VehicleWarranty,
          T20.DealerName lovDescPrivateDealerName,
          T1.inspectionDetail,
          T1.LPODate,
		  T1.Quantity,
		  T1.MortgageCancelSts,
		  T1.ResponseCode
          
     FROM LMTCarLoanDetail_Temp T1
            LEFT JOIN RMTLovFieldDetail T2   ON T1.CarLoanFor = T2.FieldCodeId
            LEFT JOIN BMTLovFieldCode T14   ON T2.FieldCode = T14.FieldCode
            LEFT JOIN RMTLovFieldDetail T3   ON T1.CarUsage = T3.FieldCodeId
            LEFT JOIN BMTLovFieldCode T15   ON T3.FieldCode = T15.FieldCode
            LEFT JOIN RMTLovFieldDetail T11  ON T1.CarColor = T11.FieldCodeId
            LEFT JOIN BMTLovFieldCode T16	 ON T11.FieldCode = T16.FieldCode
            LEFT JOIN AMTVehicleManufacturer T7   ON T7.ManufacturerId = T1.ManufacturerId
            LEFT JOIN AMTVehicleModel T8   ON T8.VehicleModelId = T1.VehicleModelId
            LEFT JOIN AMTVehicleVersion T4   ON T1.CarVersion = T4.VehicleVersionId
            LEFT JOIN BMTNationalityCodes T9   ON T1.ThirdPartyNat = T9.NationalityCode
            LEFT JOIN AMTVehicleDealer T6   ON T1.CarDealer = T6.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T17 ON T6.DealerCountry = T17.PCCountry AND T6.DealerProvince = T17.PCProvince AND T6.DealerCity = T17.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T18 ON T6.DealerCountry = T18.CPCountry AND T6.DealerProvince = T18.CPProvince LEFT OUTER JOIN
              BMTCountries T19 ON T6.DealerCountry = T19.CountryCode LEFT OUTER JOIN
            RMTCountryVsProvince T10   ON T1.EmiratesRegNum = T10.CPProvince
            AND T10.CPCountry = 'AE'
            LEFT JOIN AMTVehicleDealer T12   ON T1.SalesPersonName = T12.DealerId 
            LEFT JOIN RMTCountryVsProvince T13 ON T6.DealerProvince=T13.CPProvince 
			and T13.CPCountry='AE'
			LEFT JOIN AMTVehicleDealer T20  ON T1.PrivateDealerName = T20.DealerId
   UNION ALL 
   SELECT T1.LoanRefNumber ,
          T1.ItemNumber ,
          T1.LoanRefType ,
          T1.CarLoanFor ,
          T2.FieldCode LovDescLoanForCode  ,
          T14.FieldCodeDesc LovDescLoanForCodeName  ,
          T2.FieldCodeValue LovDescCarLoanForName  ,
          T1.CarUsage ,
          T3.FieldCode LovDescCarUsageCode  ,
          T15.FieldCodeDesc LovDescCarUsageCodeName  ,
          T3.FieldCodeValue LovDescCarUsageName  ,
          T7.ManufacturerName LovDescManufacturerName  ,
          T8.VehicleModelDesc LovDescModelDesc  ,
          T1.CarVersion ,
          T4.VehicleVersionCode LovDescCarVersionName  ,
          T1.CarMakeYear ,
          T1.CarCapacity ,
          T1.CarDealer ,
          T6.DealerName LovDescCarDealerName  ,
          T1.CarCc ,
          T1.CarChasisNo ,
          T1.CarRegNo ,
          T1.CarColor ,
		  T1.Description ,
          T1.Version ,
          T1.LastMntBy ,
          T1.LastMntOn ,
          T1.RecordStatus ,
          T1.RoleCode ,
          T1.NextRoleCode ,
          T1.TaskId ,
          T1.NextTaskId ,
          T1.RecordType ,
          T1.WorkflowId ,
          T1.EngineNumber ,
          T1.PaymentMode ,
          T1.PurchageOdrNumber ,
          T1.QuoationNbr ,
          T1.QuoationDate ,
          T1.DealerPhone ,
          T1.PurchaseDate ,
          T1.VehicleModelId ,
          T1.ManufacturerId ,
          T6.DealerTelephone lovDescCarDealerPhone  ,
          T6.DealerFax lovDescCarDealerFax  ,
          T6.Email lovDescCarDealerEmail  ,
          T1.ThirdPartyReg ,
          T1.ThirdPartyName ,
          T1.PassportNum ,
          T1.ThirdPartyNat ,
          T11.ValueDesc LovDescCarColorName  ,
          T9.NationalityDesc lovDescThirdPartyNatName  ,
          T6.AccountNumber CarDealerDftAccount  ,
          T1.EmiratesRegNum ,
          T10.CPProvinceName LovDescEmiratesRegNumName  ,
          T1.SellerType ,
          T1.DealerOrSellerAcc ,
          T1.VehicleValue ,
          T1.PrivateDealerName ,
          T1.SalesPersonName ,
          T1.TrafficProfileNo ,
          T1.MortgageTranID ,
          T12.DealerName SalesPersonDesc  ,
          T13.CPProvinceName lovDescDealerAddr  ,
          T4.VehicleCategory lovDescVersionCategory,
          T6.PObox DealerPOBox,
          T6.DealerCountry,
          T19.CountryDesc lovDescCountry,
          T18.CPProvinceName lovDescProvince,
          T6.DealerProvince,
          T17.PCCityName lovDescCity,
          T6.DealerCity,
          T1.VehicleWarranty,
          T20.DealerName lovDescPrivateDealerName,
          T1.inspectionDetail,
          T1.LPODate,
		  T1.Quantity,
		  T1.MortgageCancelSts,
		  T1.ResponseCode
          
     FROM LMTCarLoanDetail T1
     
            LEFT JOIN RMTLovFieldDetail T2   ON T1.CarLoanFor = T2.FieldCodeId
            LEFT JOIN BMTLovFieldCode T14   ON T2.FieldCode = T14.FieldCode
            LEFT JOIN RMTLovFieldDetail T3   ON T1.CarUsage = T3.FieldCodeId
            LEFT JOIN BMTLovFieldCode T15   ON T3.FieldCode = T15.FieldCode
            LEFT JOIN RMTLovFieldDetail T11  ON T1.CarColor = T11.FieldCodeId
            LEFT JOIN BMTLovFieldCode T16	 ON T11.FieldCode = T16.FieldCode
            LEFT JOIN AMTVehicleManufacturer T7   ON T7.ManufacturerId = T1.ManufacturerId
            LEFT JOIN AMTVehicleModel T8   ON T8.VehicleModelId = T1.VehicleModelId
            LEFT JOIN AMTVehicleVersion T4   ON T1.CarVersion = T4.VehicleVersionId
            LEFT JOIN BMTNationalityCodes T9   ON T1.ThirdPartyNat = T9.NationalityCode
            LEFT JOIN AMTVehicleDealer T6   ON T1.CarDealer = T6.DealerId
            LEFT OUTER JOIN  RMTProvinceVsCity T17 ON T6.DealerCountry = T17.PCCountry AND T6.DealerProvince = T17.PCProvince AND T6.DealerCity = T17.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T18 ON T6.DealerCountry = T18.CPCountry AND T6.DealerProvince = T18.CPProvince LEFT OUTER JOIN
              BMTCountries T19 ON T6.DealerCountry = T19.CountryCode LEFT OUTER JOIN
            RMTCountryVsProvince T10   ON T1.EmiratesRegNum = T10.CPProvince
            AND T10.CPCountry = 'AE'
            LEFT JOIN AMTVehicleDealer T12   ON T1.SalesPersonName = T12.DealerId 
            LEFT JOIN RMTCountryVsProvince T13 ON T6.DealerProvince=T13.CPProvince 
			and T13.CPCountry='AE'
			LEFT JOIN AMTVehicleDealer T20   ON T1.PrivateDealerName = T20.DealerId
     WHERE NOT EXISTS ( SELECT 1 
                        FROM LMTCarLoanDetail_Temp 
                          where loanrefnumber = t1.loanrefnumber )
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="197" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTChequeFinance_AView">
		SELECT      LoanRefNumber, ChequeNo, ChequeDate, ChequeAmount, Drawer, Drawee, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTChequeFinance
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="198" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTChequeFinance_TView">
		SELECT      LoanRefNumber, ChequeNo, ChequeDate, ChequeAmount, Drawer, Drawee, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTChequeFinance_Temp
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="199" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTChequeFinance_View">
		SELECT      LoanRefNumber, ChequeNo, ChequeDate, ChequeAmount, Drawer, Drawee, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTChequeFinance_Temp

UNION ALL

SELECT      LoanRefNumber, ChequeNo, ChequeDate, ChequeAmount, Drawer, Drawee, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTChequeFinance

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTChequeFinance_TEMP
                            WHERE      LoanRefNumber = LMTChequeFinance.LoanRefNumber and ChequeNo = LMTChequeFinance.ChequeNo)
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="200" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanDetail_AView">
		SELECT     T1.LoanRefNumber, T1.ItemType, T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CommodityName lovDescItemDescription
FROM          LMTCommidityLoanDetail T1 INNER JOIN
                       FCMTCommodityDetail T2 ON T1.ItemType = T2.CommodityCode
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="201" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanDetail_TView">
		SELECT     T1.LoanRefNumber, T1.ItemType, T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CommodityName lovDescItemDescription
FROM           LMTCommidityLoanDetail_Temp T1 INNER JOIN
                       FCMTCommodityDetail T2 ON T1.ItemType = T2.CommodityCode
			 </createView>   </changeSet>
			 
			 		 <changeSet id="202" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanDetail_View">
		SELECT     T1.LoanRefNumber, T1.ItemType, T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CommodityName lovDescItemDescription
FROM          LMTCommidityLoanDetail_Temp T1 INNER JOIN
                       FCMTCommodityDetail T2 ON T1.ItemType = T2.CommodityCode
UNION ALL
SELECT     T1.LoanRefNumber, T1.ItemType, T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CommodityName lovDescItemDescription
FROM          LMTCommidityLoanDetail T1 INNER JOIN
                       FCMTCommodityDetail T2 ON T1.ItemType = T2.CommodityCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTCommidityLoanDetail_TEMP
                            WHERE      LoanRefNumber = T1.LoanRefNumber AND ItemType = T1.ItemType)
			 </createView>   </changeSet>
			 
			 
			 		 <changeSet id="203" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanHeader_AView">
		SELECT     LoanRefNumber, BrokerName, SplInstruction, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         LMTCommidityLoanHeader
			 </createView>   </changeSet>
			 
			 		 <changeSet id="204" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanHeader_TView">
		SELECT     LoanRefNumber, BrokerName, SplInstruction, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         LMTCommidityLoanHeader_Temp
			 </createView>   </changeSet>
			 		 <changeSet id="205" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommidityLoanHeader_View">
		SELECT     LoanRefNumber, BrokerName, SplInstruction, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         LMTCommidityLoanHeader_Temp

UNION ALL

SELECT     LoanRefNumber, BrokerName, SplInstruction, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, 
                      WorkflowId
FROM         LMTCommidityLoanHeader

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTCommidityLoanHeader_TEMP
                            WHERE      LoanRefNumber= LMTCommidityLoanHeader.LoanRefNumber AND  BrokerName= LMTCommidityLoanHeader.BrokerName)
			 </createView>   </changeSet>	
			 <changeSet id="206" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommodityHeader_AView">
		SELECT     T1.LoanRefNumber, T1.Broker, T1.HoldCertificateNo, T1.PurchaseDate, T1.Commodity, T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount, 
                      T2.Units, T2.FinalSettlementDate, T3.COMMISSIONRATE, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.PurchaseAmount
FROM          LMTCommodityHeader T1 LEFT OUTER JOIN
                       FCMTCommodityInventory T2 ON T1.Broker = T2.BrokerCode AND T1.HoldCertificateNo = T2.HoldCertificateNo INNER JOIN
                       FCMTBrokerDetail T3 ON T1.Broker = T3.BrokerCode
			 </createView>   </changeSet>
			 		 <changeSet id="207" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommodityHeader_TView">
		SELECT         T1.LoanRefNumber, T1.Broker, T1.HoldCertificateNo, T1.PurchaseDate, T1.Commodity,
	           T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount , T2.Units, T2.FinalSettlementDate,T2.PurchaseAmount,
	           T3.COMMISSIONRATE, T4.CcyEditField,
	           T1.Version, T1.LastMntBy, T1.LastMntOn, 
			   T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM           LMTCommodityHeader_Temp T1 
			   LEFT OUTER JOIN FCMTCommodityInventory T2 ON T1.Broker = T2.BrokerCode And T1.HoldCertificateNo = T2.HoldCertificateNo
			   LEFT OUTER JOIN FCMTBrokerDetail T3 ON T1.Broker = T3.BrokerCode 
			   LEFT OUTER JOIN RMTCurrencies T4 On T4.CcyCode=T2.CommodityCcy
			 </createView>   </changeSet>		
			 <changeSet id="208" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTCommodityHeader_View">
		SELECT         T1.LoanRefNumber, T1.Broker, T1.HoldCertificateNo, T1.PurchaseDate, T1.Commodity,
	           T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount , T2.Units, T2.FinalSettlementDate,T2.PurchaseAmount,
	           T3.COMMISSIONRATE, T4.CcyEditField,
	           T1.Version, T1.LastMntBy, T1.LastMntOn, 
			   T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM           LMTCommodityHeader_Temp T1 
			   LEFT OUTER JOIN FCMTCommodityInventory T2 ON T1.Broker = T2.BrokerCode And T1.HoldCertificateNo = T2.HoldCertificateNo
			   LEFT OUTER JOIN FCMTBrokerDetail T3 ON T1.Broker = T3.BrokerCode 
			   LEFT OUTER JOIN RMTCurrencies T4 On T4.CcyCode=T2.CommodityCcy
UNION ALL
SELECT         T1.LoanRefNumber, T1.Broker, T1.HoldCertificateNo, T1.PurchaseDate, T1.Commodity,
	           T1.Quantity, T1.UnitBuyPrice, T1.BuyAmount, T1.UnitSellPrice, T1.SellAmount , T2.Units, T2.FinalSettlementDate,T2.PurchaseAmount,
	           T3.COMMISSIONRATE, T4.CcyEditField,
	           T1.Version, T1.LastMntBy, T1.LastMntOn, 
			   T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM           LMTCommodityHeader T1 LEFT OUTER JOIN  
               FCMTCommodityInventory T2 ON T1.Broker = T2.BrokerCode And T1.HoldCertificateNo = T2.HoldCertificateNo
			   LEFT OUTER JOIN FCMTBrokerDetail T3 ON T1.Broker = T3.BrokerCode
			   LEFT OUTER JOIN RMTCurrencies T4 On T4.CcyCode=T2.CommodityCcy

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTCommodityHeader_TEMP
                            WHERE      LoanRefNumber= T1.LoanRefNumber)
			 </createView>   </changeSet>		
			 <changeSet id="209" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEducationLoanDetail_AView">
		SELECT   T1.LoanRefNumber, T1.LoanRefType, T1.EduCourse, T1.EduSpecialization, T1.EduCourseType, T1.EduCourseFrom, 
                      T1.EduCourseFromBranch, T1.EduAffiliatedTo, T1.EduCommenceDate, T1.EduCompletionDate, T1.EduExpectedIncome, T1.EduLoanFromBranch, 
                      T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                      T2.CourseDesc lovDescEduCourseName, T3.CourseTypeDesc lovDescEduCourseTypeName, 
                      T4.BranchDesc lovDescEduLoanFromBranchName
FROM          LMTEducationLoanDetail T1 INNER JOIN
                       AMTCourse T2 ON T1.EduCourse = T2.CourseName INNER JOIN
                       AMTCourseType T3 ON T1.EduCourseType = T3.CourseTypeCode INNER JOIN
                       RMTBranches T4 ON T1.EduLoanFromBranch = T4.BranchCode
			 </createView>   </changeSet>	
			 <changeSet id="210" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEducationLoanDetail_TView">
		SELECT     T1.LoanRefNumber, T1.LoanRefType, T1.EduCourse, T1.EduSpecialization, T1.EduCourseType, T1.EduCourseFrom, T1.EduCourseFromBranch, T1.EduAffiliatedTo, 
                      T1.EduCommenceDate, T1.EduCompletionDate, T1.EduExpectedIncome, T1.EduLoanFromBranch, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CourseDesc lovDescEduCourseName, 
                      T3.CourseTypeDesc lovDescEduCourseTypeName, T4.BranchDesc lovDescEduLoanFromBranchName
FROM          LMTEducationLoanDetail_Temp T1 LEFT OUTER JOIN
                       AMTCourse T2 ON T1.EduCourse = T2.CourseName LEFT OUTER JOIN
                       AMTCourseType T3 ON T1.EduCourseType = T3.CourseTypeCode LEFT OUTER JOIN
                       RMTBranches T4 ON T1.EduLoanFromBranch = T4.BranchCode
		
			 </createView>   </changeSet>	
			 <changeSet id="211" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEducationLoanDetail_View">
		SELECT     T1.LoanRefNumber, T1.LoanRefType, T1.EduCourse, T1.EduSpecialization, T1.EduCourseType, T1.EduCourseFrom, T1.EduCourseFromBranch, T1.EduAffiliatedTo, 
                      T1.EduCommenceDate, T1.EduCompletionDate, T1.EduExpectedIncome, T1.EduLoanFromBranch, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CourseDesc lovDescEduCourseName, 
                      T3.CourseTypeDesc lovDescEduCourseTypeName, T4.BranchDesc lovDescEduLoanFromBranchName
FROM          LMTEducationLoanDetail_Temp T1 LEFT OUTER JOIN
                       AMTCourse T2 ON T1.EduCourse = T2.CourseName LEFT OUTER JOIN
                       AMTCourseType T3 ON T1.EduCourseType = T3.CourseTypeCode LEFT OUTER JOIN
                       RMTBranches T4 ON T1.EduLoanFromBranch = T4.BranchCode
UNION ALL
SELECT     T1.LoanRefNumber, T1.LoanRefType, T1.EduCourse, T1.EduSpecialization, T1.EduCourseType, T1.EduCourseFrom, T1.EduCourseFromBranch, T1.EduAffiliatedTo, 
                      T1.EduCommenceDate, T1.EduCompletionDate, T1.EduExpectedIncome, T1.EduLoanFromBranch, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CourseDesc lovDescEduCourseName, 
                      T3.CourseTypeDesc lovDescEduCourseTypeName, T4.BranchDesc lovDescEduLoanFromBranchName
FROM          LMTEducationLoanDetail T1 INNER JOIN
                       AMTCourse T2 ON T1.EduCourse = T2.CourseName INNER JOIN
                       AMTCourseType T3 ON T1.EduCourseType = T3.CourseTypeCode LEFT OUTER JOIN
                       RMTBranches T4 ON T1.EduLoanFromBranch = T4.BranchCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTEducationLoanDetail_Temp
                            WHERE      LoanRefNumber = T1.LoanRefNumber)
			 </createView>   </changeSet>
			 
			 
			  <changeSet id="212" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEduExpenseDetail_AView">
		SELECT     T1.LoanRefNumber, T1.EduExpDetail, T1.EduExpAmount, T1.EduExpDate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.TaskId, T1.NextRoleCode, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       AMTExpenseType.ExpenceTypeName lovDescEduExpDetailName
FROM          LMTEduExpenseDetail T1 INNER JOIN
                       AMTExpenseType ON T1.EduExpDetail =  AMTExpenseType.ExpenceTypeId
		 </createView>   </changeSet>
		 
		  <changeSet id="213" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEduExpenseDetail_TView">
		SELECT     T1.LoanRefNumber, T1.EduExpDetail, T1.EduExpAmount, T1.EduExpDate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.TaskId, T1.NextRoleCode, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       AMTExpenseType.ExpenceTypeName lovDescEduExpDetailName
FROM          LMTEduExpenseDetail_Temp  T1 INNER JOIN
              AMTExpenseType ON T1.EduExpDetail =  AMTExpenseType.ExpenceTypeId
		 </createView>   </changeSet>
		 
		  <changeSet id="214" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEduExpenseDetail_View">
		SELECT     T1.LoanRefNumber, T1.EduExpDetail, T1.EduExpAmount, T1.EduExpDate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.TaskId, T1.NextRoleCode, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       AMTExpenseType.ExpenceTypeName lovDescEduExpDetailName
FROM          LMTEduExpenseDetail_Temp T1 INNER JOIN
                       AMTExpenseType ON T1.EduExpDetail =  AMTExpenseType.ExpenceTypeId

UNION ALL

SELECT     T1.LoanRefNumber, T1.EduExpDetail, T1.EduExpAmount, T1.EduExpDate, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.TaskId, T1.NextRoleCode, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
                       AMTExpenseType.ExpenceTypeName lovDescEduExpDetailName
FROM          LMTEduExpenseDetail T1 INNER JOIN
                       AMTExpenseType ON T1.EduExpDetail =  AMTExpenseType.ExpenceTypeId

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTEduExpenseDetail_Temp
                            WHERE      EduExpDetail= T1.EduExpDetail AND LoanRefNumber=T1.LoanRefNumber)
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="215" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEquipmentLoanDetail_AView">
		SELECT   T1.LoanRefNumber, T1.MachineName, T1.MachinePurpose, T1.SerialNo, T1.MachineAge, T1.Manufacturer, 
         T1.CostPrice, T1.Location, T1.Quantity, T1.MarketValue, T1.Description, 
		 T3.CPProvinceName LovDescLocation,T1.Dealer,T4.DealerName DealerDesc,T4.POBox DealerPOBox,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
         T1.inspectionDetail,T1.LPODate		 
         FROM  LMTEquipmentLoanDetail T1 
         INNER JOIN   FinanceMain T2 ON T2.FinReference = T1.LoanRefNumber
         LEFT JOIN (SELECT CPProvince ,CPProvinceName 
					FROM  RMTCountryVsProvince T3 
					WHERE T3.CPCountry=(Select SysParmValue from SMTparameters 
										Where SysParmCode='APP_DFT_COUNTRY'))T3 ON T3.CPProvince = T1.Location	
         LEFT JOIN AMTVehicleDealer T4  ON T1.Dealer = T4.DealerId
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="216" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEquipmentLoanDetail_TView">
		SELECT   T1.LoanRefNumber, T1.MachineName, T1.MachinePurpose, T1.SerialNo, T1.MachineAge, T1.Manufacturer, 
         T1.CostPrice, T1.Location, T1.Quantity, T1.MarketValue, T1.Description,
		 T3.CPProvinceName LovDescLocation,T1.Dealer,T4.DealerName DealerDesc,T4.POBox DealerPOBox,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
         T1.inspectionDetail,T1.LPODate
		 FROM  LMTEquipmentLoanDetail_Temp T1 
		 INNER JOIN  FinanceMain_Temp T2 ON T2.FinReference = T1.LoanRefNumber 
		 LEFT JOIN (SELECT CPProvince ,CPProvinceName 
					FROM  RMTCountryVsProvince T3 
					WHERE T3.CPCountry=(Select SysParmValue from SMTparameters 
										Where SysParmCode='APP_DFT_COUNTRY'))T3 ON T3.CPProvince = T1.Location
         LEFT JOIN AMTVehicleDealer T4  ON T1.Dealer = T4.DealerId
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="217" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTEquipmentLoanDetail_View">
		SELECT   T1.LoanRefNumber, T1.MachineName, T1.MachinePurpose, T1.SerialNo, T1.MachineAge, T1.Manufacturer, 
         T1.CostPrice, T1.Location, T1.Quantity, T1.MarketValue, T1.Description,
		 T3.CPProvinceName LovDescLocation,T1.Dealer,T4.DealerName DealerDesc,T4.POBox DealerPOBox,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
         T1.inspectionDetail,T1.LPODate
		 FROM  LMTEquipmentLoanDetail_Temp T1 
		 INNER JOIN  FinanceMain_Temp T2 ON T2.FinReference = T1.LoanRefNumber 
		 LEFT JOIN (SELECT CPProvince ,CPProvinceName 
					FROM  RMTCountryVsProvince T3 
					WHERE T3.CPCountry=(Select SysParmValue from SMTparameters 
										Where SysParmCode='APP_DFT_COUNTRY'))T3 ON T3.CPProvince = T1.Location
         LEFT JOIN AMTVehicleDealer T4  ON T1.Dealer = T4.DealerId										
UNION ALL
SELECT   T1.LoanRefNumber, T1.MachineName, T1.MachinePurpose, T1.SerialNo, T1.MachineAge, T1.Manufacturer, 
         T1.CostPrice, T1.Location, T1.Quantity, T1.MarketValue, T1.Description,
		 T3.CPProvinceName LovDescLocation,T1.Dealer,T4.DealerName DealerDesc,T4.POBox DealerPOBox,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,
         T1.inspectionDetail,T1.LPODate
		 FROM  LMTEquipmentLoanDetail T1  
		 INNER JOIN  FinanceMain T2 ON T2.FinReference = T1.LoanRefNumber 
		 LEFT JOIN (SELECT CPProvince ,CPProvinceName 
					FROM  RMTCountryVsProvince T3 
					WHERE T3.CPCountry=(Select SysParmValue from SMTparameters 
										Where SysParmCode='APP_DFT_COUNTRY'))T3 ON T3.CPProvince = T1.Location
		LEFT JOIN AMTVehicleDealer T4  ON T1.Dealer = T4.DealerId	
WHERE NOT EXISTS 
                 (SELECT   1 
				  FROM        LMTEquipmentLoanDetail_Temp 
				  WHERE       LoanRefNumber = T1.LoanRefNumber)
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="218" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinancePurposeDetail_AView">
		SELECT      LoanRefNumber, WorkingCapital, TermFinance, ShareMargin, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTFinancePurposeDetail
		 </createView>   </changeSet>
		 
		  <changeSet id="219" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinancePurposeDetail_TView">
		SELECT      LoanRefNumber, WorkingCapital, TermFinance, ShareMargin, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTFinancePurposeDetail_Temp
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="220" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinancePurposeDetail_View">
		SELECT      LoanRefNumber, WorkingCapital, TermFinance, ShareMargin, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTFinancePurposeDetail_Temp

UNION ALL

SELECT      LoanRefNumber, WorkingCapital, TermFinance, ShareMargin, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTFinancePurposeDetail

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTFinancePurposeDetail_TEMP
                            WHERE      LoanRefNumber= LMTFinancePurposeDetail.LoanRefNumber)
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="221" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGenGoodsLoanDetail_AView">
		SELECT     T1.LoanRefNumber, T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, T1.Addtional2, 
                      T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, T2.DealerFax lovDescSellerFax
FROM          LMTGenGoodsLoanDetail T1 LEFT OUTER JOIN
                       AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="222" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGenGoodsLoanDetail_TView">
		SELECT     T1.LoanRefNumber, T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, T1.Addtional2, 
                      T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, T2.DealerFax lovDescSellerFax
FROM         LMTGenGoodsLoanDetail_Temp T1 LEFT OUTER JOIN
                      AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
		 </createView>   </changeSet>
		 
		 
		 
		 
		  <changeSet id="223" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGenGoodsLoanDetail_View">
		SELECT     T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
                      T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, 
                      T2.DealerFax lovDescSellerFax
FROM          LMTGenGoodsLoanDetail_Temp T1 LEFT OUTER JOIN
                       AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
UNION ALL
SELECT     T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
                      T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, 
                      T2.DealerFax lovDescSellerFax
FROM          LMTGenGoodsLoanDetail T1 LEFT OUTER JOIN
                       AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTGoodsLoanDetail_TEMP
                            WHERE      LoanRefNumber = T1.LoanRefNumber)
		 </createView>   </changeSet>
		 
		  <changeSet id="224" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGoodsLoanDetail_AView">
		SELECT      T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
            T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
            T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone,T1.inspectionDetail,T1.LPODate, 
            T2.DealerFax lovDescSellerFax,T2.PObox DealerPOBox,T2.DealerCountry, T2.DealerCity, T2.DealerProvince,
            T5.CountryDesc lovDescCountry,T4.CPProvinceName lovDescProvince, T3.PCCityName lovDescCity,
			T1.Description,T1.DeliveryOfLoc,T6.CPProvinceName DeliveryOfLocDesc
FROM          LMTGoodsLoanDetail T1 LEFT OUTER JOIN
              AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T3 ON T2.DealerCountry = T3.PCCountry AND T2.DealerProvince = T3.PCProvince AND T2.DealerCity = T3.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T4 ON T2.DealerCountry = T4.CPCountry AND T2.DealerProvince = T4.CPProvince LEFT OUTER JOIN
              BMTCountries T5 ON T2.DealerCountry = T5.CountryCode LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		     FROM  RMTCountryVsProvince T6  WHERE T6.CPCountry=(Select SysParmValue from SMTparameters 
		     Where SysParmCode='APP_DFT_COUNTRY'))T6 ON T6.CPProvince = T1.DeliveryOfLoc
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="225" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGoodsLoanDetail_TView">
		SELECT     T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
           T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, 
           T2.DealerFax lovDescSellerFax,T2.PObox DealerPOBox,T2.DealerCountry, T2.DealerCity, T2.DealerProvince,
           T5.CountryDesc lovDescCountry,T4.CPProvinceName lovDescProvince, T3.PCCityName lovDescCity,
           T1.inspectionDetail,T1.LPODate,T1.Description,T1.DeliveryOfLoc,T6.CPProvinceName DeliveryOfLocDesc
        
FROM          LMTGoodsLoanDetail_Temp T1 LEFT OUTER JOIN
              AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T3 ON T2.DealerCountry = T3.PCCountry AND T2.DealerProvince = T3.PCProvince AND T2.DealerCity = T3.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T4 ON T2.DealerCountry = T4.CPCountry AND T2.DealerProvince = T4.CPProvince LEFT OUTER JOIN
              BMTCountries T5 ON T2.DealerCountry = T5.CountryCode LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		     FROM  RMTCountryVsProvince T6  WHERE T6.CPCountry=(Select SysParmValue from SMTparameters 
		     Where SysParmCode='APP_DFT_COUNTRY'))T6 ON T6.CPProvince = T1.DeliveryOfLoc
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="226" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTGoodsLoanDetail_View">
		SELECT     T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
           T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, 
           T2.DealerFax lovDescSellerFax,T2.PObox DealerPOBox,T2.DealerCountry, T2.DealerCity, T2.DealerProvince,
           T5.CountryDesc lovDescCountry,T4.CPProvinceName lovDescProvince, T3.PCCityName lovDescCity,
           T1.inspectionDetail,T1.LPODate,T1.Description,T1.DeliveryOfLoc,T6.CPProvinceName DeliveryOfLocDesc
        
FROM          LMTGoodsLoanDetail_Temp T1 LEFT OUTER JOIN
              AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T3 ON T2.DealerCountry = T3.PCCountry AND T2.DealerProvince = T3.PCProvince AND T2.DealerCity = T3.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T4 ON T2.DealerCountry = T4.CPCountry AND T2.DealerProvince = T4.CPProvince LEFT OUTER JOIN
              BMTCountries T5 ON T2.DealerCountry = T5.CountryCode LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		     FROM  RMTCountryVsProvince T6  WHERE T6.CPCountry=(Select SysParmValue from SMTparameters 
		     Where SysParmCode='APP_DFT_COUNTRY'))T6 ON T6.CPProvince = T1.DeliveryOfLoc
             
UNION ALL

SELECT     T1.LoanRefNumber,  T1.ItemNumber, T1.SellerID, T2.DealerName lovDescSellerID, T1.ItemDescription, T1.UnitPrice, T1.Quantity, T1.Addtional1, 
           T1.Addtional2, T1.Addtional3, T1.Addtional4, T1.Addtional5, T1.Addtional6, T1.Addtional7, T1.Addtional8, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
           T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.DealerTelephone lovDescSellerPhone, 
           T2.DealerFax lovDescSellerFax,T2.PObox DealerPOBox,T2.DealerCountry, T2.DealerCity, T2.DealerProvince,
           T5.CountryDesc lovDescCountry,T4.CPProvinceName lovDescProvince, T3.PCCityName lovDescCity,
		   T1.inspectionDetail,T1.LPODate,T1.Description,T1.DeliveryOfLoc,T6.CPProvinceName DeliveryOfLocDesc
                      
FROM          LMTGoodsLoanDetail T1 LEFT OUTER JOIN
                       AMTVehicleDealer T2 ON T1.SellerID = T2.DealerId
             LEFT OUTER JOIN  RMTProvinceVsCity T3 ON T2.DealerCountry = T3.PCCountry AND T2.DealerProvince = T3.PCProvince AND T2.DealerCity = T3.PCCity LEFT OUTER JOIN
              RMTCountryVsProvince T4 ON T2.DealerCountry = T4.CPCountry AND T2.DealerProvince = T4.CPProvince LEFT OUTER JOIN
              BMTCountries T5 ON T2.DealerCountry = T5.CountryCode LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		     FROM  RMTCountryVsProvince T6  WHERE T6.CPCountry=(Select SysParmValue from SMTparameters 
		     Where SysParmCode='APP_DFT_COUNTRY'))T6 ON T6.CPProvince = T1.DeliveryOfLoc
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTGoodsLoanDetail_TEMP
                            WHERE      LoanRefNumber = T1.LoanRefNumber)
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="227" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTHomeLoanDetail_TView">
		SELECT     T1.LoanRefNumber, T1.productType, T1.financingType, T1.financePurpose, T1.landType,
 T1.propertyType, T1.propertyStatus, 
                      T1.purchaseType, T1.scenario, T1.mouDate, T1.mouExpiryDate, T1.brokerName, T1.commonSharePercent, 
                      T1.currentMortgageSts , T1.mainCollateralType, T1.nhlFinanceAmt, T1.valuationPriority, T1.paymentSource, T1.managementType, 
                      T1.managementCompany , T1.finValueRatio,T1.unitAreaInSqft,T1.currentAssetValue, T1.titleDeedNo , T1.regNumber, T1.projectName,T1.propertyCategory,
					  T1.propertyLocation,T1.propertyAge,T1.propertyOwner,T1.ownershipType,T1.tenantName,T1.priceperSqFeet,T1.numberOfUnits,
					  T1.numberofLeasedUnits,T1.areaInSqureFeet,T1.areaInSqureMeter,T1.plotorunitNumber,T1.sectororcommunity,T1.houseNumber,
					  T1.flatNumber,T1.street,T1.poBox,T1.country,T1.emiratesOfRegistration,T1.developerName,T1.sellerInternal,T1.sellerPassportNumber,
					  T1.sellerName,T2.Countrydesc lovDesccountrydesc,T3.CPProvinceName  lovDescemiratesOfRegistration,
					  T5.CPProvinceName  lovDescpropertyLocation,T3.CPProvinceName  lovDescemiratesRegName,
					  
                      T4.FieldCodeValue lovDescnumberOfUnits,T1.Dealer,T9.DealerName DealerDesc,T9.PObox DealerPOBox,T1.Description, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.inspectionDetail,T1.LPODate
FROM                   LMTHomeLoanDetail_Temp T1 LEFT OUTER JOIN
                       BMTCountries T2 ON T1.country = T2.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T3 ON T1.emiratesOfRegistration = T3.CPProvince LEFT OUTER JOIN
                       RMTCountryVsProvince T5 ON T1.propertyLocation = T5.CPProvince LEFT OUTER JOIN
                       RMTLovFieldDetail T4 ON T1.NumberOfUnits = T4.FieldCodeId LEFT OUTER JOIN
                       FinanceMain_Temp T8 ON T1.LoanRefNumber = T8.FinReference LEFT JOIN 
					  AMTVehicleDealer T9   ON T1.Dealer = T9.DealerId
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="228" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTHomeLoanDetail_view">
		SELECT     T1.LoanRefNumber, T1.productType, T1.financingType, T1.financePurpose, T1.landType,
 T1.propertyType, T1.propertyStatus, 
                      T1.purchaseType, T1.scenario, T1.mouDate, T1.mouExpiryDate, T1.brokerName, T1.commonSharePercent, 
                      T1.currentMortgageSts , T1.mainCollateralType, T1.nhlFinanceAmt, T1.valuationPriority, T1.paymentSource, T1.managementType, 
                      T1.managementCompany , T1.finValueRatio,T1.unitAreaInSqft,T1.currentAssetValue, T1.titleDeedNo , T1.regNumber, T1.projectName,T1.propertyCategory,
					  T1.propertyLocation,T1.propertyAge,T1.propertyOwner,T1.ownershipType,T1.tenantName,T1.priceperSqFeet,T1.numberOfUnits,
					  T1.numberofLeasedUnits,T1.areaInSqureFeet,T1.areaInSqureMeter,T1.plotorunitNumber,T1.sectororcommunity,T1.houseNumber,
					  T1.flatNumber,T1.street,T1.poBox,T1.country,T1.emiratesOfRegistration,T1.developerName,T1.sellerInternal,T1.sellerPassportNumber,
					  T1.sellerName,T2.Countrydesc lovDesccountrydesc,T3.CPProvinceName  lovDescemiratesOfRegistration,
					  T5.CPProvinceName  lovDescpropertyLocation,T3.CPProvinceName  lovDescemiratesRegName,
					  
                       T4.FieldCodeValue lovDescnumberOfUnits,T1.Dealer,T9.DealerName DealerDesc,T9.PObox DealerPOBox,T1.Description, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.inspectionDetail,T1.LPODate
FROM                   LMTHomeLoanDetail_Temp T1 LEFT OUTER JOIN
                       BMTCountries T2 ON T1.country = T2.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T3 ON T1.emiratesOfRegistration = T3.CPProvince LEFT OUTER JOIN
                       RMTCountryVsProvince T5 ON T1.propertyLocation = T5.CPProvince LEFT OUTER JOIN
                       RMTLovFieldDetail T4 ON T1.NumberOfUnits = T4.FieldCodeId LEFT OUTER JOIN
                       FinanceMain_Temp T8 ON T1.LoanRefNumber = T8.FinReference LEFT JOIN 
					  AMTVehicleDealer T9   ON T1.Dealer = T9.DealerId 
                  
                                           
 UNION ALL       
   
   
 SELECT     T1.LoanRefNumber, T1.productType, T1.financingType, T1.financePurpose, T1.landType,
 T1.propertyType, T1.propertyStatus, 
                      T1.purchaseType, T1.scenario, T1.mouDate, T1.mouExpiryDate, T1.brokerName, T1.commonSharePercent, 
                      T1.currentMortgageSts , T1.mainCollateralType, T1.nhlFinanceAmt, T1.valuationPriority, T1.paymentSource, T1.managementType, 
                      T1.managementCompany , T1.finValueRatio,T1.unitAreaInSqft,T1.currentAssetValue, T1.titleDeedNo , T1.regNumber, T1.projectName,T1.propertyCategory,
					  T1.propertyLocation,T1.propertyAge,T1.propertyOwner,T1.ownershipType,T1.tenantName,T1.priceperSqFeet,T1.numberOfUnits,
					  T1.numberofLeasedUnits,T1.areaInSqureFeet,T1.areaInSqureMeter,T1.plotorunitNumber,T1.sectororcommunity,T1.houseNumber,
					  T1.flatNumber,T1.street,T1.poBox,T1.country,T1.emiratesOfRegistration,T1.developerName,T1.sellerInternal,T1.sellerPassportNumber,
					  T1.sellerName,T2.Countrydesc lovDesccountrydesc,T3.CPProvinceName  lovDescemiratesOfRegistration,
					  T5.CPProvinceName  lovDescpropertyLocation,
					  T3.CPProvinceName  lovDescemiratesRegName,
					  
                       T4.FieldCodeValue lovDescnumberOfUnits,T1.Dealer,T9.DealerName DealerDesc,T9.PObox DealerPOBox,T1.Description, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.inspectionDetail,T1.LPODate
FROM                   LMTHomeLoanDetail T1 LEFT OUTER JOIN
                       BMTCountries T2 ON T1.country = T2.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T3 ON T1.emiratesOfRegistration = T3.CPProvince LEFT OUTER JOIN
                       RMTCountryVsProvince T5 ON T1.propertyLocation = T5.CPProvince LEFT OUTER JOIN
                       RMTLovFieldDetail T4 ON T1.NumberOfUnits = T4.FieldCodeId LEFT OUTER JOIN
                       FinanceMain_Temp T8 ON T1.LoanRefNumber = T8.FinReference   LEFT JOIN 
					  AMTVehicleDealer T9   ON T1.Dealer = T9.DealerId 
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="229" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvestmentLoanDetail_AView">
		SELECT   T1.FinReference, T1.InvestmentDetail, T1.LPODate, T1.InspectionDetail,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId		 
         FROM LMTInvestmentLoanDetail T1 
         INNER JOIN  FinanceMain T2 ON T2.FinReference = T1.FinReference
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="230" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvestmentLoanDetail_TView">
		SELECT   T1.FinReference, T1.InvestmentDetail, T1.LPODate, T1.InspectionDetail,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	  
		 FROM LMTInvestmentLoanDetail_Temp T1 
		 INNER JOIN FinanceMain_Temp T2 ON T2.FinReference = T1.FinReference
		 </createView>   </changeSet>
		 
		  <changeSet id="231" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvestmentLoanDetail_View">
		SELECT   T1.FinReference, T1.InvestmentDetail, T1.LPODate, T1.InspectionDetail,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	  
		 FROM  LMTInvestmentLoanDetail_Temp T1 
		 INNER JOIN  FinanceMain_Temp T2 ON T2.FinReference = T1.FinReference 
		
UNION ALL
SELECT   T1.FinReference, T1.InvestmentDetail, T1.LPODate, T1.InspectionDetail,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
         T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	
		 FROM  LMTInvestmentLoanDetail T1  
		 INNER JOIN  FinanceMain T2 ON T2.FinReference = T1.FinReference 
		
WHERE NOT EXISTS 
                 (SELECT   1 
				  FROM        LMTInvestmentLoanDetail_Temp 
				  WHERE       FinReference = T1.FinReference)
		 </createView>   </changeSet>
		 
		  <changeSet id="232" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvoiceFinance_AView">
		SELECT      LoanRefNumber, InvoiceNumber, InvoiceDate, InvoiceAmount, Issuer, PayMaster, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTInvoiceFinance
		 </createView>   </changeSet>
		 
		  <changeSet id="233" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvoiceFinance_TView">
		SELECT      LoanRefNumber, InvoiceNumber, InvoiceDate, InvoiceAmount, Issuer, PayMaster, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTInvoiceFinance_Temp
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="234" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTInvoiceFinance_View">
		SELECT      LoanRefNumber, InvoiceNumber, InvoiceDate, InvoiceAmount, Issuer, PayMaster, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTInvoiceFinance_Temp

UNION ALL

SELECT      LoanRefNumber, InvoiceNumber, InvoiceDate, InvoiceAmount, Issuer, PayMaster, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTInvoiceFinance

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTInvoiceFinance_TEMP
                            WHERE      LoanRefNumber = LMTInvoiceFinance.LoanRefNumber and InvoiceNumber = LMTInvoiceFinance.InvoiceNumber)
		 </createView>   </changeSet>
		 
		  <changeSet id="235" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTMortgageLoanDetail_AView">
		SELECT     T1.LoanRefNumber, T1.MortgProperty, T1.MortgCurrentValue, T1.MortgPurposeOfLoan, T1.MortgPropertyRelation, T1.MortgOwnership, T1.MortgAddrHNbr, 
                      T1.MortgAddrFlatNbr, T1.MortgAddrStreet, T1.MortgAddrLane1, T1.MortgAddrLane2, T1.MortgAddrPOBox, T1.MortgAddrCountry, T1.MortgAddrProvince, 
                      T1.MortgAddrCity, T1.MortgAddrZIP, T1.MortgAddrPhone, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.FieldCodeValue lovDescMortgPropertyName, T3.FieldCode LovDescOwnershipCode, 
                      T3.FieldCodeValue lovDescMortgOwnershipName, T4.FieldCode LovDescPropertyRelationCode, T4.FieldCodeValue lovDescMortgPropertyReltName, 
                      T5.CountryDesc lovDescMortgAddrCountryName, T6.CPProvinceName lovDescMortgAddrProvinceName, T7.PCCityName lovDescMortgAddrCityName, 
                      T1.MortDeedNo, T1.MortRegistrationNo, T1.MortAreaSF, T1.MortAreaSM, T1.MortPricePF, T1.MortAge, T1.MortFinRatio, T1.MortStatus,
                       T1.EmiratesOfReg,T1.PriorityOfVal,T1.MortUnit,T8.CPProvinceName EmiratesDesc,T9.FieldCode PriorityValCode,
                      T9.FieldCodeValue PriorityValName,T10.FieldCode MortUnitCode,T10.FieldCodeValue MortUnitName,
                       T11.FieldCode PropertyType,T11.FieldCodeValue PropertyTypeDesc,T1.PaymentTo, T12.FieldCodeValue PaymentToDesc,T1.MortPriceSF,T1.MortShare,
                     T1.TotalAssetValue,T1.NoofPartners

FROM          LMTMortgageLoanDetail_Temp T1 LEFT OUTER JOIN
                       RMTLovFieldDetail T2 ON T1.MortgProperty = T2.FieldCodeId LEFT OUTER JOIN
                       RMTLovFieldDetail T3 ON T1.MortgOwnership = T3.FieldCodeId LEFT OUTER JOIN
                       RMTLovFieldDetail T4 ON T1.MortgPropertyRelation = T4.FieldCodeId LEFT OUTER JOIN
                       BMTCountries T5 ON T1.MortgAddrCountry = T5.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T6 ON T5.CountryCode = T6.CPCountry AND T1.MortgAddrProvince = T6.CPProvince LEFT OUTER JOIN
                       RMTProvinceVsCity T7 ON T6.CPProvince = T7.PCProvince AND T6.CPCountry = T7.PCCountry AND T1.MortgAddrCity = T7.PCCity LEFT OUTER JOIN
                       RMTCountryVsProvince T8 ON T1.EmiratesOfReg = T8.CPProvince LEFT OUTER JOIN
                       RMTLovFieldDetail T9 ON T1.PriorityOfVal = T9.FieldCodeId LEFT OUTER JOIN  
                       RMTLovFieldDetail T10 ON T1.MortUnit=T10.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T11 ON T1.PropertyType = T11.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T12 ON T1.PaymentTo = T12.FieldCodeId
		 </createView>   </changeSet>
		 
		  <changeSet id="236" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTMortgageLoanDetail_TView">
		SELECT     T1.LoanRefNumber, T1.MortgProperty, T1.MortgCurrentValue, T1.MortgPurposeOfLoan, T1.MortgPropertyRelation, T1.MortgOwnership, T1.MortgAddrHNbr, 
                      T1.MortgAddrFlatNbr, T1.MortgAddrStreet, T1.MortgAddrLane1, T1.MortgAddrLane2, T1.MortgAddrPOBox, T1.MortgAddrCountry, T1.MortgAddrProvince, 
                      T1.MortgAddrCity, T1.MortgAddrZIP, T1.MortgAddrPhone,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.FieldCodeValue lovDescMortgPropertyName, T3.FieldCode LovDescOwnershipCode, 
                      T3.FieldCodeValue lovDescMortgOwnershipName, T4.FieldCode LovDescPropertyRelationCode, T4.FieldCodeValue lovDescMortgPropertyReltName, 
                      T5.CountryDesc lovDescMortgAddrCountryName, T6.CPProvinceName lovDescMortgAddrProvinceName, T7.PCCityName lovDescMortgAddrCityName, 
                      T1.MortDeedNo, T1.MortRegistrationNo, T1.MortAreaSF, T1.MortAreaSM, T1.MortPricePF, T1.MortAge, T1.MortFinRatio, T1.MortStatus,
                      T1.EmiratesOfReg,T1.PriorityOfVal,T1.MortUnit,T8.CPProvinceName EmiratesDesc,T9.FieldCode PriorityValCode,
                      T9.FieldCodeValue PriorityValName,T10.FieldCode MortUnitCode,T10.FieldCodeValue MortUnitName,
                      T1.PropertyType,T11.FieldCodeValue PropertyTypeDesc,T1.PaymentTo, T12.FieldCodeValue PaymentToDesc,T1.MortPriceSF,T1.MortShare,
                      T1.TotalAssetValue,T1.NoofPartners

FROM                   LMTMortgageLoanDetail_Temp T1 LEFT OUTER JOIN 
                       RMTLovFieldDetail T2 ON T1.MortgProperty = T2.FieldCodeId LEFT OUTER JOIN  
                       RMTLovFieldDetail T3 ON T1.MortgOwnership = T3.FieldCodeId LEFT OUTER JOIN 
                       RMTLovFieldDetail T4 ON T1.MortgPropertyRelation = T4.FieldCodeId LEFT OUTER JOIN
                       BMTCountries T5 ON T1.MortgAddrCountry = T5.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T6 ON T5.CountryCode = T6.CPCountry AND T1.MortgAddrProvince = T6.CPProvince LEFT OUTER JOIN
                       RMTProvinceVsCity T7 ON T6.CPProvince = T7.PCProvince AND T6.CPCountry = T7.PCCountry AND T1.MortgAddrCity = T7.PCCity LEFT OUTER JOIN 
                       RMTCountryVsProvince T8 ON T1.EmiratesOfReg = T8.CPProvince LEFT OUTER JOIN
					   RMTLovFieldDetail T9 ON T1.PriorityOfVal = T9.FieldCodeId LEFT OUTER JOIN  
					   RMTLovFieldDetail T10 ON T1.MortUnit = T10.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T11 ON T1.PropertyType = T11.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T12 ON T1.PaymentTo = T12.FieldCodeId
		 </createView>   </changeSet>
		 
		  <changeSet id="237" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTMortgageLoanDetail_View">
		SELECT     T1.LoanRefNumber, T1.MortgProperty, T1.MortgCurrentValue, T1.MortgPurposeOfLoan, T1.MortgPropertyRelation, T1.MortgOwnership, T1.MortgAddrHNbr, 
                      T1.MortgAddrFlatNbr, T1.MortgAddrStreet, T1.MortgAddrLane1, T1.MortgAddrLane2, T1.MortgAddrPOBox, T1.MortgAddrCountry, T1.MortgAddrProvince, 
                      T1.MortgAddrCity, T1.MortgAddrZIP, T1.MortgAddrPhone,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.FieldCodeValue lovDescMortgPropertyName, T3.FieldCode LovDescOwnershipCode, 
                      T3.FieldCodeValue lovDescMortgOwnershipName, T4.FieldCode LovDescPropertyRelationCode, T4.FieldCodeValue lovDescMortgPropertyReltName, 
                      T5.CountryDesc lovDescMortgAddrCountryName, T6.CPProvinceName lovDescMortgAddrProvinceName, T7.PCCityName lovDescMortgAddrCityName, 
                      T1.MortDeedNo, T1.MortRegistrationNo, T1.MortAreaSF, T1.MortAreaSM, T1.MortPricePF, T1.MortAge, T1.MortFinRatio, T1.MortStatus,
                      T1.EmiratesOfReg,T1.PriorityOfVal,T1.MortUnit,T8.CPProvinceName EmiratesDesc,T9.FieldCode PriorityValCode,
                      T9.FieldCodeValue PriorityValName,T10.FieldCode MortUnitCode,T10.FieldCodeValue MortUnitName,
                      T1.PropertyType,T11.FieldCodeValue PropertyTypeDesc,T1.PaymentTo, T12.FieldCodeValue PaymentToDesc,T1.MortPriceSF,T1.MortShare,
                      T1.TotalAssetValue,T1.NoofPartners

FROM   LMTMortgageLoanDetail_Temp T1 LEFT OUTER JOIN 
 RMTLovFieldDetail T2 ON T1.MortgProperty = T2.FieldCodeId LEFT OUTER JOIN  
 RMTLovFieldDetail T3 ON T1.MortgOwnership = T3.FieldCodeId LEFT OUTER JOIN 
 RMTLovFieldDetail T4 ON T1.MortgPropertyRelation = T4.FieldCodeId LEFT OUTER JOIN
                       BMTCountries T5 ON T1.MortgAddrCountry = T5.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T6 ON T5.CountryCode = T6.CPCountry AND T1.MortgAddrProvince = T6.CPProvince LEFT OUTER JOIN
                       RMTProvinceVsCity T7 ON T6.CPProvince = T7.PCProvince AND T6.CPCountry = T7.PCCountry AND T1.MortgAddrCity = T7.PCCity LEFT OUTER JOIN 
                       RMTCountryVsProvince T8 ON T1.EmiratesOfReg = T8.CPProvince LEFT OUTER JOIN
					   RMTLovFieldDetail T9 ON T1.PriorityOfVal = T9.FieldCodeId LEFT OUTER JOIN  
					   RMTLovFieldDetail T10 ON T1.MortUnit = T10.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T11 ON T1.PropertyType = T11.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T12 ON T1.PaymentTo = T12.FieldCodeId 
UNION ALL
SELECT     T1.LoanRefNumber, T1.MortgProperty, T1.MortgCurrentValue, T1.MortgPurposeOfLoan, T1.MortgPropertyRelation, T1.MortgOwnership, T1.MortgAddrHNbr, 
                      T1.MortgAddrFlatNbr, T1.MortgAddrStreet, T1.MortgAddrLane1, T1.MortgAddrLane2, T1.MortgAddrPOBox, T1.MortgAddrCountry, T1.MortgAddrProvince, 
                      T1.MortgAddrCity, T1.MortgAddrZIP, T1.MortgAddrPhone,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.FieldCodeValue lovDescMortgPropertyName, T3.FieldCode LovDescOwnershipCode, 
                      T3.FieldCodeValue lovDescMortgOwnershipName, T4.FieldCode LovDescPropertyRelationCode, T4.FieldCodeValue lovDescMortgPropertyReltName, 
                      T5.CountryDesc lovDescMortgAddrCountryName, T6.CPProvinceName lovDescMortgAddrProvinceName, T7.PCCityName lovDescMortgAddrCityName, 
                      T1.MortDeedNo, T1.MortRegistrationNo, T1.MortAreaSF, T1.MortAreaSM, T1.MortPricePF, T1.MortAge, T1.MortFinRatio, T1.MortStatus,
                      T1.EmiratesOfReg,T1.PriorityOfVal,T1.MortUnit,T8.CPProvinceName EmiratesDesc,T9.FieldCode PriorityValCode,
                      T9.FieldCodeValue PriorityValName,T10.FieldCode MortUnitCode,T10.FieldCodeValue MortUnitName,
                      T1.PropertyType,T11.FieldCodeValue PropertyTypeDesc,T1.PaymentTo, T12.FieldCodeValue PaymentToDesc,T1.MortPriceSF,T1.MortShare,
                     T1.TotalAssetValue,T1.NoofPartners

FROM          LMTMortgageLoanDetail T1 LEFT OUTER JOIN
                       RMTLovFieldDetail T2 ON T1.MortgProperty = T2.FieldCodeId LEFT OUTER JOIN
                       RMTLovFieldDetail T3 ON T1.MortgOwnership = T3.FieldCodeId LEFT OUTER JOIN
                       RMTLovFieldDetail T4 ON T1.MortgPropertyRelation = T4.FieldCodeId LEFT OUTER JOIN
                       BMTCountries T5 ON T1.MortgAddrCountry = T5.CountryCode LEFT OUTER JOIN
                       RMTCountryVsProvince T6 ON T5.CountryCode = T6.CPCountry AND T1.MortgAddrProvince = T6.CPProvince LEFT OUTER JOIN
                       RMTProvinceVsCity T7 ON T6.CPProvince = T7.PCProvince AND T6.CPCountry = T7.PCCountry AND T1.MortgAddrCity = T7.PCCity LEFT OUTER JOIN
                       RMTCountryVsProvince T8 ON T1.EmiratesOfReg = T8.CPProvince LEFT OUTER JOIN
                       RMTLovFieldDetail T9 ON T1.PriorityOfVal = T9.FieldCodeId LEFT OUTER JOIN
                       RMTLovFieldDetail T10 ON T1.MortUnit = T10.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T11 ON T1.PropertyType = T11.FieldCodeId LEFT OUTER JOIN
                        RMTLovFieldDetail T12 ON T1.PaymentTo = T12.FieldCodeId 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTMortgageLoanDetail_Temp
                            WHERE      LoanRefNumber = T1.LoanRefNumber)
		 </createView>   </changeSet>
		 
		  <changeSet id="238" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTPPCFinance_AView">
		SELECT      LoanRefNumber, PPCNo, PPCDate, Issuer, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTPPCFinance
		 </createView>   </changeSet>
		 
		 
		  <changeSet id="239" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTPPCFinance_TView">
		SELECT      LoanRefNumber, PPCNo, PPCDate, Issuer, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTPPCFinance_Temp
		 </createView>   </changeSet>
		  <changeSet id="240" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTPPCFinance_View">
		SELECT      LoanRefNumber, PPCNo, PPCDate, Issuer, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTPPCFinance_Temp

UNION ALL

SELECT      LoanRefNumber, PPCNo, PPCDate, Issuer, Version, LastMntBy, LastMntOn, 
			RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM        LMTPPCFinance

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTPPCFinance_TEMP
                            WHERE      LoanRefNumber = LMTPPCFinance.LoanRefNumber and PPCNo = LMTPPCFinance.PPCNo)
		 </createView>   </changeSet>
		  <changeSet id="241" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTPSMortgageDetail_AView">
		SELECT    T1.LoanRefNumber, T1.PartyName, T1.AssetValue, T1.OwnershipPercentage, T1.AssetRemarks,T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM         LMTPSMortgageDetail T1
		 </createView>   </changeSet>
		 
		  <changeSet id="242" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTPSMortgageDetail_View">
		SELECT     T1.LoanRefNumber, T1.PartyName, T1.AssetValue, T1.OwnershipPercentage, T1.AssetRemarks,T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId 
FROM          LMTPSMortgageDetail_Temp T1 
                     
UNION ALL
SELECT    T1.LoanRefNumber, T1.PartyName, T1.AssetValue, T1.OwnershipPercentage, T1.AssetRemarks, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LMTPSMortgageDetail T1 
                    
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTPSMortgageDetail_Temp
                            WHERE      LoanRefNumber = T1.LoanRefNumber AND PartyName = T1.PartyName)
		 </createView>   </changeSet>
		  <changeSet id="243" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSharesDetail_AView">
		SELECT     LoanRefNumber, CompanyName, Quantity, FaceValue, TotalFaceValue, MarketValue, TotalMarketValue, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTSharesDetail T1
		 </createView>   </changeSet>
		  <changeSet id="244" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSharesDetail_TView">
		SELECT     LoanRefNumber, CompanyName, Quantity, FaceValue, TotalFaceValue, MarketValue, TotalMarketValue, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         LMTSharesDetail_Temp T1
		 </createView>   </changeSet> 
		 <changeSet id="245" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSharesDetail_View">
		SELECT     LoanRefNumber, CompanyName, Quantity, FaceValue, TotalFaceValue, MarketValue, TotalMarketValue, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM          LMTSharesDetail_Temp T1
UNION ALL
SELECT     LoanRefNumber, CompanyName, Quantity, FaceValue, TotalFaceValue, MarketValue, TotalMarketValue, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, 
                      NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM          LMTSharesDetail T1
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           LMTSharesDetail_Temp
                            WHERE      (LoanRefNumber = T1.LoanRefNumber) AND (CompanyName = T1.CompanyName)))
		 </createView>   </changeSet> 
		 <changeSet id="246" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTShipLoanDetail_View">
		SELECT   T1.LoanRefNumber, T1.ItemNumber, T1.ShipName, T1.ShipBuilder, T1.Owner, T1.Charterer, 
         T1.BuiltYear, T1.Speed, T1.Flag, T1.VesselType, T1.VesselAge, T1.VesselCapacity,T1.Length, T1.DeadWeight, 
		 T1.EngineType, T1.OfficialNumber,T1.CallSign,T1.IMONumber,T1.Marketvalue,T1.PortofReg,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
		 T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	,T3.VesselSubType,
		 T4.FieldCodeId,T4.ValueDesc,T4.FieldCodeValue,T1.inspectionDetail,T1.LPODate,
         T1.Description,T1.Dealer,T1.Quantity,T1.DeliveryOfLoc,T5.CPProvinceName DeliveryOfLocDesc,
         T6.DealerName DealerDesc, T6.PObox DealerPOBox			 
         FROM LMTShipLoanDetail_Temp T1 INNER JOIN
		  FinanceMain_Temp T2 ON T2.FinReference = T1.LoanRefNumber LEFT OUTER JOIN
		  VesselDetails T3 ON T1.VesselType=T3.VesselTypeID LEFT OUTER JOIN
		 RMTLovFieldDetail T4 On T3.VesselType=T4.FieldCodeId LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		 FROM  RMTCountryVsProvince T5  WHERE T5.CPCountry=(Select SysParmValue from SMTparameters 
		 Where SysParmCode='APP_DFT_COUNTRY'))T5 ON T5.CPProvince = T1.DeliveryOfLoc LEFT JOIN 
		 AMTVehicleDealer T6   ON T1.Dealer = T6.DealerId
UNION ALL
SELECT   T1.LoanRefNumber, T1.ItemNumber, T1.ShipName, T1.ShipBuilder, T1.Owner, T1.Charterer, 
         T1.BuiltYear, T1.Speed, T1.Flag, T1.VesselType, T1.VesselAge, T1.VesselCapacity,T1.Length, T1.DeadWeight, 
		 T1.EngineType, T1.OfficialNumber,T1.CallSign,T1.IMONumber,T1.Marketvalue,T1.PortofReg,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
		 T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	,T3.VesselSubType,
		 T4.FieldCodeId,T4.ValueDesc,T4.FieldCodeValue,T1.inspectionDetail,T1.LPODate,
         T1.Description,T1.Dealer,T1.Quantity,T1.DeliveryOfLoc,T5.CPProvinceName DeliveryOfLocDesc,
         T6.DealerName DealerDesc, T6.PObox DealerPOBox			 
         FROM LMTShipLoanDetail T1 INNER JOIN
		  FinanceMain T2 ON T2.FinReference = T1.LoanRefNumber LEFT OUTER JOIN
		  VesselDetails T3 ON T1.VesselType=T3.VesselTypeID LEFT OUTER JOIN
		 RMTLovFieldDetail T4 On T3.VesselType=T4.FieldCodeId LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		 FROM  RMTCountryVsProvince T5  WHERE T5.CPCountry=(Select SysParmValue from SMTparameters 
		 Where SysParmCode='APP_DFT_COUNTRY'))T5 ON T5.CPProvince = T1.DeliveryOfLoc LEFT JOIN 
		 AMTVehicleDealer T6   ON T1.Dealer = T6.DealerId

WHERE NOT EXISTS 
                 (SELECT   1 
				  FROM        LMTShipLoanDetail_Temp 
				  WHERE       LoanRefNumber = T1.LoanRefNumber)
		 </createView>   </changeSet>
		  <changeSet id="247" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTShipLoanDetail_AView">
		SELECT   T1.LoanRefNumber, T1.ItemNumber, T1.ShipName, T1.ShipBuilder, T1.Owner, T1.Charterer, 
         T1.BuiltYear, T1.Speed, T1.Flag, T1.VesselType, T1.VesselAge, T1.VesselCapacity,T1.Length, T1.DeadWeight, 
		 T1.EngineType, T1.OfficialNumber,T1.CallSign,T1.IMONumber,T1.Marketvalue,T1.PortofReg,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
		 T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	,T3.VesselSubType,
		 T4.FieldCodeId,T4.ValueDesc,T4.FieldCodeValue,T1.inspectionDetail,T1.LPODate,
         T1.Description,T1.Dealer,T1.Quantity,T1.DeliveryOfLoc,T5.CPProvinceName DeliveryOfLocDesc,
         T6.DealerName DealerDesc, T6.PObox DealerPOBox			 
         FROM LMTShipLoanDetail T1 INNER JOIN
		  FinanceMain T2 ON T2.FinReference = T1.LoanRefNumber LEFT OUTER JOIN
		  VesselDetails T3 ON T1.VesselType=T3.VesselTypeID LEFT OUTER JOIN
		 RMTLovFieldDetail T4 On T3.VesselType=T4.FieldCodeId LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		 FROM  RMTCountryVsProvince T5  WHERE T5.CPCountry=(Select SysParmValue from SMTparameters 
		 Where SysParmCode='APP_DFT_COUNTRY'))T5 ON T5.CPProvince = T1.DeliveryOfLoc LEFT JOIN 
		 AMTVehicleDealer T6   ON T1.Dealer = T6.DealerId
		 </createView>   </changeSet>
		  <changeSet id="248" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTShipLoanDetail_TView">
		SELECT   T1.LoanRefNumber, T1.ItemNumber, T1.ShipName, T1.ShipBuilder, T1.Owner, T1.Charterer, 
         T1.BuiltYear, T1.Speed, T1.Flag, T1.VesselType, T1.VesselAge, T1.VesselCapacity,T1.Length, T1.DeadWeight, 
		 T1.EngineType, T1.OfficialNumber,T1.CallSign,T1.IMONumber,T1.Marketvalue,T1.PortofReg,
         T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
		 T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId	,T3.VesselSubType,
		 T4.FieldCodeId,T4.ValueDesc,T4.FieldCodeValue,T1.inspectionDetail,T1.LPODate,
         T1.Description,T1.Dealer,T1.Quantity,T1.DeliveryOfLoc,T5.CPProvinceName DeliveryOfLocDesc,
         T6.DealerName DealerDesc, T6.PObox DealerPOBox			 
         FROM LMTShipLoanDetail_Temp T1 INNER JOIN
		  FinanceMain_Temp T2 ON T2.FinReference = T1.LoanRefNumber LEFT OUTER JOIN
		  VesselDetails T3 ON T1.VesselType=T3.VesselTypeID LEFT OUTER JOIN
		 RMTLovFieldDetail T4 On T3.VesselType=T4.FieldCodeId LEFT JOIN (SELECT CPProvince ,CPProvinceName 
		 FROM  RMTCountryVsProvince T5  WHERE T5.CPCountry=(Select SysParmValue from SMTparameters 
		 Where SysParmCode='APP_DFT_COUNTRY'))T5 ON T5.CPProvince = T1.DeliveryOfLoc LEFT JOIN 
		 AMTVehicleDealer T6   ON T1.Dealer = T6.DealerId
		 </createView>   </changeSet>
		 <changeSet id="249" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSukukLoanDetail_AView">
		SELECT     sld.LoanRefNumber, sld.CustAccNumber, sld.PaymentMode, sld.BondDetail, sld.BrokerCode, sld.SukukIssuerAcc,
		   sld.BondNumFrom, sld.BondNumTo, sld.PurchaseDate, sld.CommissionType, sld.Commission, sld.Version, sld.LastMntBy,
		   sld.LastMntOn, sld.RecordStatus, sld.RoleCode, sld.NextRoleCode, sld.TaskId,sld.NextTaskId, sld.RecordType,
		   sld.WorkflowId,sb.BondDesc,sbr.BrokerDesc, sld.BondStatus, sld.BondRedeemAmount, sld.PurchaseRef, 
			sld.TransMakerRef, sld.TransCheckerRef, sld.BondPurchaseAmt
FROM          LMTSukukLoanDetail sld left outer join 
			SukukBonds sb on sld.BondDetail=sb.BondCode  left outer join 
			SukukBrokers sbr On sld.BrokerCode=sbr.BrokerCode
		 </createView>   </changeSet>
		 <changeSet id="250" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSukukLoanDetail_TView">
		SELECT		sld.LoanRefNumber, sld.CustAccNumber, sld.PaymentMode, sld.BondDetail, sld.BrokerCode, sld.SukukIssuerAcc,
			sld.BondNumFrom, sld.BondNumTo, sld.PurchaseDate, sld.CommissionType, sld.Commission, sld.Version, sld.LastMntBy,
			sld.LastMntOn, sld.RecordStatus, sld.RoleCode, sld.NextRoleCode, sld.TaskId,sld.NextTaskId, sld.RecordType,
			sld.WorkflowId,sb.BondDesc,sbr.BrokerDesc, sld.BondStatus, sld.BondRedeemAmount, sld.PurchaseRef, 
			sld.TransMakerRef, sld.TransCheckerRef, sld.BondPurchaseAmt
FROM		LMTSukukLoanDetail_Temp sld left outer join 
			SukukBonds sb on sld.BondDetail=sb.BondCode  left outer join 
			SukukBrokers sbr On sld.BrokerCode=sbr.BrokerCode
		 </createView>   </changeSet>
		 <changeSet id="251" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTSukukLoanDetail_View">
		SELECT		sld.LoanRefNumber, sld.CustAccNumber, sld.PaymentMode, sld.BondDetail, sld.BrokerCode, sld.SukukIssuerAcc,
			sld.BondNumFrom, sld.BondNumTo, sld.PurchaseDate, sld.CommissionType, sld.Commission, sld.Version, sld.LastMntBy,
			sld.LastMntOn, sld.RecordStatus, sld.RoleCode, sld.NextRoleCode, sld.TaskId,sld.NextTaskId, sld.RecordType,
			sld.WorkflowId,sb.BondDesc,sbr.BrokerDesc, sld.BondStatus, sld.BondRedeemAmount, sld.PurchaseRef, 
			sld.TransMakerRef, sld.TransCheckerRef, sld.BondPurchaseAmt
FROM		 LMTSukukLoanDetail_Temp sld left outer join 
			SukukBonds sb on sld.BondDetail=sb.BondCode  left outer join 
			SukukBrokers sbr On sld.BrokerCode=sbr.BrokerCode
Union All

SELECT		sld.LoanRefNumber, sld.CustAccNumber, sld.PaymentMode, sld.BondDetail, sld.BrokerCode, sld.SukukIssuerAcc,
			sld.BondNumFrom, sld.BondNumTo, sld.PurchaseDate, sld.CommissionType, sld.Commission, sld.Version, sld.LastMntBy,
			sld.LastMntOn, sld.RecordStatus, sld.RoleCode, sld.NextRoleCode, sld.TaskId,sld.NextTaskId, sld.RecordType,
			sld.WorkflowId,sb.BondDesc,sbr.BrokerDesc, sld.BondStatus, sld.BondRedeemAmount, sld.PurchaseRef, 
			sld.TransMakerRef, sld.TransCheckerRef, sld.BondPurchaseAmt
FROM		 LMTSukukLoanDetail sld left outer join 
			SukukBonds sb on sld.BondDetail=sb.BondCode  left outer join 
			SukukBrokers sbr On sld.BrokerCode=sbr.BrokerCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTSukukLoanDetail_Temp
                            WHERE      LoanRefNumber = sld.LoanRefNumber)
		 </createView>   </changeSet>
		  <changeSet id="252" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTTakeoverDetail_AView">
		SELECT      T1.LoanRefNumber,  T1.TakeoverSeq,T1.TakeoverFrom, T1.BankName, T1.Product, T1.TakeoverAmount, T1.Rate, T1.StartDate, T1.MaturityDate,
            T1.PastDue, T1.Remarks, T1.CustPortion, T2.BankName LovDescBankName,T3.FinTypeDesc LovDescProduct, T1.Version, T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,
			T1.TaskId,T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LMTTakeoverDetail T1 LEFT OUTER JOIN
              BMTBankDetail T2 ON T1.BankName = T2.BankCode LEFT OUTER JOIN
              OtherbankFinanceType T3 ON T1.Product = T3.FinType
		 </createView>   </changeSet>
		  <changeSet id="253" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTTakeoverDetail_TView">
		SELECT      T1.LoanRefNumber, T1.TakeoverSeq,T1.TakeoverFrom,  T1.BankName, T1.Product, T1.TakeoverAmount, T1.Rate, T1.StartDate, T1.MaturityDate,
            T1.PastDue, T1.Remarks, T1.CustPortion, T2.BankName LovDescBankName,T3.FinTypeDesc LovDescProduct, T1.Version, T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,
			T1.TaskId,T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LMTTakeoverDetail_Temp T1 LEFT OUTER JOIN
              BMTBankDetail T2 ON T1.BankName = T2.BankCode LEFT OUTER JOIN
              OtherbankFinanceType T3 ON T1.Product = T3.FinType
		 </createView>   </changeSet>
		 
		  <changeSet id="254" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTTakeoverDetail_View">
		SELECT      T1.LoanRefNumber, T1.TakeoverSeq,T1.TakeoverFrom,  T1.BankName, T1.Product, T1.TakeoverAmount, T1.Rate, T1.StartDate, T1.MaturityDate,
            T1.PastDue, T1.Remarks, T1.CustPortion, T2.BankName LovDescBankName,T3.FinTypeDesc LovDescProduct, T1.Version, T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,
			T1.TaskId,T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LMTTakeoverDetail_Temp T1 LEFT OUTER JOIN
              BMTBankDetail T2 ON T1.BankName = T2.BankCode LEFT OUTER JOIN
              OtherbankFinanceType T3 ON T1.Product = T3.FinType
UNION ALL
SELECT      T1.LoanRefNumber,  T1.TakeoverSeq,T1.TakeoverFrom, T1.BankName, T1.Product, T1.TakeoverAmount, T1.Rate, T1.StartDate, T1.MaturityDate,
            T1.PastDue, T1.Remarks, T1.CustPortion, T2.BankName LovDescBankName,T3.FinTypeDesc LovDescProduct, T1.Version, T1.LastMntBy, T1.LastMntOn,T1.RecordStatus, T1.RoleCode, T1.NextRoleCode,
			T1.TaskId,T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          LMTTakeoverDetail T1 LEFT OUTER JOIN
              BMTBankDetail T2 ON T1.BankName = T2.BankCode LEFT OUTER JOIN
              OtherbankFinanceType T3 ON T1.Product = T3.FinType
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LMTTakeoverDetail_TEMP
                            WHERE      LoanRefNumber = T1.LoanRefNumber AND TakeoverSeq = T1.TakeoverSeq)
		 </createView>   </changeSet>
	 <changeSet id="255" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitParams_TView">
		SELECT     QueryId,QueryCode, QueryModule, SQLQuery, ActualBlock, T1.Active,Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId, QuerySubCode, QueryDesc
FROM         LimitParams_Temp T1
			 </createView>   </changeSet>	
			 			 <changeSet id="256" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinanceMain_DView">
		SELECT     T1.FinReference, T1.InvestmentRef, T1.FinType, T1.FinCcy, T1.FinAmount, T1.DownPayment, T1.FeeChargeAmt, T1.ScheduleMethod, T1.RecordStatus, T1.RecordType, T1.RoleCode, 
                      T1.NextRoleCode, T2.CustCIF lovDescCustCif, T2.CustShrtName lovDescCustShrtName, T3.FinCategory lovDescProductCodeName, 
					T5.CcyEditField lovDescFinFormatter, T1.FinBranch, T3.FinDivision LovDescFinDivision, T1.FinBranch ${call.concatenate} '-' ${call.concatenate} T3.FinDivision LovDescPriKey, T2.CustId, T2.CustCIF 
FROM          FinanceMain_Temp T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID INNER JOIN
                       RMTFinanceTypes T3 ON T3.FinType = T1.FinType INNER JOIN
                       RMTCurrencies T5 ON T1.FinCcy = T5.CcyCode INNER JOIN
                       InvestmentFinHeader T6 ON T6.InvestmentRef = T1.InvestmentRef

			 </createView>   </changeSet>  
			 <changeSet id="257" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinanceProfitEnquiry_View">
SELECT     FM.FinReference, FPD.TotalPriPaid + FPD.TotalPriBal TotalPriSchd, FPD.TotalPftPaid + FPD.TotalPftBal TotalPftSchd, 
                      FPD.TotalPriPaid + FPD.TotalPriBal + FPD.TotalPftPaid + FPD.TotalPftBal TotalOriginal, FPD.TotalPriPaid + FPD.TotalPriBal - FPD.TdSchdPri OutStandPrincipal, 
                      FPD.TotalPftPaid + FPD.TotalPftBal - FPD.TdSchdPft OutStandProfit, 
                      FPD.TotalPriPaid + FPD.TotalPriBal - FPD.TdSchdPri + FPD.TotalPftPaid + FPD.TotalPftBal - FPD.TdSchdPft TotalOutStanding, FPD.TotalPriPaid schdPriPaid, 
                      FPD.TotalPftPaid schdPftPaid, FPD.TotalPriPaid + FPD.TotalPftPaid totalPaid, FPD.TotalPriBal CurrentFinanceAmount, FPD.TotalPftBal UnPaidProfit, 
                      FPD.TotalPriBal + FPD.TotalPftBal TotalUnPaid, FPD.TotalPftPaid + FPD.TdPftAccrued EarnedProfit, FPD.TotalPftBal - FPD.TdPftAccrued UnEarnedProfit, 
                      FM.DownPayment TotalDownPayment, FM.DownPayBank DownPaymentToBank, FM.DownPaySupl DownPaymentToSpplier, 
                      FPD.TotalPriBal UnpaidPrincipal, FPD.TdPftAccrueSusp ProfitSuspended, FM.FinBranch, FM.FinType, FM.FinCcy, FM.NumberOfTerms, FM.MaturityDate, 
                      FM.FinStartDate, ccy.CcyEditField, FM.LastRepayDate FinLastRepayDate, FM.RepayProfitRate FinRate,
                      FPD.ODPrincipal OverDuePrincipal , FPD.ODProfit OverDueProfit,
                  (FPD.ODPrincipal + FPD.ODProfit) TotalOverDue, (FPD.ODPrincipal + FPD.ODProfit) OverDueInstlementPft,
                  FPD.NOODInst OverDueInstlments, FPD.NOPaidInst PaidInstlments
                            
FROM         FinanceMain FM INNER JOIN
                      FinPftDetails FPD ON FM.FinReference = FPD.FinReference INNER JOIN
                      RMTCurrencies ccy ON ccy.CcyCode = FM.FinCcy

			 </createView>   </changeSet> 
			 <changeSet id="258" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinCreditReviewDetails_AMView">
SELECT DetailId,LovDescMaxAuditYear,LovDescMinAuditYear,LastMntBy,
	   LastMntOn,NextRoleCode,CustShrtName LovDescCustShrtName,
	   CustCIF lovDescCustCIF,RecordStatus,RecordType,
	   CreditRevCode,BankName,T1.Division
FROM (
SELECT T2.CustCIF,T1.CustomerId,T2.CustShrtName,
	   MAX(T1.AuditYear) LovDescMaxAuditYear,MIN(T1.AuditYear)LovDescMinAuditYear
FROM    FinCreditReviewDetails T1 INNER JOIN
        Customers T2 ON T1.CustomerId = T2.CustID
GROUP BY T2.CustCIF,T1.CustomerId,T2.CustShrtName )T  
INNER JOIN FinCreditReviewDetails T1 ON T1.AuditYear=LovDescMaxAuditYear 
AND T1.CustomerId=T.CustomerId
UNION
SELECT DetailId,LovDescMaxAuditYear,LovDescMinAuditYear,LastMntBy,
	   LastMntOn,NextRoleCode,CustShrtName LovDescCustShrtName,
	   CustCIF lovDescCustCIF,RecordStatus,RecordType,
	   CreditRevCode,BankName ,T1.Division
FROM (
SELECT T2.CustCIF,T1.CustomerId,T2.CustShrtName,
	   MAX(T1.AuditYear) LovDescMaxAuditYear,MIN(T1.AuditYear)LovDescMinAuditYear
FROM    FinCreditReviewDetails_temp T1 INNER JOIN
        Customers T2 ON T1.CustomerId = T2.CustID
GROUP BY T2.CustCIF,T1.CustomerId,T2.CustShrtName )T  
INNER JOIN FinCreditReviewDetails_temp T1 ON T1.AuditYear=LovDescMaxAuditYear 
AND T1.CustomerId=T.CustomerId

			 </createView>   </changeSet>
			 <changeSet id="259" author="Pruthvi">
		<createView replaceIfExists="true" viewName="RPT_DailyODSmryRetail_View">
            Select T1.FinType,T5.FinTypeDesc,COUNT(T1.Finreference)noofaccounts,FinDivision,
                   Sum(${add.schema}UDF_ConvertCurrency(TotalPriBal+TotalPftBal,T1.FinCCY,'USD'))ConExchgOutstandingAmt_USD,
                   Sum(${add.schema}UDF_ConvertCurrency(TotalPriBal+TotalPftBal,T1.FinCCY,'INR')) ConExchgOutstandingAmt_BHD
            FROM   FinPftDetails T1     
                   INNER JOIN RMTCurrencies T4   ON T4.CCYCode=T1.FinCcy 
                   Inner Join RMTFinanceTypes T5  ON T5.FinType =T1.FinType 
            Where  NoOdInst > 0 
            Group  BY T1.FinType,FinTypeDesc,Findivision

			 </createView>   </changeSet>
			 <changeSet id="260" author="Pruthvi">
		<createView replaceIfExists="true" viewName="StepPolicyHeaderDetails_View">
SELECT     T1.PolicyCode, T1.PolicyDesc,
                          (SELECT     Count(PolicyCode)
                            FROM          StepPolicyDetail_View
                            WHERE      PolicyCode = T1.PolicyCode) StepNumber, 
                          ${add.schema}fn_list_agg_step_policy('TenorSplitPerc', T1.PolicyCode) TenorSplitPerc, 
                          ${add.schema}fn_list_agg_step_policy('RateMargin', T1.PolicyCode) RateMargin, 
                          ${add.schema}fn_list_agg_step_policy('EMISplitPerc', T1.PolicyCode) EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader_Temp T1
UNION ALL
SELECT     T1.PolicyCode, T1.PolicyDesc,
                          (SELECT     Count(PolicyCode)
                            FROM          StepPolicyDetail_View
                            WHERE      PolicyCode = T1.PolicyCode) StepNumber, 
                          ${add.schema}fn_list_agg_step_policy('TenorSplitPerc', T1.PolicyCode) TenorSplitPerc, 
                          ${add.schema}fn_list_agg_step_policy('RateMargin', T1.PolicyCode) RateMargin, 
                          ${add.schema}fn_list_agg_step_policy('EMISplitPerc', T1.PolicyCode) EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          StepPolicyHeader_Temp
                            WHERE      PolicyCode = T1.PolicyCode)

			 </createView>   </changeSet>
			 <changeSet id="261" author="Pruthvi">
		<createView replaceIfExists="true" viewName="StepPolicyDetail_View">
SELECT     T1.PolicyCode, T1.StepNumber, T1.TenorSplitPerc, T1.RateMargin, T1.EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM          StepPolicyDetail_Temp T1 
UNION ALL
SELECT     T1.PolicyCode, T1.StepNumber, T1.TenorSplitPerc, T1.RateMargin, T1.EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM          StepPolicyDetail T1 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          StepPolicyDetail_Temp
                            WHERE      PolicyCode = T1.PolicyCode And StepNumber = T1.StepNumber)

			 </createView>   </changeSet>
			 <changeSet id="262" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Task_Assignments_View">
SELECT    T1.AssignedCount AssignedCount, T1.UserRoleCode,  T1.UserId, 
                      T2.UsrFName ${call.concatenate}' '${call.concatenate} T2.UsrLName LovDescUserName, T3.RoleDesc
FROM          Task_Assignments T1 INNER JOIN
                       SecUsers T2 ON T1.UserId = T2.UsrID INNER JOIN
                       SecRoles T3 ON T1.UserRoleCode = T3.RoleCd 
WHERE     (T1.AssignedCount > 0)

			 </createView>   </changeSet>
			 
	<changeSet id="263" author="Prasad">
	<createView replaceIfExists="true" viewName="AvailFinance_View"> 
	SELECT      FinPftDetails.FinType ${call.concatenate} '-' ${call.concatenate}  FinPftDetails.FinReference FinReference,  
   FinPftDetails.CustID,  FinPftDetails.FinCcy,  RMTCurrencies.CcyEditField, 
                       FinPftDetails.FinAmount +  FinPftDetails.TotalPftSchd FinAmount, 
                     FinPftDetails.FinAmount DrawnPrinciple,
                     RMTCurrencies.CcySpotRate CcySpotRate, LastRepay,
                      FinPftDetails.MaturityDate,  FinPftDetails.CurReducingRate ProfitRate,  FinPftDetails.RepayFrq, 
                       FinPftDetails.FinStatus Status,  FinPftDetails.FinCommitmentRef, 
                       FinPftDetails.TotalPriBal OutStandingBal,
                       RMTFinanceTypes.FinDivision ,  SMTDivisionDetail.DivisionCodeDesc FInDivisionDesc,FinPftDetails.FinStartDate , FinPftDetails.NOInst
FROM          FinPftDetails INNER JOIN
                       RMTCurrencies ON  FinPftDetails.FinCcy =  RMTCurrencies.CcyCode INNER JOIN 
                       RMTFinanceTypes ON  FinPftDetails.FinType = RMTFinanceTypes.FinType INNER JOIN 
                       SMTDivisionDetail ON  SMTDivisionDetail.DivisionCode =  RMTFinanceTypes.FinDivision LEFT OUTER JOIN 
                      (Select FinReference,MAX(FinPostDate)LastRepay from FinRepayDetails
                      GROUP BY FinReference)T ON T.FinReference=FinPftDetails.FinReference
        	 </createView>   </changeSet>
        	 
      		 <changeSet id="264" author="Prasad">
		<createView replaceIfExists="true" viewName="BMTTransactionCode_AView"> 
		SELECT     TranCode, TranDesc, TranType, TranIsActive, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId,CASE WHEN TranType='D' THEN 'Debit' ELSE 'Credit' END lovDescTranType
FROM         BMTTransactionCode
	 </createView>   </changeSet>
	 			 <changeSet id="265" author="Prasad">
		<createView replaceIfExists="true" viewName="BulkDeferement_View">
		<![CDATA[
		Select T1.ClosingStatus, T1.FinReference, T1.FinType FinType, T1.FinCcy FinCcy, T1.CustID CustID, T3.FinDivision LovDescFinDivision, 
T1.FinBranch FinBranch, T3.FinCategory ProductCode, T2.SchDate DeferedSchdDate , T4.CustCIF,T4.CustShrtName 
As CustName,BMT.IntRateBasisDesc ProfitDayBasisDesc,BMTSchd.SchdMethodDesc SchdMethodDesc
From FinanceMain T1 
INNER JOIN FinScheduleDetails T2 ON T1.FinReference = T2.FinReference
INNER JOIN RMTFinanceTypes T3 ON T1.FinType = T3.FinType
INNER JOIN Customers T4 ON T1.CustId = T4.CustId
INNER JOIN BMTIntRateBasisCodes BMT ON BMT.IntRateBasisCode = T1.ProfitDaysBasis
INNER JOIN BMTSchdMethod BMTSchd ON BMTSchd.SchdMethod = T1.ScheduleMethod
WHERE (T1.Defferments - T1.AllowedDefRpyChange  >0)
  AND T1.MaturityDate != T2.SchDate  AND T1.FinIsActive = 1 AND T2.RepayAmount > 0 AND T2.Defered = 0 
  AND (T1.ClosingStatus is null or T1.closingstatus not in ('C','W')) AND (T2.SchdPftPaid + T2.SchdPriPaid) = 0 
  ]]>
  </createView>   </changeSet>
  
  <changeSet id="266" author="Prasad">
  <createView replaceIfExists="true" viewName="CustFinAmounts_View">
  Select T1.CustID, 
CAST(COALESCE(SUM(T2.TotalPriBal + T2.TotalPftBal),0) * T3.CcySpotRate as decimal(21,0)) CustLiveFinAmount,
CAST(COALESCE(SUM(T2.ODPrincipal + T2.ODProfit),0) * T3.CcySpotRate as decimal(21,0)) CustPastDueAmt
from Customers T1 
INNER JOIN FinPftDetails T2 ON T2.CustID = T1.CustID 
INNER JOIN RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode 
 Group By T1.CustID, T3.CcySpotRate
   </createView>   </changeSet>
   
  <changeSet id="267" author="Prasad">
  <createView replaceIfExists="true" viewName="CustomerFacilityDetails_AView">
   SELECT     T1.CAFReference FinReference, T1.RoleCode, T1.RecordType, T1.NextRoleCode, 
				T1.startDate FinStartDate,T1.LastMntBy,T1.FacilityType  FinType, 0 FinAmount,'' FinCcy,
				T2.CustDftBranch FinBranch, T2.CustID, T2.CustCIF, T2.CustShrtName,  
                T3.RoleDesc PrvRoleDesc, T4.RoleDesc NextRoleDesc,  T6.DeptDesc,
                T7.UsrFName${call.concatenate} ''${call.concatenate}T7.UsrLName lastMntByUser, 0 ccyFormat,T8.FacilityDesc FinTypeDesc		
FROM          FacilityHeader T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID  LEFT OUTER JOIN
                       SecRoles T3 ON T3.RoleCd = T1.RoleCode LEFT OUTER JOIN
                       SecRoles T4 ON T4.RoleCd = T1.NextRoleCode LEFT OUTER JOIN
                       SecUsers T5 ON T5.UsrID = T1.LastMntBy LEFT OUTER JOIN
                       BMTDepartments T6 ON T6.DeptCode = T5.UsrDeptCode LEFT OUTER JOIN
                       SecUsers  T7 on T1.LastMntBy =T7.UsrID LEFT OUTER JOIN
                       CAFFacilityTypes T8 on T1.FacilityType=T8.FacilityType
   </createView>   </changeSet>
   
   <changeSet id="268" author="Prasad">
  <createView replaceIfExists="true" viewName="CustomerFacilityDetails_View">
   SELECT     T1.CAFReference FinReference, T1.RoleCode, T1.RecordType, T1.NextRoleCode, 
				T1.startDate FinStartDate,T1.LastMntBy,T1.FacilityType  FinType, 0 FinAmount,'' FinCcy,
				T2.CustDftBranch FinBranch, T2.CustID, T2.CustCIF, T2.CustShrtName,  
                T3.RoleDesc PrvRoleDesc, T4.RoleDesc NextRoleDesc,  T6.DeptDesc,
                T7.UsrFName${call.concatenate}  ''${call.concatenate} T7.UsrLName lastMntByUser, 0 ccyFormat,T8.FacilityDesc FinTypeDesc		
FROM          FacilityHeader_Temp T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID  LEFT OUTER JOIN
                       SecRoles T3 ON T3.RoleCd = T1.RoleCode LEFT OUTER JOIN
                       SecRoles T4 ON T4.RoleCd = T1.NextRoleCode LEFT OUTER JOIN
                       SecUsers T5 ON T5.UsrID = T1.LastMntBy LEFT OUTER JOIN
                       BMTDepartments T6 ON T6.DeptCode = T5.UsrDeptCode LEFT OUTER JOIN
                       SecUsers  T7 on T1.LastMntBy =T7.UsrID LEFT OUTER JOIN
                       CAFFacilityTypes T8 on T1.FacilityType=T8.FacilityType
  
   </createView>   </changeSet>
     <changeSet id="269" author="Prasad">
  <createView replaceIfExists="true" viewName="CustomerFinanceDetails_AView">
  SELECT     T1.FinReference, T1.FinBranch, T2.CustID,  T1.RoleCode, T1.NextRoleCode, 
			T1.FinType,T1.FinAmount,T1.FinStartDate,T1.LastMntBy, T1.FinCcy,
			T1.RecordType, T2.CustCIF, T2.CustShrtName, T3.RoleDesc PrvRoleDesc,T4.RoleDesc NextRoleDesc,T6.DeptDesc,
			T7.UsrFName ${call.concatenate}  '' ${call.concatenate}  T7.UsrLName lastMntByUser,T8.CcyEditField ccyFormat,T9.FinTypeDesc,T9.FinDivision lovDescFinDivision
	FROM          FinanceMain T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID   LEFT OUTER JOIN
                       SecRoles T3 ON T3.RoleCd = T1.RoleCode LEFT OUTER JOIN
                       SecRoles T4 ON T4.RoleCd = T1.NextRoleCode LEFT OUTER JOIN
                       SecUsers T5 ON T5.UsrID = T1.LastMntBy LEFT OUTER JOIN
                       BMTDepartments T6 ON T6.DeptCode = T5.UsrDeptCode LEFT OUTER JOIN
                       SecUsers  T7 on T1.LastMntBy =T7.UsrID LEFT OUTER JOIN
                       RMTCurrencies T8 on T1.FinCcy=T8.CcyCode LEFT OUTER JOIN 
                       RMTFinanceTypes T9 on T1.FinType=T9.FinType
  
   </createView>   </changeSet>
   
      <changeSet id="270" author="Prasad">
  <createView replaceIfExists="true" viewName="CustomerFinanceDetails_View">
  SELECT     T1.FinReference, T1.FinBranch, T2.CustID,  T1.RoleCode, T1.NextRoleCode, 
			T1.FinType,T1.FinAmount,T1.FinStartDate,T1.LastMntBy, T1.FinCcy,
			T1.RecordType, T2.CustCIF, T2.CustShrtName, T3.RoleDesc PrvRoleDesc, COALESCE(T4.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) NextRoleDesc,T6.DeptDesc,
			T7.UsrFName ${call.concatenate} ''${call.concatenate}T7.UsrLName lastMntByUser,T8.CcyEditField ccyFormat,T9.FinTypeDesc,
			T9.FinDivision lovDescFinDivision
FROM          FinanceMain_Temp T1 INNER JOIN
                       Customers T2 ON T1.CustID = T2.CustID   LEFT OUTER JOIN
                       SecRoles T3 ON T3.RoleCd = T1.RoleCode LEFT OUTER JOIN
                       SecRoles T4 ON T4.RoleCd = T1.NextRoleCode LEFT OUTER JOIN
                       SecUsers T5 ON T5.UsrID = T1.LastMntBy LEFT OUTER JOIN
                       BMTDepartments T6 ON T6.DeptCode = T5.UsrDeptCode LEFT OUTER JOIN
                       SecUsers  T7 on T1.LastMntBy =T7.UsrID LEFT OUTER JOIN
                       RMTCurrencies T8 on T1.FinCcy=T8.CcyCode LEFT OUTER JOIN 
                       RMTFinanceTypes T9 on T1.FinType=T9.FinType
   </createView>   </changeSet>
   
      <changeSet id="271" author="Prasad">
  <createView replaceIfExists="true" viewName="CustPastDueDetail_View">
   <![CDATA[
select	   T1.CustID,CAST( SUM(${add.schema}UDF_ConvertCurrency(FinCurODAmt,T2.FinCcy,'BHD')) as decimal(18,3)) AS PastDueAmount,
			MAX(FinCurODDays) AS DueDays ,MIN(FinODSchdDate) As PastDueFrom
from	   finoddetails T1 INNER JOIN FinanceMain T2 ON T1.FinReference =T2.FinReference
where		FinCurODAmt>0 Group By	T1.CustID
]]>
   </createView>   </changeSet>
   
     <changeSet id="272" author="Prasad">
  <createView replaceIfExists="true" viewName="DedupParams_View">
  SELECT    T1.QueryId, T1.QueryCode, T1.QueryModule, T1.SQLQuery, T1.ActualBlock, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.QuerySubCode, T1.QueryDesc,
                      Case when QuerySubCode='C' Then 'Corporate' 
			when QuerySubCode='I'THEN 'Individual' ELSE QuerySubCode END lovDescQuerySubCode
FROM         DedupParams_Temp T1
UNION ALL
SELECT    T1.QueryId, T1.QueryCode, T1.QueryModule, T1.SQLQuery, T1.ActualBlock, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.QuerySubCode, T1.QueryDesc,
                      Case when QuerySubCode='C' Then 'Corporate' 
			when QuerySubCode='I'THEN 'Individual' ELSE QuerySubCode END lovDescQuerySubCode
FROM         DedupParams T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          DedupParams_TEMP
                            WHERE      QueryCode = T1.QueryCode AND QueryModule = T1.QueryModule AND QuerySubCode = T1.QuerySubCode)
  
   </createView>   </changeSet>
  
     <changeSet id="273" author="Prasad">
  <createView replaceIfExists="true" viewName="FacilityDetails_AView">
  SELECT     T1.CAFReference, T1.FacilityRef, T1.FacilityFor, T1.FacilityType, T1.FacilityCCY, T1.Exposure, T1.ExistingLimit, T1.NewLimit, T1.FinanceAmount, T1.Pricing, 
                      T1.Repayments, T1.RateType, T1.LCPeriod, T1.UsancePeriod, T1.SecurityClean, T1.SecurityDesc, T1.Utilization, T1.Commission, T1.Purpose, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.CustID, T2.Revolving, 
                      T1.TermSheetRef, T4.CcyDesc FacilityCCYName ,T4.CcyEditField CCYformat, T1.StartDate, T1.MaturityDate, T1.Guarantee, T1.Covenants, T1.DocumentsRequired, 
                      T2.FacilityDesc FacilityTypeDesc, T1.tenorYear, T1.tenorMonth, T1.tenorDesc, T1.transactionType, T1.agentBank, T1.otherDetails, T1.totalFacility, 
                      T1.totalFacilityCcy, T1.underWriting, T1.underWritingCcy, T1.propFinalTake, T1.propFinalTakeCcy, T5.CcyDesc TotalFacilityCcyName, 
                      T6.CcyDesc UnderWritingCcyName, T7.CcyDesc PropFinalTakeCcyName, COALESCE(T5.CcyEditField, 0) TotalFacilityFormatter, COALESCE(T6.CcyEditField, 0) 
                      UnderWritingFormatter, COALESCE(T7.CcyEditField, 0) PropFinalTakeFormatter
FROM          FacilityDetails T1 INNER JOIN
                       RMTFacilityTypes T2 ON T1.FacilityType = T2.FacilityType INNER JOIN
                       RMTCurrencies T4 ON T1.FacilityCCY = T4.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T5 ON T1.totalFacilityCcy = T5.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T6 ON T1.underWritingCcy = T6.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.propFinalTakeCcy = T7.CcyCode
  
   </createView>   </changeSet>
   
      <changeSet id="274" author="Prasad">
  <createView replaceIfExists="true" viewName="FacilityDetails_View">
  SELECT     T1.CAFReference, T1.FacilityRef, T1.FacilityFor, T1.FacilityType, T1.FacilityCCY, T1.Exposure, T1.ExistingLimit, T1.NewLimit, T1.FinanceAmount, T1.Pricing, 
                      T1.Repayments, T1.RateType, T1.LCPeriod, T1.UsancePeriod, T1.SecurityClean, T1.SecurityDesc, T1.Utilization, T1.Commission, T1.Purpose, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.CustID, T2.Revolving, 
                      T1.TermSheetRef, T4.CcyDesc FacilityCCYName, T4.CcyEditField CCYformat, T1.StartDate, T1.MaturityDate, T1.Guarantee, T1.Covenants, T1.DocumentsRequired, 
                      T2.FacilityDesc FacilityTypeDesc, T1.tenorYear, T1.tenorMonth, T1.tenorDesc, T1.TransactionType, T1.AgentBank, T1.OtherDetails, T1.TotalFacility, 
                      T1.TotalFacilityCcy, T1.UnderWriting, T1.UnderWritingCcy, T1.PropFinalTake, T1.PropFinalTakeCcy, T5.CcyDesc TotalFacilityCcyName, 
                      T6.CcyDesc UnderWritingCcyName, T7.CcyDesc PropFinalTakeCcyName,
                       COALESCE(T5.CcyEditField, 0) TotalFacilityFormatter, 
                       COALESCE(T6.CcyEditField, 0) UnderWritingFormatter,
                       COALESCE(T7.CcyEditField, 0) PropFinalTakeFormatter

FROM          FacilityDetails_Temp T1 INNER JOIN
                       RMTFacilityTypes T2 ON T1.FacilityType = T2.FacilityType INNER JOIN
                       RMTCurrencies T4 ON T1.FacilityCCY = T4.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T5 ON T1.TotalFacilityCCY = T5.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T6 ON T1.UnderWritingCCY = T6.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.PropFinalTakeCCY = T7.CcyCode
UNION ALL
SELECT     T1.CAFReference, T1.FacilityRef, T1.FacilityFor, T1.FacilityType, T1.FacilityCCY, T1.Exposure, T1.ExistingLimit, T1.NewLimit, T1.FinanceAmount, T1.Pricing, 
                      T1.Repayments, T1.RateType, T1.LCPeriod, T1.UsancePeriod, T1.SecurityClean, T1.SecurityDesc, T1.Utilization, T1.Commission, T1.Purpose, T1.Version, 
                      T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.CustID, T2.Revolving, 
                      T1.TermSheetRef, T4.CcyDesc FacilityCCYName, T4.CcyEditField CCYformat, T1.StartDate, T1.MaturityDate, T1.Guarantee, T1.Covenants, T1.DocumentsRequired, 
                      T2.FacilityDesc FacilityTypeDesc, T1.tenorYear, T1.tenorMonth, T1.tenorDesc, T1.TransactionType, T1.AgentBank, T1.OtherDetails, T1.TotalFacility, 
                      T1.TotalFacilityCcy, T1.UnderWriting, T1.UnderWritingCcy, T1.PropFinalTake, T1.PropFinalTakeCcy, T5.CcyDesc TotalFacilityCcyName, 
                      T6.CcyDesc UnderWritingCcyName, T7.CcyDesc PropFinalTakeCcyName, 
 COALESCE(T5.CcyEditField, 0) TotalFacilityFormatter, 
 COALESCE(T6.CcyEditField, 0) UnderWritingFormatter, 
 COALESCE(T7.CcyEditField, 0) PropFinalTakeFormatter
FROM          FacilityDetails T1 INNER JOIN
                       RMTFacilityTypes T2 ON T1.FacilityType = T2.FacilityType INNER JOIN
                       RMTCurrencies T4 ON T1.FacilityCCY = T4.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T5 ON T1.TotalFacilityCCY = T5.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T6 ON T1.UnderWritingCCY = T6.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.PropFinalTakeCCY = T7.CcyCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FacilityDetails_TEMP
                            WHERE      CAFReference = T1.CAFReference AND FacilityRef = T1.FacilityRef)
  
   </createView>   </changeSet>
   
      <changeSet id="275" author="Prasad">
  <createView replaceIfExists="true" viewName="FCMTCommodityInventory_AView">
  SELECT     T1.CommodityInvId, T1.BrokerCode, T1.HoldCertificateNo, T1.CommodityCode, T1.PurchaseDate, T1.FinalSettlementDate, T1.PurchaseAmount, 
                      T1.Units, T1.UnitPrice, T1.Quantity, T1.Location, T1.BulkPurchase, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CustShrtName BrokerShrtName,T2.BrokerCustID,T2.AccountNumber, 
                      COALESCE(T4.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T2.FeeOnUnsold,T1.CommodityCcy,T5.CcyEditField,T5.CcyDesc CommodityCcyDesc,T6.FieldCodeValue LocationCode,T6.ValueDesc LocationDesc,
                       T7.CommodityName lovDescCommodityDesc
FROM         FCMTCommodityInventory T1 INNER JOIN
                      FCMTBrokerDetail T2 ON T1.BrokerCode = T2.BrokerCode INNER JOIN
                      Customers T3 ON T2.brokerCustid = t3.custid LEFT OUTER  JOIN
					  SecRoles T4 ON T1.NextRoleCode = T4.RoleCd INNER JOIN 
					  RMTCurrencies T5 On T5.CcyCode=T1.CommodityCcy LEFT OUTER JOIN
					  RMTLovFieldDetail T6 on T1.Location=T6.FieldCodeId INNER JOIN
					  FCMTCommodityDetail T7 on T1.CommodityCode=T7.CommodityCode
  
   </createView>   </changeSet>
  
     <changeSet id="276" author="Prasad">
  <createView replaceIfExists="true" viewName="FCMTCommodityInventory_TView">
  SELECT     T1.CommodityInvId, T1.BrokerCode, T1.HoldCertificateNo, T1.CommodityCode, T1.PurchaseDate, T1.FinalSettlementDate, T1.PurchaseAmount, 
                      T1.Units, T1.UnitPrice, T1.Quantity, T1.Location, T1.BulkPurchase, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CustShrtName BrokerShrtName,T2.BrokerCustID,T2.AccountNumber,  
                      COALESCE(T4.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T2.FeeOnUnsold,T1.CommodityCcy,T5.CcyEditField,T5.CcyDesc CommodityCcyDesc,T6.FieldCodeValue LocationCode,T6.ValueDesc LocationDesc,
                       T7.CommodityName lovDescCommodityDesc
FROM         FCMTCommodityInventory_Temp T1 INNER JOIN
                      FCMTBrokerDetail T2 ON T1.BrokerCode = T2.BrokerCode INNER JOIN
                      Customers T3 ON T2.brokerCustid = t3.custid LEFT OUTER  JOIN
					  SecRoles T4 ON T1.NextRoleCode = T4.RoleCd INNER JOIN 
					  RMTCurrencies T5 On T5.CcyCode=T1.CommodityCcy LEFT OUTER JOIN
					  RMTLovFieldDetail T6 on T1.Location=T6.FieldCodeId INNER JOIN
					  FCMTCommodityDetail T7 on T1.CommodityCode=T7.CommodityCode
  
   </createView>   </changeSet>
   
      <changeSet id="277" author="Prasad">
  <createView replaceIfExists="true" viewName="FCMTCommodityInventory_View">
  SELECT     T1.CommodityInvId, T1.BrokerCode, T1.HoldCertificateNo, T1.CommodityCode, T1.PurchaseDate, T1.FinalSettlementDate, T1.PurchaseAmount, 
                      T1.Units, T1.UnitPrice, T1.Quantity, T1.Location, T1.BulkPurchase, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CustShrtName BrokerShrtName,T2.BrokerCustID,T2.AccountNumber,  
                      COALESCE(T4.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T2.FeeOnUnsold,T1.CommodityCcy,T5.CcyEditField,T5.CcyDesc CommodityCcyDesc,T6.FieldCodeValue LocationCode,T6.ValueDesc LocationDesc,
                       T7.CommodityName lovDescCommodityDesc
FROM         FCMTCommodityInventory_Temp T1 INNER JOIN
                      FCMTBrokerDetail T2 ON T1.BrokerCode = T2.BrokerCode INNER JOIN
                      Customers T3 ON T2.brokerCustid = t3.custid LEFT OUTER JOIN
					  SecRoles T4 ON T1.NextRoleCode = T4.RoleCd INNER JOIN 
					  RMTCurrencies T5 On T5.CcyCode=T1.CommodityCcy LEFT OUTER JOIN
					  RMTLovFieldDetail T6 on T1.Location=T6.FieldCodeId INNER JOIN
					  FCMTCommodityDetail T7 on T1.CommodityCode=T7.CommodityCode
UNION ALL
SELECT     T1.CommodityInvId, T1.BrokerCode, T1.HoldCertificateNo, T1.CommodityCode, T1.PurchaseDate, T1.FinalSettlementDate, T1.PurchaseAmount, 
                      T1.Units, T1.UnitPrice, T1.Quantity, T1.Location, T1.BulkPurchase, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, 
                      T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.CustShrtName BrokerShrtName,T2.BrokerCustID,T2.AccountNumber, 
                      COALESCE(T4.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T2.FeeOnUnsold,T1.CommodityCcy,T5.CcyEditField,T5.CcyDesc CommodityCcyDesc,T6.FieldCodeValue LocationCode,T6.ValueDesc LocationDesc,
                      T7.CommodityName lovDescCommodityDesc
FROM         FCMTCommodityInventory T1 INNER JOIN
                      FCMTBrokerDetail T2 ON T1.BrokerCode = T2.BrokerCode INNER JOIN
                      Customers T3 ON T2.brokerCustid = t3.custid LEFT OUTER JOIN
					  SecRoles T4 ON T1.NextRoleCode = T4.RoleCd INNER JOIN 
					  RMTCurrencies T5 On T5.CcyCode=T1.CommodityCcy LEFT OUTER JOIN
					  RMTLovFieldDetail T6 on T1.Location=T6.FieldCodeId INNER JOIN
					  FCMTCommodityDetail T7 on T1.CommodityCode=T7.CommodityCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          FCMTCommodityInventory_TEMP
                            WHERE      CommodityInvId = T1.CommodityInvId)
  
   </createView>   </changeSet>
      <changeSet id="278" author="Prasad">
  <createView replaceIfExists="true" viewName="FinanceMain_LView">
  SELECT     T1.FinReference, T1.InvestmentRef, T1.FinType, T1.FinCcy, T1.FinAmount, T1.DownPayment, T1.FeeChargeAmt, T1.ScheduleMethod, T1.NumberOfTerms, 
                      T1.RecordStatus, T1.RecordType, T1.RoleCode, T1.NextRoleCode, T2.CustCIF lovDescCustCif, T2.CustShrtName lovDescCustShrtName, 
                      T3.FinCategory lovDescProductCodeName, T5.CcyEditField lovDescFinFormatter, T1.FinBranch, T3.FinDivision lovdescfindivision, 
                      T1.FinBranch ${call.concatenate} '-' ${call.concatenate} T3.FinDivision LovDescPriKey, T3.Product lovdescFinProduct, T2.CustCRCPR LovDescCustCRCPR, 
                      T2.CustPassportNo lovDescCustPassportNo, T2.CustDOB LOvDescCustDOB, T1.FinContractDate, T1.LinkedFinRef, T1.NextUserId, T1.Priority, 
                      COALESCE(T6.RoleDesc,${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage, T2.PhoneNumber, T1.WorkflowId, T1.TaskId, T1.NextTaskId,
                      T1.DeviationApproval, (T1.FinAmount- T1.DownPayment+ T1.FeeChargeAmt) FinancingAmount,T1.FinPurpose,
                      T1.InitiateDate,T3.FinTypeDesc lovDescFinTypeName,T1.FinPreApprovedRef, T1.RcdMaintainSts,T1.AccountsOfficer,T28.GenDeptDesc lovDescAccountsOfficer,T1.InsuranceAmt
FROM         FinanceMain_Temp T1 INNER JOIN
             Customers T2 ON T1.CustID = T2.CustID INNER JOIN
             RMTFinanceTypes T3 ON T3.FinType = T1.FinType INNER JOIN
             RMTCurrencies T5 ON T1.FinCcy = T5.CcyCode LEFT OUTER JOIN
             RMTGenDepartments T28 ON T1.AccountsOfficer = T28.GenDepartment LEFT OUTER JOIN
             SecRoles T6 ON T1.NextRoleCode = T6.RoleCd
   </createView>   </changeSet>
   
      <changeSet id="279" author="Prasad">
  <createView replaceIfExists="true" viewName="FinanceMaintenance_View">
  SELECT      T1.FinReference, T1.FinBranch, T1.FinType, T1.FinCcy, T1.ScheduleMethod, T1.ProfitDaysBasis, 
                  T1.FinStartDate, T1.NumberOfTerms, T1.CustID, T1.FinAmount, T1.MaturityDate, T1.FinRepaymentAmount, 
                  T1.FinIsActive,  T2.CcyEditField LovDescFinFormatter,  T4.CustCIF LovDescCustCIF,
                  T1.Blacklisted, T1.FeeChargeAmt, T1.GraceTerms,T1.AllowGrcPeriod,T1.GrcPeriodEndDate,T3.FinCategory lovDescProductCodeName, 
                  T3.FinIsAlwMD lovDescFinIsAlwMD, T3.FinIsAlwDifferment lovDescFinAlwDeferment,T1.Defferments, 
                  T1.NextRoleCode, T1.RecordStatus, T1.RecordType, T1.allowgrcpftrvw, T1.allowrepayrvw, T1.lastrepaydate, T1.lastrepaypftdate,
                  T1.AllowedDefRpyChange, T1.AvailedDefRpyChange, T1.RcdMaintainSts, T1.MigratedFinance, T1.ClosingStatus, T3.FinDivision LovDescFinDivision, T1.RepayRateBasis,
                   T1.TakafulRequired, T1.PptTakafulRequired, T1.ManualSchedule , T1.TakeOverFinance , T1.NextRolloverDate,
                   COALESCE(T5.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T3.FinCategory, T3.TakafulPayType, T3.PropertyTakafulPayType, T1.DownPayment
                  
            FROM           FinanceMain_Temp T1 INNER JOIN
                       RMTCurrencies T2 ON T1.FinCcy = T2.CcyCode INNER JOIN
                       RMTFinanceTypes T3 ON T1.FinType = T3.FinType INNER JOIN
                       Customers T4 ON T1.CustID = T4.CustID LEFT OUTER JOIN
              SecRoles T5 ON T1.NextRoleCode = T5.RoleCd

 UNION ALL
SELECT      T1.FinReference, T1.FinBranch, T1.FinType, T1.FinCcy, T1.ScheduleMethod, T1.ProfitDaysBasis, 
                  T1.FinStartDate, T1.NumberOfTerms, T1.CustID, T1.FinAmount, T1.MaturityDate, T1.FinRepaymentAmount, 
                  T1.FinIsActive,  T2.CcyEditField LovDescFinFormatter,  T4.CustCIF LovDescCustCIF,
                  T1.Blacklisted, T1.FeeChargeAmt, T1.GraceTerms,T1.AllowGrcPeriod,T1.GrcPeriodEndDate, T3.FinCategory lovDescProductCodeName, 
                  T3.FinIsAlwMD lovDescFinIsAlwMD, T3.FinIsAlwDifferment lovDescFinAlwDeferment,T1.Defferments, 
                  T1.NextRoleCode, T1.RecordStatus, T1.RecordType, T1.allowgrcpftrvw, T1.allowrepayrvw, T1.lastrepaydate, T1.lastrepaypftdate,
                  T1.AllowedDefRpyChange, T1.AvailedDefRpyChange, T1.RcdMaintainSts, T1.MigratedFinance, T1.ClosingStatus, T3.FinDivision LovDescFinDivision,  T1.RepayRateBasis ,
                   T1.TakafulRequired, T1.PptTakafulRequired,  T1.ManualSchedule , T1.TakeOverFinance  , T1.NextRolloverDate,
                    COALESCE(T5.RoleDesc, ${add.schema}FN_GET_ROLEDESC(T1.NextRoleCode)) LovDescRequestStage,T3.FinCategory, T3.TakafulPayType, T3.PropertyTakafulPayType, T1.DownPayment
            FROM           FinanceMain T1 INNER JOIN
                       RMTCurrencies T2 ON T1.FinCcy = T2.CcyCode INNER JOIN
                       RMTFinanceTypes T3 ON T1.FinType = T3.FinType INNER JOIN
                       Customers T4 ON T1.CustID = T4.CustID LEFT OUTER JOIN
              SecRoles T5 ON T1.NextRoleCode = T5.RoleCd
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM           FinanceMain_Temp
                            WHERE      (FinReference = T1.FinReference)))
   </createView>   </changeSet>
   
    <changeSet id="280" author="Prasad">
  <createView replaceIfExists="true" viewName="FinDetailsbyReference_IView">
  SELECT T1.CustID CustomerNo, T1.FinReference FinanceRef, T1.FinType FinanceType,
	   T1.FinStartDate StartDate, T1.NumberOfTerms TotalInstallments, T1.FinAmount FinanceAmount, T1.NextRepayDate DueDate,
		T1.LovDescCustFName CustomerName, T1.FinContractDate ContractDate, T1.DownPayment DownPaymentAmount, 
		T1.RepayFrq RepaymentFrequency, T1.RepayProfitRate ProfitRate, T1.RepayAccountId RepaymentAccount, 
		T1.RepayMargin MarginRate,
		T2.BranchCode  Branch, T3.CcyCode Currency,T4.FinCategory ProductType,
		(T5.NOInst-T5.NOPaidInst) RemainingInstallments,(T5.NSchdPft+T5.NSchdPri) InstallmentAmount,
		(T5.ODPrincipal+T5.ODProfit) PastDueAmount,
		(T5.TotalPftPaid+T5.TotalPriPaid) RepaidAmount, T5.LastRpySchDate LastInstallmentDate, 
		T5.LastRepayAmt LastInstallmentAmount,
		(T5.NSchdPft+T5.NSchdPri+T5.NSchdPftDue+T5.NSchdPriDue) OutstandingAmount,  T5.ODDays DaysPastDue,
		T6.CustStsDescription FinanceStatus,T7.DisbAmount DisbursedAmount,
	    COALESCE(T8.BRRate,0) BaseRate, (COALESCE(T8.BRRate,0) + T1.RepayMargin) AllInRate,T3.ccyeditfield
FROM FinanceMain_AView T1 INNER JOIN 
	 RMTBranches T2 ON T1.FinBranch = T2.BranchCode INNER JOIN 
	 RMTCurrencies T3 ON T1.FinCcy = T3.CcyCode INNER JOIN
	 RMTFinanceTypes T4 ON T1.FinType = T4.FinType INNER JOIN 
	 FinPftDetails T5 ON T1.FinReference = T5.FinReference INNER JOIN
	 BMTCustStatusCodes T6 ON T1.FinStatus = T6.CustStsCode INNER JOIN
	 FinDisbursementDetails_AView T7 ON T1.FinReference = T7.FinReference LEFT JOIN
	 RMTBaseRates T8 ON T1.RepayBaseRate = T8.BRType  
   </createView>   </changeSet>
    <changeSet id="281" author="Prasad">
  <createView replaceIfExists="true" viewName="FinGuarantorsExpsrDtls_View">
  Select FINReference,CUSTCIF,GuarantorCIFName,N'BANK CIF' IDtype,GuranteePercentage,COALESCE(CurrentExpoSurePriamry,0)CurrentExpoSurePriamry,
COALESCE(CurrentExpoSureSecondary,0)CurrentExpoSureSecondary,COALESCE(CurrentExpoSureGuarantor,0)CurrentExpoSureGuarantor,
Status,FinStatus WorstStatus,MobileNo FROM (
Select CUSTCIF,CustShrtName,CurrentExpoSurePriamry,CurrentExpoSureSecondary,Status FROM (
SELECT CustCIF,CustShrtName, SUM(CurrentExpoSureinBaseCCY)CurrentExpoSurePriamry,Status FROM	  JointGuarantorFinSummary_View T1 
GROUP BY  CustCIF,CustShrtName,Status ) T LEFT JOIN (SELECT JointCif,SUM(CurrentExpoSureinBaseCCY)CurrentExpoSureSecondary
FROM JointGuarantorFinSummary_View where JointCif is not null  GROUP BY  JointCif)T1 on T1.JointCif=T.CustCIF )T
LEFT JOIN (SELECT GuarantorCif,SUM(CurrentExpoSureinBaseCCY) CurrentExpoSureGuarantor 
FROM	JointGuarantorFinSummary_View T1  where GuarantorCif is not null GROUP BY  GuarantorCif ) T1 on 
T1.GuarantorCif=T.CustCIF INNER JOIN  FinStatusDetail_Aview T2 ON T2.CUSTID=T.CUSTCIF 
Inner Join  FinGuarantorsDetails_View T3 ON CUSTCIF = T3.GuarantorCIF Where  BankCustomer=1
UNION
select FINReference,GuarantorCIF,GuarantorCIFName,IdentityDesc IDtype,GuranteePercentage,0,0,0,null,null,MobileNo
from   FinGuarantorsDetails_View LEFT JOIN  BMTIdentityType ON GuarantorIDType=IdentityType  Where  BankCustomer!=1
   </createView>   </changeSet>
  <changeSet id="282" author="Prasad">
  <createView replaceIfExists="true" viewName="FinODCRecovery_View">
   <![CDATA[
   SELECT   T1.FinReference, T1.FinODSchdDate, T1.FinODFor, T1.MovementDate, T1.SeqNo, T1.ODDays, T1.FinCurODAmt, T1.FinCurODPri, T1.FinCurODPft, 
                      T1.PenaltyType, T1.PenaltyCalOn, T1.PenaltyAmtPerc, T1.Penalty, T1.MaxWaiver, T1.WaivedAmt, T1.PenaltyPaid, T1.PenaltyBal, T1.RcdCanDel, 
                      T3.CcyEditField lovDescFinFormatter, T4.CustCIF lovDescCustCIF, T4.CustShrtName lovDescCustShrtName
                      , T2.FinStartDate lovDescFinStartDate, T2.MaturityDate lovDescMaturityDate, T2.FinAmount lovDescFinAmount
                      , T2.FinAmount-T2.FinRepaymentAmount lovDescCurFinAmt
					  , (Select SUM(PrincipalSchd)+SUM(DefPrincipalSchd)-SUM(DefSchdPriPaid) From FinScheduleDetails where SchDate<=T1.FinODSchdDate AND FinReference=T1.FinReference) LovDescCurSchPriDue
					  , (Select SUM(ProfitSchd)+SUM(DefProfitSchd)-SUM(DefSchdPftPaid) from FinScheduleDetails where SchDate<=T1.FinODSchdDate AND FinReference=T1.FinReference) LovDescCurSchPftDue
					  , (Select SUM(Penalty) From FinODCRecovery Where FinReference=T1.FinReference) LovDescTotOvrDueChrg
					  , (Select SUM(WaivedAmt) From FinODCRecovery WHERE FinReference=T1.FinReference) LovDescTotOvrDueChrgWaived
					  , (Select SUM(PenaltyPaid) From FinODCRecovery WHERE FinReference=T1.FinReference) LovDescTotOvrDueChrgPaid
FROM          FinODCRecovery T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode INNER JOIN
                       Customers T4 on T4.CustID=T2.CustID
   ]]>
   </createView>   </changeSet>  
      <changeSet id="283" author="Prasad" dbms="mssql">
  <createView replaceIfExists="true" viewName="FInODDetails_View">
  SELECT     OD.FinReference, OD.FinODSchdDate, OD.FinODFor, OD.FinBranch, OD.FinType, OD.CustID, OD.FinODTillDate, OD.FinCurODAmt, OD.FinCurODPri, OD.FinCurODPft, 
                      OD.FinMaxODAmt, OD.FinMaxODPri, OD.FinMaxODPft, OD.GraceDays, OD.IncGraceDays, OD.FinCurODDays, OD.TotPenaltyAmt, OD.TotWaived, OD.TotPenaltyPaid,
                      OD.TotPftAmt,OD.TotPftPaid,OD.TotPftBal, 
                      OD.TotPenaltyBal, OD.FinLMdfDate, COALESCE(PR.ApplyODPenalty,0) ApplyODPenalty, COALESCE(PR.ODIncGrcDays,0) ODIncGrcDays, 
                      COALESCE(PR.ODChargeType,'') ODChargeType, COALESCE(PR.ODGraceDays,0) ODGraceDays, COALESCE(PR.ODChargeCalOn,'') ODChargeCalOn, COALESCE(PR.ODChargeAmtOrPerc,0) ODChargeAmtOrPerc, 
                      COALESCE(PR.ODAllowWaiver,0) ODAllowWaiver, COALESCE(PR.ODMaxWaiverPerc,0) ODMaxWaiverPerc
FROM         FinODDetails OD LEFT OUTER JOIN
             FinODPenalty_Latest_Rates_View PR ON OD.FinReference = PR.FinReference
   </createView>   </changeSet>
         <changeSet id="283" author="Prasad" dbms="oracle">
  <createView replaceIfExists="true" viewName="FInODDetails_View">
   SELECT     OD.FinReference, OD.FinODSchdDate, OD.FinODFor, OD.FinBranch, OD.FinType, OD.CustID, OD.FinODTillDate, OD.FinCurODAmt, OD.FinCurODPri, OD.FinCurODPft, 
                      OD.FinMaxODAmt, OD.FinMaxODPri, OD.FinMaxODPft, OD.GraceDays, OD.IncGraceDays, OD.FinCurODDays, OD.TotPenaltyAmt, OD.TotWaived, OD.TotPenaltyPaid,
                      OD.TotPftAmt,OD.TotPftPaid,OD.TotPftBal, COALESCE(cast(PR.ApplyODPenalty as Number(1)),0) ApplyODPenalty,
                      COALESCE(cast(PR.ODIncGrcDays as Number(1)),0) ODIncGrcDays, COALESCE(PR.ODChargeType,N'') ODChargeType,
                      OD.TotPenaltyBal, OD.FinLMdfDate,  COALESCE(cast(PR.ODIncGrcDays as Number(1)),0) ODGraceDays,
                      COALESCE(PR.ODChargeCalOn,N'') ODChargeCalOn,COALESCE(PR.ODChargeAmtOrPerc,0) ODChargeAmtOrPerc, 
                      COALESCE(cast(PR.ODAllowWaiver as Number(1)),0) ODAllowWaiver, COALESCE(PR.ODMaxWaiverPerc,0) ODMaxWaiverPerc
FROM         FinODDetails OD LEFT OUTER JOIN
             FinODPenalty_Latest_Rates_View PR ON OD.FinReference = PR.FinReference
   </createView>   </changeSet>
      <changeSet id="284" author="Prasad">
  <createView replaceIfExists="true" viewName="FinStatusDetail_AView">
  SELECT DISTINCT A.CustId, A.FinStatus, B.DueDays
FROM         FinStatusDetail A LEFT OUTER JOIN
                      BMTCustStatusCodes B ON A.FinStatus = B.CustStsCode
WHERE     ((CAST(A.CustId as Varchar(10)) + ',' + CAST(B.DueDays as Varchar(10))) IN
                          (SELECT     CAST(A.CustId as Varchar(10)) + ',' + CAST(MAX(B.DueDays) as Varchar(10)) AS Expr1
                            FROM          FinStatusDetail A LEFT OUTER JOIN
                                                   BMTCustStatusCodes B ON A.FinStatus = B.CustStsCode
                            GROUP BY A.CustId))
  
   </createView>   </changeSet>
   
      <changeSet id="285" author="Prasad">
  <createView replaceIfExists="true" viewName="IjarahFinance_View">
   <![CDATA[
   SELECT F.FinReference , F.FinType , F.FinCcy , F.ScheduleMethod , 
	   F.ProfitDaysBasis , C.CustCIF  CustCIF , F.FinBranch ,
	   FT.FinCategory ProductCode ,SchDate
FROM Financemain  F INNER JOIN RMTFinanceTypes FT ON F.FinType = FT.FinType
INNER JOIN Customers C ON C.CustID = F.CustID
	 INNER JOIN FinScheduleDetails S ON F.Finreference = S.Finreference
WHERE (ProfitSchd - SchdPftPaid > 0 OR PrincipalSchd- SchdPriPaid > 0 OR 
	   Defprofitschd-Defschdpftpaid> 0 Or Defprincipalschd-Defschdpripaid>0)
	   And Ft.Fincategory = 'IJARAH'
	   AND (BaseRate is not null or BaseRate !=' ')
   ]]>
   </createView>   </changeSet>
   <changeSet  author="Surekha" id="286">
		<sql>
			Update SeqSecRights set SeqNo = (select MAX(RightID) from SecRights);
			Update SeqSecGroupRights set SeqNo = (select MAX(GrpRightID) from SecGroupRights);
	
			INSERT INTO SecRights SELECT (select (SeqNo+1) from SeqSecRights),3,'BankBranchDialog_Address','BankBranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecRights SELECT (select (SeqNo+2) from SeqSecRights),3,'BankBranchDialog_Street','BankBranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecRights SELECT (select (SeqNo+3) from SeqSecRights),3,'BankBranchDialog_FlatNo','BankBranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+1) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER'),(select RightID from SecRights where RightName='BankBranchDialog_Address'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+2) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER'),(select RightID from SecRights where RightName='BankBranchDialog_Street'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+3) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER'),(select RightID from SecRights where RightName='BankBranchDialog_FlatNo'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
	
			Update SeqSecRights set SeqNo = (select MAX(RightID) from SecRights);
			Update SeqSecGroupRights set SeqNo = (select MAX(GrpRightID) from SecGroupRights);
		</sql>
	</changeSet>
	<changeSet id="287" author="Surekha">
		<addColumn tableName="BankBranches">
			<column name="Address" type="varchar(150)" />
			<column name="Street" type="varchar(50)" />
			<column name="FlatNo" type="varchar(50)" />
		</addColumn>
	</changeSet>
	<changeSet id="288" author="Surekha">
		<addColumn tableName="BankBranches_Temp">
			<column name="Address" type="varchar(150)" />
			<column name="Street" type="varchar(50)" />
			<column name="FlatNo" type="varchar(50)" />
		</addColumn>
	</changeSet>
	<changeSet id="289" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_View">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach,T1.Address,T1.Street,T1.FlatNo
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches_Temp T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
				UNION ALL
			
				SELECT		T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName	,T2.Ecs,t2.Dda,T2.Nach,T1.Address,T1.Street,T1.FlatNo	
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
				WHERE     NOT EXISTS (SELECT 1 FROM BankBranches_TEMP WHERE BankBranchID = T1.BankBranchID)
	 </createView>
	</changeSet>
	<changeSet id="290" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_AView">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach,T1.Address,T1.Street,T1.FlatNo
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
		</createView>
		</changeSet>
	<changeSet id="291" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_TView">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach,T1.Address,T1.Street,T1.FlatNo
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches_Temp T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
		</createView>
		</changeSet>
	<changeSet id="292" author="pruthvi">	
	<sql>	
update ReportList set 
Code = 'ErrorDetail' , Module = 'ErrorDetail' ,
FieldValues='errorCode,errorLanguage,errorSeverity,errorMessage,errorExtendedMessage'
where Code = 'ErrorDetails';
</sql>
</changeSet>
<changeSet id="293" author="surekha">
		<dropColumn columnName="Address" tableName="BankBranches" />
		<dropColumn columnName="Street" tableName="BankBranches" />
		<dropColumn columnName="FlatNo" tableName="BankBranches" />
	</changeSet>
<changeSet id="294" author="surekha">
		<dropColumn columnName="Address" tableName="BankBranches_Temp" />
		<dropColumn columnName="Street" tableName="BankBranches_Temp" />
		<dropColumn columnName="FlatNo" tableName="BankBranches_Temp" />
	</changeSet>
 <changeSet  author="Surekha" id="295">
		<sql>
			delete SecGroupRights where GrpID=(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER') and rightId=(select RightID from SecRights where RightName='BankBranchDialog_Address');
			delete SecGroupRights where GrpID=(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER') and rightId=(select RightID from SecRights where RightName='BankBranchDialog_Street');
			delete SecGroupRights where GrpID=(select GrpID from SecGroups where GrpCode='BANKBRANCH_MAKER') and rightId=(select RightID from SecRights where RightName='BankBranchDialog_FlatNo');
			delete SecRights where RightName='BankBranchDialog_Address';
			delete SecRights where RightName='BankBranchDialog_Street';
			delete SecRights where RightName='BankBranchDialog_FlatNo';
			
		</sql>
	</changeSet>
	<changeSet id="296" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_View">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches_Temp T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
				UNION ALL
			
				SELECT		T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName	,T2.Ecs,t2.Dda,T2.Nach	
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
				WHERE     NOT EXISTS (SELECT 1 FROM BankBranches_TEMP WHERE BankBranchID = T1.BankBranchID)
	 </createView>
	</changeSet>
	<changeSet id="297" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_AView">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
		</createView>
		</changeSet>
	<changeSet id="298" author="Surekha">
	 <createView replaceIfExists="true" viewName="BankBranches_TView">
			SELECT T1.BankBranchID, T1.BankCode, T1.BranchCode, T1.BranchDesc, T1.City, T1.MICR, T1.IFSC,T2.BankName,T2.Ecs,t2.Dda,T2.Nach
						, T1.Version , T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
				FROM    	BankBranches_Temp T1 INNER JOIN
			            BMTBankDetail T2  ON T1.BankCode=T2.BankCode 
		</createView>
		</changeSet>
	<changeSet id="299" author="pruthvi">
	<sql>
	update ReportList set Code='OverdraftType' where Code='OverDraft';

update ReportList set 
FieldLabels='label_FinanceTypeSearch_FinType.value,label_FinanceTypeSearch_FinTypeDesc.value,label_FinanceTypeSearch_FinCcy.value,label_FinanceTypeSearch_FinDaysCalType.value,listheader_FinAcType.label,label_FinanceTypeSearch_FinSchdMthd.value,label_FinanceTypeDialog_FInIsAlwGrace.value,label_FinanceTypeSearch_FinDivision.value,listheader_RecordStatus.label,listheader_RecordType.label,listheader_LovDescProductCodeDesc.label',
FieldValues='finType,finTypeDesc,finCcy,finDaysCalType,finAcType,finSchdMthd,fInIsAlwGrace,finDivision,recordStatus,recordType,lovDescProductCodeDesc',
FieldType='String,String,String,String,String,String,boolean,String,String,String,String'
where Code='OverdraftType';
	
	</sql>
	</changeSet>
	<changeSet id="300" author="pruthvi">
	<insert tableName="ReportList">
			<column name="Code">HolidayMaster</column>
			<column name="Module">HolidayMaster</column>
			<column name="FieldLabels">label_HolidayMasterSearch_HolidayCode.value,label_HolidayMasterSearch_HolidayYear.value,listheader_RecordStatus.label,listheader_RecordType.label</column>
			<column name="FieldValues">holidayCode,holidayYear,recordStatus,recordType</column>
			<column name="FieldType">String,BigDecimal,String,String</column>
			<column name="Addfields"></column>
			<column name="ReportFileName">ReportList04</column>
			<column name="ReportHeading">Calendar Details</column>
			<column name="ModuleType">Solution Factory</column>
			<column name="Version">0</column>
			<column name="LastMntBy">1000</column>
			<column name="LastMntOn"></column>
			<column name="RecordStatus">Approved</column>
			<column name="RoleCode"></column>
			<column name="NextRoleCode"></column>
			<column name="TaskId"></column>
			<column name="NextTaskId"></column>
			<column name="RecordType"></column>
			<column name="WorkflowId">0</column>
			<column name="FormatReq">0</column>
</insert>
		</changeSet>
		<changeSet id="301" author="pruthvi">	
		<sql>
		update ReportList set FieldType='String,String,String',ReportFileName='ReportList03'  where Code='PFSParameter';
		</sql>
		</changeSet>
		 <changeSet  author="Surekha" id="302">
		<sql>
			Update SeqSecRights set SeqNo = (select MAX(RightID) from SecRights);
			Update SeqSecGroupRights set SeqNo = (select MAX(GrpRightID) from SecGroupRights);
	
			INSERT INTO SecRights SELECT (select (SeqNo+1) from SeqSecRights),3,'BranchDialog_BranchAddrHNbr','BranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecRights SELECT (select (SeqNo+2) from SeqSecRights),3,'BranchDialog_BranchFlatNbr','BranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecRights SELECT (select (SeqNo+3) from SeqSecRights),3,'BranchDialog_BranchAddrStreet','BranchDialog',0,1000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+1) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BRANCH_MAKER'),(select RightID from SecRights where RightName='BranchDialog_BranchAddrHNbr'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+2) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BRANCH_MAKER'),(select RightID from SecRights where RightName='BranchDialog_BranchFlatNbr'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
			INSERT INTO SecGroupRights SELECT (select (SeqNo+3) from SeqSecGroupRights),(select GrpID from SecGroups where GrpCode='BRANCH_MAKER'),(select RightID from SecRights where RightName='BranchDialog_BranchAddrStreet'),1,0,10000,CURRENT_TIMESTAMP,'Approved','','',' ',' ',' ',0 FROM SeqSecGroupRights WHERE 0=0;
	
			Update SeqSecRights set SeqNo = (select MAX(RightID) from SecRights);
			Update SeqSecGroupRights set SeqNo = (select MAX(GrpRightID) from SecGroupRights);
		</sql>
	</changeSet>
	<changeSet id="303" author="Surekha">
		<addColumn tableName="RMTBranches">
			<column name="BranchAddrHNbr" type="varchar(150)" />
			<column name="BranchFlatNbr" type="varchar(50)" />
			<column name="BranchAddrStreet" type="varchar(50)" />
		</addColumn>
	</changeSet>
	<changeSet id="304" author="Surekha">
		<addColumn tableName="RMTBranches_Temp">
			<column name="BranchAddrHNbr" type="varchar(150)" />
			<column name="BranchFlatNbr" type="varchar(50)" />
			<column name="BranchAddrStreet" type="varchar(50)" />
		</addColumn>
	</changeSet>
	<changeSet id="305" author="Surekha">
	 <createView replaceIfExists="true" viewName="RMTBranches_View">
			SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region,T1.BankRefNo, T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName  
		     FROM RMTBranches_Temp T1
		           LEFT JOIN BMTCountries T2   ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3   ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4   ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5   ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				    LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
		   UNION ALL 
		   SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region, T1.BankRefNo,T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName 
		     FROM RMTBranches T1
		           LEFT JOIN BMTCountries T2 ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3 ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4 ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5 ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				   LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
		     WHERE NOT EXISTS ( SELECT 1 
		                        FROM RMTBranches_Temp 
		                          WHERE BranchCode = T1.BranchCode )
	 </createView>
	 </changeSet>
	 <changeSet id="306" author="Surekha">
	 <createView replaceIfExists="true" viewName="RMTBranches_AView">
			SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region,T1.BankRefNo, T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName  
		     FROM RMTBranches T1
		           LEFT JOIN BMTCountries T2   ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3   ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4   ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5   ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				    LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
			</createView>
		</changeSet>
		<changeSet id="307" author="Surekha">
	 <createView replaceIfExists="true" viewName="RMTBranches_View">
			SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region,T1.BankRefNo,T1.BranchAddrHNbr,T1.BranchFlatNbr,T1.BranchAddrStreet, T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName  
		     FROM RMTBranches_Temp T1
		           LEFT JOIN BMTCountries T2   ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3   ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4   ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5   ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				    LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
		   UNION ALL 
		   SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region, T1.BankRefNo,T1.BranchAddrHNbr,T1.BranchFlatNbr,T1.BranchAddrStreet,T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName 
		     FROM RMTBranches T1
		           LEFT JOIN BMTCountries T2 ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3 ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4 ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5 ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				   LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
		     WHERE NOT EXISTS ( SELECT 1 
		                        FROM RMTBranches_Temp 
		                          WHERE BranchCode = T1.BranchCode )
	 </createView>
	 </changeSet>
	 <changeSet id="308" author="Surekha">
	 <createView replaceIfExists="true" viewName="RMTBranches_AView">
			SELECT T1.BranchCode ,T1.BranchDesc ,T1.BranchAddrLine1 ,T1.BranchAddrLine2 ,T1.BranchPOBox , T1.BranchCity ,
		          T4.PCCityName lovDescBranchCityName  ,T1.BranchProvince ,T3.CPProvinceName lovDescBranchProvinceName  ,T1.BranchCountry ,T2.CountryDesc lovDescBranchCountryName  ,T1.BranchFax ,
		          T1.BranchTel ,T1.BranchSwiftBankCde ,T1.BranchSwiftCountry , T1.BranchSwiftLocCode ,T1.BranchSwiftBrnCde , T1.BranchSortCode ,T1.BranchIsActive ,T1.NewBranchCode , T6.BranchDesc NewBranchDesc,
		          T1.Version ,T1.LastMntBy ,T1.LastMntOn ,T1.RecordStatus , T1.RoleCode ,T1.NextRoleCode ,T1.TaskId , T1.NextTaskId , T1.RecordType ,T1.WorkflowId , T1.MiniBranch,T1.BranchType, T1.ParentBranch,
		          T1.Region,T1.BankRefNo,T1.BranchAddrHNbr,T1.BranchFlatNbr,T1.BranchAddrStreet, T7.BranchDesc ParentBranchDesc,T5.CountryDesc lovDescBranchSwiftCountryName  
		     FROM RMTBranches T1
		           LEFT JOIN BMTCountries T2   ON T1.BranchCountry = T2.CountryCode
		           LEFT JOIN RMTCountryVsProvince T3   ON T1.BranchCountry = T3.CPCountry
		            AND T1.BranchProvince = T3.CPProvince
		           LEFT JOIN RMTProvinceVsCity T4   ON T1.BranchCountry = T4.PCCountry
		            AND T1.BranchProvince = T4.PCProvince AND T1.BranchCity = T4.PCCity
		           LEFT JOIN BMTCountries T5   ON T1.BranchSwiftCountry = T5.CountryCode
				   LEFT JOIN RMTBranches T6   ON T1.NewBranchCode = T6.BranchCode
				    LEFT JOIN RMTBranches T7   ON T1.ParentBranch = T6.BranchCode
			</createView>
		</changeSet>
		<changeSet id="312" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitHeader_AView">	
		SELECT     T1.HeaderId, T1.RuleCode, T1.RuleValue, T8.QueryDesc ,T1.CustomerGroup,T3.CustGrpCode  , T3.CustGrpDesc GroupName, T3.CustGrpRO1, T1.CustomerId,T4.CustCIF, 
T4.CustShrtName, 
                      T4.CustFName ${call.concatenate} ' ' ${call.concatenate} T4.CustMName ${call.concatenate} ' ' ${call.concatenate} T4.CustLName CustFullName, T4.CustCoreBank, T4.CustSalutationCode, T4.CustDftBranch, 
                      T4.lovDescCustDftBranchName CustDftBranchName, T1.ResponsibleBranch, T5.BranchDesc ResponsibleBranchName, T1.LimitCcy,T7.CcyDesc,
COALESCE(T7.CcyEditField, 0 )CcyEditField, T1.LimitExpiryDate, 
                      T1.LimitRvwDate, T1.LimitStructureCode, T6.StructureName,T6.ShowLimitsIn, T1.LimitSetupRemarks, T1.Rebuild,T1.Active, T1.Version, T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1
.LastMntOn, T2.UsrLogin, 
                      T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.
WorkflowId
FROM          LimitHeader T1 INNER JOIN
                       LimitStructure T6 ON T1.LimitStructureCode = T6.StructureCode LEFT OUTER JOIN
                       RMTBranches T5 ON T1.ResponsibleBranch = T5.BranchCode LEFT OUTER JOIN
                       CustomerGroups T3 ON T1.CustomerGroup = T3.CustGrpID LEFT OUTER JOIN
                       Customers_AView T4 ON T1.CustomerId = T4.CustID LEFT OUTER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.LimitCcy= T7.CcyCode LEFT OUTER JOIN
					   LimitParams T8 ON T1.RuleCode = T8.QueryCode
		
				 </createView>   </changeSet>
				 		<changeSet id="313" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitHeader_TView">
				 SELECT     T1.HeaderId, T1.RuleCode, T1.RuleValue, T8.QueryDesc ,T1.CustomerGroup,T3.CustGrpCode  , T3.CustGrpDesc GroupName, T3.CustGrpRO1, T1.CustomerId,T4.CustCIF, 
T4.CustShrtName, 
                      T4.CustFName ${call.concatenate} ' ' ${call.concatenate} T4.CustMName ${call.concatenate} ' ' ${call.concatenate} T4.CustLName CustFullName, T4.CustCoreBank, T4.CustSalutationCode, T4.CustDftBranch, 
                      T4.lovDescCustDftBranchName CustDftBranchName, T1.ResponsibleBranch, T5.BranchDesc ResponsibleBranchName, T1.LimitCcy,T7.CcyDesc,
 COALESCE(T7.CcyEditField, 0 )CcyEditField,T1.LimitExpiryDate, 
                      T1.LimitRvwDate, T1.LimitStructureCode, T6.StructureName, T6.ShowLimitsIn,T1.LimitSetupRemarks,T1.Rebuild,T1.Active,  T1.Version, T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1
.LastMntOn, T2.UsrLogin, 
                      T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.
WorkflowId
FROM          LimitHeader_Temp T1 INNER JOIN
                       LimitStructure T6 ON T1.LimitStructureCode = T6.StructureCode LEFT OUTER JOIN
                       RMTBranches T5 ON T1.ResponsibleBranch = T5.BranchCode LEFT OUTER JOIN
                       CustomerGroups T3 ON T1.CustomerGroup = T3.CustGrpID LEFT OUTER JOIN
                       Customers_AView T4 ON T1.CustomerId = T4.CustID LEFT OUTER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.LimitCcy= T7.CcyCode LEFT OUTER JOIN
					   LimitParams T8 ON T1.RuleCode = T8.QueryCode
					   </createView>   </changeSet>
					   
				<changeSet id="314" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitHeader_View">		   
SELECT     T1.HeaderId, T1.RuleCode, T1.RuleValue,T8.QueryDesc , T1.CustomerGroup,T3.CustGrpCode  , T3.CustGrpDesc GroupName, T3.CustGrpRO1, T1.CustomerId, T4.CustCIF,
T4.CustShrtName, 
                      T4.CustFName ${call.concatenate} ' ' ${call.concatenate} T4.CustMName ${call.concatenate} ' ' ${call.concatenate} T4.CustLName CustFullName, T4.CustCoreBank, T4.CustSalutationCode, T4.CustDftBranch, 
                      T4.lovDescCustDftBranchName CustDftBranchName, T1.ResponsibleBranch, T5.BranchDesc ResponsibleBranchName, T1.LimitCcy,T7.CcyDesc,
COALESCE(T7.CcyEditField, 0 )CcyEditField, T1.LimitExpiryDate, 
                      T1.LimitRvwDate, T1.LimitStructureCode, T6.StructureName,T6.ShowLimitsIn, T1.LimitSetupRemarks,T1.Rebuild,T1.Active, T1.Version, T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1.
LastMntOn, T2.UsrLogin, 
                      T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.
WorkflowId
FROM          LimitHeader_Temp T1 INNER JOIN
                       LimitStructure T6 ON T1.LimitStructureCode = T6.StructureCode LEFT OUTER JOIN
                       RMTBranches T5 ON T1.ResponsibleBranch = T5.BranchCode LEFT OUTER JOIN
                       CustomerGroups T3 ON T1.CustomerGroup = T3.CustGrpID LEFT OUTER JOIN
                       Customers_AView T4 ON T1.CustomerId = T4.CustID  LEFT OUTER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.LimitCcy= T7.CcyCode LEFT OUTER JOIN
					   LimitParams T8 ON T1.RuleCode = T8.QueryCode

UNION ALL
SELECT     T1.HeaderId, T1.RuleCode, T1.RuleValue, T8.QueryDesc ,T1.CustomerGroup, T3.CustGrpCode  , T3.CustGrpDesc GroupName, T3.CustGrpRO1, T1.CustomerId,T4.CustCIF, 
T4.CustShrtName, 
                      T4.CustFName ${call.concatenate} ' ' ${call.concatenate} T4.CustMName ${call.concatenate} ' ' ${call.concatenate} T4.CustLName CustFullName, T4.CustCoreBank, T4.CustSalutationCode, T4.CustDftBranch, 
                      T4.lovDescCustDftBranchName CustDftBranchName, T1.ResponsibleBranch, T5.BranchDesc ResponsibleBranchName, T1.LimitCcy,T7.CcyDesc,
COALESCE(T7.CcyEditField, 0 )CcyEditField, T1.LimitExpiryDate, 
                      T1.LimitRvwDate, T1.LimitStructureCode, T6.StructureName, T6.ShowLimitsIn,T1.LimitSetupRemarks,T1.Rebuild,T1.Active,T1.Version, T1.CreatedBy, T1.CreatedOn, T1.LastMntBy, T1.
LastMntOn, T2.UsrLogin, 
                      T2.UsrFName, T2.UsrMName, T2.UsrLName, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.
WorkflowId
FROM          LimitHeader T1 INNER JOIN
                       LimitStructure T6 ON T1.LimitStructureCode = T6.StructureCode LEFT OUTER JOIN
                       RMTBranches T5 ON T1.ResponsibleBranch = T5.BranchCode LEFT OUTER JOIN
                       CustomerGroups T3 ON T1.CustomerGroup = T3.CustGrpID LEFT OUTER JOIN
                       Customers_AView T4 ON T1.CustomerId = T4.CustID LEFT OUTER JOIN
                       SecUsers T2 ON T1.LastMntBy = T2.UsrID LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.LimitCcy= T7.CcyCode LEFT OUTER JOIN
					   LimitParams T8 ON T1.RuleCode = T8.QueryCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LimitHeader_Temp
                            WHERE      HeaderId = T1.HeaderId)
								   </createView>   </changeSet>

								   <changeSet id="315" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LimitParams_View">
SELECT    T1.QueryId, T1.QueryCode, T1.QueryModule, T1.SQLQuery, T1.ActualBlock, T1.Active,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.QuerySubCode, T1.QueryDesc,
                      Case when QuerySubCode='C' Then 'Corporate' 
			when QuerySubCode='I'THEN 'Individual' ELSE QuerySubCode END lovDescQuerySubCode
FROM          LimitParams_Temp T1
UNION ALL
SELECT    T1.QueryId, T1.QueryCode, T1.QueryModule, T1.SQLQuery, T1.ActualBlock, T1.Active,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.QuerySubCode, T1.QueryDesc,
                      Case when QuerySubCode='C' Then 'Corporate' 
			when QuerySubCode='I'THEN 'Individual' ELSE QuerySubCode END lovDescQuerySubCode
FROM          LimitParams T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          LimitParams_TEMP
                            WHERE      QueryCode = T1.QueryCode AND QueryModule = T1.QueryModule AND QuerySubCode = T1.QuerySubCode)
								   </createView>   </changeSet>

<changeSet id="316" author="Chaitanya.ch">
<sql>
	Delete from SecGroupRights where GrpID in (select GrpID from secGroups where GrpCode = 'RTL_BRANCH_CSR') And 
	RightID In (select RightID from SecRights where RightName = 'FinanceMainDialog_finBranch');
	
	Insert into secGroupRights Values ((select max(GrpRightID)+1 from secGroupRights),
	(select GrpID from secGroups where GrpCode = 'RTL_BRANCH_CSR'),
	(select RightID from SecRights where RightName = 'FinanceMainDialog_finBranch'),'1', 0, 10000, null, '',null,null,null,null,null,0);
	
	Update seqSecGroupRights set seqno = (select max(GrpRightID)+1 from secGroupRights);
</sql>


</changeSet>

<changeSet id="317" author="Kesava">
<comment>Delete Rule Rights</comment>
<sql>

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_Rule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_Rule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewEligibilityRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_EligibilityRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_EligibilityRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_EligibilityRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_EligibilityRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEligibilityRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_EligibilityRules');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewFeeRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnFeeRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_FeeRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_FeeRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_FeeRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_FeeRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_FeeRules');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewScoreRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ScoringMetricRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ScoreRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ScoreRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ScoreRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ScoringMetricRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnScoreRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewSubHeadRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_SubHeadRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_SubHeadRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_SubHeadRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_SubHeadRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_SubHeadRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSubHeadRuleSave');

 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ProvisionRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ProvisionRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ProvisionRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_ProvisionRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ProvisionRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnProvisionRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RefundRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RefundRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RefundRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RefundRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RefundRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRefundRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewCheckRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_CheckRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_CheckRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_CheckRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_CheckRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_CheckRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnCheckRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewAgreementRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_AgreementRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_AgreementRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_AgreementRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_AgreementRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_AgreementRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnAgreementRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewDownpaymentRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_DownpaymentRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_DownpaymentRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_DownpaymentRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_DownpaymentRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_DownpaymentRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDownpaymentRuleSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewLimitDefRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnLimitDefRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_LimitDefRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_LimitDefRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_LimitDefRulePrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_LimitDefRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_LimitDefRule');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewIRLimitCheckFilter');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_IRLimitCheckFilter');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_IRLimitCheckFilterSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_IRLimitCheckFilterPrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_IRLimitCheckFilterSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_IRLimitCheckFilter');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilter');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnIRLimitCheckFilterSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RateRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnNew	');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesList_RateRulesFindDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesList_NewRateRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesList_PrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RateRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RateRulesDialog_rateRuleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RateRulesDialog_rateRuleDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RateRulesDialog_rateRuleType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RateRulesDialog_rateRuleValue');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RateRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RateRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesList_PrintList');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleList_RateRuleSearchDialog');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RateRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnRateRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RateRulesDialog_btnSave');

Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_InsuranceRuleList_NewInsuranceRule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_InsuranceRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_InsuranceRules');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleMaintain');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleSave');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleNew');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleEdit');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleDelete');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnInsuranceRuleDeletion');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_InsuranceRuleList_NewInsuranceRule');

	
	
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule');
 
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiver');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverPercentage');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_waiverDecider');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_addFeeCharges');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_groupId');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_calFeeModify');
Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeToFinance');

	
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'RULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'RULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'ELIGIBILITYRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'ELIGIBILITYRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'FEERULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'FEERULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'SCORERULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'SCORERULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'SUBHEADRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'SUBHEADRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'PROVISIONRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'PROVISIONRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'REFUNDRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'REFUNDRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'CHECKRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'CHECKRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'AGRRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'AGRRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'DOWNPAYMENTRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'DOWNPAYMENTRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'LIMITDEFRULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'LIMITDEFRULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'IRFILTER_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'IRFILTER_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'INTERESTRATERULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'INTERESTRATERULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'INSURANCERULE_MAKER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER');
Delete from SecRoleGroups where GrpID IN (Select GrpId from SecGroups WHERE GrpCode = 'INSURANCERULE_APPROVER') And RoleID IN (Select RoleID from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER');

	

Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEligibilityRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnFeeRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnScoreRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSubHeadRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnProvisionRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRefundRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnCheckRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnAgreementRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDownpaymentRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRule';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnLimitDefRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilter';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilterEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilterSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilterMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilterDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnIRLimitCheckFilterDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleDeletion';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnRateRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleSave';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleMaintain';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnInsuranceRuleDeletion';



Delete From SecRights Where RightName = 'RuleDialog_ruleCode';
Delete From SecRights Where RightName = 'RuleDialog_ruleCodeDesc';
Delete From SecRights Where RightName = 'RuleDialog_ruleEvent';
Delete From SecRights Where RightName = 'RuleDialog_feeType';
Delete From SecRights Where RightName = 'RuleDialog_allowDeviation';
Delete From SecRights Where RightName = 'RuleDialog_returnType';
Delete From SecRights Where RightName = 'RuleDialog_deviationType';
Delete From SecRights Where RightName = 'RuleDialog_seqOrder';
Delete From SecRights Where RightName = 'RuleDialog_revolving';
Delete From SecRights Where RightName = 'RuleDialog_active';
Delete From SecRights Where RightName = 'RuleDialog_ruleModule';
Delete From SecRights Where RightName = 'RuleDialog_sqlRule';


Delete From SecRights Where RightName = 'RuleDialog_waiver';
Delete From SecRights Where RightName = 'RuleDialog_waiverPercentage';
Delete From SecRights Where RightName = 'RuleDialog_waiverDecider';
Delete From SecRights Where RightName = 'RuleDialog_addFeeCharges';
Delete From SecRights Where RightName = 'RuleDialog_groupId';
Delete From SecRights Where RightName = 'RuleDialog_calFeeModify';
Delete From SecRights Where RightName = 'RuleDialog_feeToFinance';


Delete From SecRights Where RightName = 'button_RuleDialog_btnNew';
Delete From SecRights Where RightName = 'button_RuleDialog_btnEdit';
Delete From SecRights Where RightName = 'button_RuleDialog_btnDelete';
Delete From SecRights Where RightName = 'button_RuleDialog_btnSave';

	
Delete From SecGroups Where GrpCode = 'RULE_MAKER';
Delete From SecGroups Where GrpCode = 'RULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER';
Delete From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'FEERULE_MAKER';
Delete From SecGroups Where GrpCode = 'FEERULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'SCORERULE_MAKER';
Delete From SecGroups Where GrpCode = 'SCORERULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER';
Delete From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER';
Delete From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'REFUNDRULE_MAKER';
Delete From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'CHECKRULE_MAKER';
Delete From SecGroups Where GrpCode = 'CHECKRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'AGRRULE_MAKER';
Delete From SecGroups Where GrpCode = 'AGRRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER';
Delete From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER';
Delete From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'IRFILTER_MAKER';
Delete From SecGroups Where GrpCode = 'IRFILTER_APPROVER';

Delete From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER';
Delete From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER';
 
Delete From SecGroups Where GrpCode = 'INSURANCERULE_MAKER';
Delete From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER';

	
</sql>


</changeSet>

<changeSet id="318" author="Kesava">
<comment>Insert Rule Rights</comment>
<sql>
	INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_ruleCode', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_ruleCodeDesc', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_ruleEvent', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_feeType', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_allowDeviation', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_returnType', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_deviationType', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_seqOrder', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_revolving', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_active', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_ruleModule', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'RuleDialog_sqlRule', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);

INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_RuleDialog_btnNew', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_RuleDialog_btnEdit', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_RuleDialog_btnDelete', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_RuleDialog_btnSave', 'RuleDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);

	
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'RULE_MAKER','WF Maker for Rule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'RULE_APPROVER','WF Approver for Rule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'ELIGIBILITYRULE_MAKER','WF Eligibility Rule Maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'ELIGIBILITYRULE_APPROVER','WF Eligibility Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'FEERULE_MAKER','Fee Details Rule Maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'FEERULE_APPROVER','Fee Details Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'SCORERULE_MAKER','Score Metrics Rule maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'SCORERULE_APPROVER','Score Metric Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'SUBHEADRULE_MAKER','WF Maker for Sub Head Rule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'SUBHEADRULE_APPROVER','WF Approver for Sub Head Rule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'PROVISIONRULE_MAKER','Provision Rule maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'PROVISIONRULE_APPROVER','Provision Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'REFUNDRULE_MAKER','Refund Rule maker in Rules', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'REFUNDRULE_APPROVER','Refund Rule Approver in Rules', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'CHECKRULE_MAKER','Check List Rule Maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'CHECKRULE_APPROVER','Check List Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'AGRRULE_MAKER','Agreement List Rule Maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'AGRRULE_APPROVER','Agreement List Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'DOWNPAYMENTRULE_MAKER','Downpayment Rule Maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'DOWNPAYMENTRULE_APPROVER','Downpayment Rule Approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'LIMITDEFRULE_MAKER','WF Maker for Limit Definition Rule Details', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'LIMITDEFRULE_APPROVER','WF Approver for Limit Definition Rule Details', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'IRFILTER_MAKER','WF Maker for Limit Definition Rule Details', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'IRFILTER_APPROVER','WF Approver for Limit Definition Rule Details', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'INTERESTRATERULE_MAKER','Allow to Interest Rate rule maker', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'INTERESTRATERULE_APPROVER','Allow to Interest Rate rule approver', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
 
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'INSURANCERULE_MAKER','WF Maker for InsuranceRule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
INSERT INTO SecGroups Values ((Select MAX(GrpID)+1 From SecGroups), 'INSURANCERULE_APPROVER','WF Approver for InsuranceRule', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);

	
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_Rule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_Rule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewEligibilityRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_EligibilityRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_EligibilityRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0); 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewFeeRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_FeeRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_FeeRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);


INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewScoreRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ScoringMetricRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ScoringMetricRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewSubHeadRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_SubHeadRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_SubHeadRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ProvisionRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_ProvisionRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RefundRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RefundRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewCheckRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_CheckRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_CheckRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewAgreementRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_AgreementRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_AgreementRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0); 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewDownpaymentRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_DownpaymentRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_DownpaymentRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewLimitDefRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_LimitDefRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_LimitDefRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleList_NewIRLimitCheckFilter'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_IRLimitCheckFilter'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_IRLimitCheckFilter'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RateRulesList_NewRateRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RateRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_RateRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_InsuranceRuleList_NewInsuranceRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_InsuranceRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuCat_RulesFactory'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'menuItem_RulesFactory_InsuranceRules'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnNew'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnEdit'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnDelete'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_APPROVER'), (SELECT RightID FROM SecRights where RightName = 'button_RuleDialog_btnSave'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

	
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'RULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_deviationType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'ELIGIBILITYRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_feeType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'FEERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_seqOrder'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SCORERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'SUBHEADRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'PROVISIONRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'REFUNDRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'CHECKRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'AGRRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'DOWNPAYMENTRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_revolving'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'LIMITDEFRULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'IRFILTER_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_allowDeviation'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INTERESTRATERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCode'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleCodeDesc'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleEvent'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_returnType'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_active'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_ruleModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'INSURANCERULE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'RuleDialog_sqlRule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

	
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'RULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'RULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'ELIGIBILITYRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'ELIGIBILITYRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'FEERULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'FEERULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'SCORERULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'SCORERULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'SUBHEADRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'SUBHEADRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'PROVISIONRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'PROVISIONRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'REFUNDRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'REFUNDRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'CHECKRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'CHECKRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'AGRRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'AGRRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'DOWNPAYMENTRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'DOWNPAYMENTRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'LIMITDEFRULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'LIMITDEFRULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'IRFILTER_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'IRFILTER_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'INTERESTRATERULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'INTERESTRATERULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
 
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'INSURANCERULE_MAKER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_MAKER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
INSERT INTO SecRoleGroups values ((SELECT MAX(RoleGrpID) + 1 from SecRoleGroups), (Select MAX(GrpId) from SecGroups WHERE GrpCode = 'INSURANCERULE_APPROVER'), (Select MAX(RoleID) from SecRoles WHERE RoleCd = 'MSTGRP1_APPROVER'), 0, 1000, NULL, 'Approved',' ',' ',' ',' ',' ', 0);
	
</sql>
</changeSet>

<changeSet id="319" author="Kesava">
	<sql>
		update SeqSecRights set SeqNo=(select MAX(RightID)+1 from SecRights);
		update SeqSecGroups set SeqNo=(Select MAX(GrpID)+1 from SecGroups);
		update SeqSecGroupRights set seqno=(select max(GrpRightID)from	SecGroupRights);
		update SeqSecRoleGroups set seqno=(select MAX(RoleGrpID)+1 from	SecRoleGroups);
	</sql>
</changeSet>

<changeSet id="320" author="Satish">
<sql>
	update RBFieldDetails set RBFldName='FM_numOfMonths' where RBFldName = 'FM_tenor';
</sql>


</changeSet>

<changeSet author="Kesava" id="321">
	<update tableName="RBFieldDetails">
		<column name="RBSTFlds">static</column>
		<where>RBFldName = 'finRepayMethod'</where>
	</update>
	<sql>
		update RBFieldDetails set RBFldTableName=' ' where RBFldName ='finRepayMethod';
		update RBFieldDetails set ModuleCode=' ' where RBFldName ='finRepayMethod';
	</sql>
</changeSet>


<changeSet id="322" author="Durgaprasad.g">
		<createView replaceIfExists="true" viewName="CollateralThirdParty_View">

SELECT		T1.CollateralRef, T1.CustomerId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CustCIF , T2.CustShrtName,
			T2.CustCRCPR, T2.CustPassportNo, T2.CustNationality, T2.CustCtgCode  		
FROM    	CollateralThirdParty_Temp  T1
INNER JOIN Customers T2 ON T2.CustID = T1.CustomerId 
UNION ALL
SELECT		T1.CollateralRef, T1.CustomerId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CustCIF , T2.CustShrtName,
			T2.CustCRCPR, T2.CustPassportNo, T2.CustNationality, T2.CustCtgCode
FROM    	CollateralThirdParty  T1
INNER JOIN Customers T2 ON T2.CustID = T1.CustomerId  
WHERE     NOT EXISTS (SELECT 1 FROM CollateralThirdParty_Temp WHERE CollateralRef = T1.CollateralRef  
          AND CustomerId = T1.CustomerId)
</createView>   </changeSet>
<changeSet id="323" author="Madhu babu">	
<insert tableName="ErrorDetails">
			<column name="ErrorCode">EA051</column>
			<column name="ErrorLanguage">EN</column>
			<column name="ErrorSeverity">E</column>
			<column name="ErrorMessage">For this {0} {1} is Mandatory</column>
			<column name="ErrorExtendedMessage"></column>
			<column name="RecordStatus">Approved</column>
			<column name="RoleCode"></column>
			<column name="NextRoleCode"></column>
			<column name="TaskId"></column>
			<column name="NextTaskId"></column>
			<column name="RecordType"></column>
			<column name="WorkflowId">0</column>
			<column name="LastMntOn"></column>
			<column name="LastMntBy">1000</column>
			<column name="Version">1</column>
		</insert>	
		</changeSet>
		<changeSet id="324" author="Surekha">
		<addColumn tableName="SMTparameters">
			<column name="RecordStatus" type="varchar(50)" />
			<column name="RoleCode" type="varchar(100)" />
			<column name="NextRoleCode" type="varchar(200)" />
			<column name="TaskId" type="varchar(50)" />
			<column name="NextTaskId" type="varchar(200)" />
			<column name="RecordType" type="varchar(50)" />
			<column name="WorkflowId" type="bigint" />
		</addColumn>
	</changeSet>
	<changeSet author="Surekha" id="325">
	<createTable tableName="SMTparameters_Temp">
		<column name="SysParmCode" type="varchar(50)">
			<constraints primaryKey="true" nullable="false" />
		</column>
		<column name="SysParmDesc" type="varchar(200)">
			<constraints nullable="false" />
		</column>
		<column name="SysParmType" type="varchar(20)" />
		<column name="SysParmMaint" type="nchar(1)">
			<constraints nullable="false" />
		</column>
		<column name="SysParmValue" type="varchar(200)" />
		<column name="SysParmLength" type="int" />
		<column name="SysParmDec" type="int" />
		<column name="SysParmList" type="varchar(50)" />
		<column name="SysParmValdMod" type="varchar(50)" />
		<column name="SysParmDescription" type="varchar(500)" />
		<column name="Version" type="int" defaultValue="0" />
		<column name="LastMntBy" type="bigint" />
		<column name="LastMntOn" type="datetime" />
		<column name="RecordStatus" type="varchar(50)" />
		<column name="RoleCode" type="varchar(100)" />
		<column name="NextRoleCode" type="varchar(200)" />
		<column name="TaskId" type="varchar(50)" />
		<column name="NextTaskId" type="varchar(200)" />
		<column name="RecordType" type="varchar(50)" />
		<column name="WorkflowId" type="bigint" />
		</createTable>
		</changeSet>
<changeSet author="pruthvi" id="326">
<createView replaceIfExists="true" viewName="FinJointExposureDetails_View">
Select CUSTCIF,CustShrtName,Repay,RepaymentAccount,CurrentExpoSurePriamry,CurrentExpoSureSecondary,CurrentExpoSureGuarantor,Status,FinStatus FROM (
	    Select CUSTCIF,CustShrtName,Repay,RepaymentAccount,CurrentExpoSurePriamry,CurrentExpoSureSecondary,Status FROM (
	    SELECT	  CustCIF,CustShrtName, SUM(CurrentExpoSureinBaseCCY)CurrentExpoSurePriamry,Status
	    FROM	  JointGuarantorFinSummary_View T1 
	    GROUP BY  CustCIF,CustShrtName,Status )T LEFT JOIN (
	    SELECT	  JointCif,IncludeRepay Repay,RepayAccountId RepaymentAccount,SUM(CurrentExpoSureinBaseCCY)CurrentExpoSureSecondary
	    FROM	  JointGuarantorFinSummary_View where JointCif is not null
	    GROUP BY  JointCif,IncludeRepay,RepayAccountId)T1 on T1.JointCif=T.CustCIF )T LEFT JOIN (
	    SELECT	  GuarantorCif,SUM(CurrentExpoSureinBaseCCY) CurrentExpoSureGuarantor
	    FROM	  JointGuarantorFinSummary_View T1  where GuarantorCif is not null
	    GROUP BY  GuarantorCif ) T1 on T1.GuarantorCif=T.CustCIF LEFT JOIN 
	    FinStatusDetail_Aview T2 ON CAST(T2.Custid as VARCHAR(20))=T.CUSTCIF
	    </createView>
</changeSet>
	<changeSet author="pruthvi" id="330">
<modifyDataType tableName="SMTparameters_Temp" columnName="VERSION"
			newDataType="bigint" />
			</changeSet>
<changeSet id="327.1" author="surekha">
<modifyDataType tableName="SMTparameters_Temp" columnName="SysParmValue" newDataType="nvarchar(200)"/>
</changeSet>
<changeSet author="Surekha" id="327">
		<createView replaceIfExists="true" viewName="SMTparameters_View">
				SELECT SysParmCode, SysParmValdMod, SysParmList, SysParmDec, SysParmLength, SysParmValue, SysParmMaint, SysParmType, 
				        SysParmDesc, SysParmDescription,LastMntOn, LastMntBy, Version,RecordStatus,RoleCode,NextRoleCode,TaskId,
						NextTaskId,RecordType,WorkflowId 
				FROM     SMTparameters_Temp 
				UNION ALL
				SELECT   SysParmCode, SysParmValdMod, SysParmList, SysParmDec, SysParmLength, SysParmValue, SysParmMaint, SysParmType, 
				         SysParmDesc, SysParmDescription,LastMntOn, LastMntBy, Version,RecordStatus,RoleCode,NextRoleCode,TaskId,
						 NextTaskId,RecordType,WorkflowId 
				FROM         SMTparameters
				WHERE     NOT EXISTS
			    (SELECT     1
                            FROM          SMTparameters_Temp
                            WHERE      SysParmCode = SMTparameters.SysParmCode)

		</createView>
</changeSet>
	<changeSet author="Surekha" id="328">
		<createView replaceIfExists="true" viewName="SMTparameters_AView">
				SELECT SysParmCode, SysParmValdMod, SysParmList, SysParmDec, SysParmLength, SysParmValue, SysParmMaint, SysParmType, 
				        SysParmDesc, SysParmDescription,LastMntOn, LastMntBy, Version,RecordStatus,RoleCode,NextRoleCode,TaskId,
						NextTaskId,RecordType,WorkflowId 
				FROM     SMTparameters

		</createView>
</changeSet>
<changeSet id="329" author="surekha">
<sql>
update SMTparameters set RecordStatus='Approved',RoleCode='',NextRoleCode='',TaskId='',NextTaskId='',RecordType='',WorkflowId=0;
</sql>
</changeSet>
	<changeSet author="pruthvi" id="331">
	<sql>
update ReportList set reportheading='Overdraft Loan Type' where code='OverdraftType';
</sql>
</changeSet>
 <changeSet id="332" author="Kesava">
	<sql>
		update SeqSecRights set SeqNo=(select MAX(RightID)+1 from SecRights);
		update SeqSecGroupRights set seqno=(select max(GrpRightID)+1 from	SecGroupRights);

		Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'MAILTEMPLATE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'MailTemplateDialog_templateFor');
		Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'MAILTEMPLATE_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'MailTemplateDialog_templateModule');

		Delete From SecRights Where RightName = 'MailTemplateDialog_templateFor';
		Delete From SecRights Where RightName = 'MailTemplateDialog_templateModule';

		INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'MailTemplateDialog_templateFor', 'MailTemplateDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
		INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 3, 'MailTemplateDialog_templateModule', 'MailTemplateDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);

		INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'MAILTEMPLATE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'MailTemplateDialog_templateFor'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
		INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'MAILTEMPLATE_MAKER'), (SELECT RightID FROM SecRights where RightName = 'MailTemplateDialog_templateModule'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

		update SeqSecRights set SeqNo=(select MAX(RightID)+1 from SecRights);
		update SeqSecGroupRights set seqno=(select max(GrpRightID)+1 from	SecGroupRights);
	</sql>
</changeSet>	

<changeSet id="333" author="Kesava">
	<sql>
		update SeqSecRights set SeqNo=(select MAX(RightID)+1 from SecRights);
		update SeqSecGroupRights set seqno=(select max(GrpRightID)+1 from	SecGroupRights);

		Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'QUERY_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_QueryDialog_btnValidate');
		Delete From SecGroupRights where GrpId IN (Select GrpId  From SecGroups Where GrpCode = 'QUERY_MAKER') And RightID IN (SELECT RightID FROM SecRights where RightName = 'button_QueryDialog_btnSimulate');

		Delete From SecRights Where RightName = 'button_QueryDialog_btnValidate';
		Delete From SecRights Where RightName = 'button_QueryDialog_btnSimulate';

		INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_QueryDialog_btnValidate', 'QueryDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);
		INSERT INTO SecRights Values ((Select MAX(RightID)+1 From SecRights), 2, 'button_QueryDialog_btnSimulate', 'QueryDialog', 1, 1000, NULL, 'Approved',' ',' ',' ',' ',' ',0);

		INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'QUERY_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_QueryDialog_btnValidate'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);
		INSERT INTO SecGroupRights values((SELECT MAX(GrpRightID) + 1 From SecGroupRights), (Select GrpId  From SecGroups Where GrpCode = 'QUERY_MAKER'), (SELECT RightID FROM SecRights where RightName = 'button_QueryDialog_btnSimulate'), 1, 1, 1000, NULL,'Approved',' ',' ',' ',' ',' ', 0);

		update SeqSecRights set SeqNo=(select MAX(RightID)+1 from SecRights);
		update SeqSecGroupRights set seqno=(select max(GrpRightID)+1 from	SecGroupRights);
	</sql>
</changeSet>	
<changeSet id="334" author="Madhubabu">
		<addColumn tableName="fininsurances_temp">
			<column name="PolicyType" type="nvarchar(8)" />
		</addColumn>
	</changeSet>

	<changeSet id="335" author="Madhubabu">
		<addColumn tableName="fininsurances">
			<column name="PolicyType" type="nvarchar(8)" />
		</addColumn>
	</changeSet>
	<changeSet id="336" author="Madhubabu">
		<addColumn tableName="Wiffininsurances_temp">
			<column name="PolicyType" type="nvarchar(8)" />
		</addColumn>
	</changeSet>

	<changeSet id="337" author="Madhubabu">
		<addColumn tableName="Wiffininsurances">
			<column name="PolicyType" type="nvarchar(8)" />
		</addColumn>
	</changeSet>
	<changeSet id="338" author="Madhubabu">
		<createView viewName="FinInsurances_View"
			replaceIfExists="true">
		SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
   T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,
   T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
   FROM      FinInsurances_Temp T1 INNER JOIN
             InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
             TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
             InsurancePolicy T4 ON T1.PolicyType=T4.PolicyCode
			 
UNION ALL

  SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
  T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
  FROM         FinInsurances T1 INNER JOIN
               InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
               TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
               InsurancePolicy T4 ON T1.PolicyType=T4.PolicyCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM      FinInsurances_Temp
                            WHERE     Reference= T1.Reference AND  Module = T1.Module
							AND       InsuranceType=T1.InsuranceType AND InsReference=T1.InsReference)
</createView>
	</changeSet>
	
	<changeSet id="339" author="Kesava">
		<sql>
			Delete from RBFieldDetails where RBMODULE = 'FEES' and RBEVENT = 'ADDDBSP';
	
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ft_product', 'Product','nvarchar',8, 0,0, 'Product','static,global,dbvalue', 'Product');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ft_finCategory', 'Loan Category','nvarchar',8, 0,0, '','static,global', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ft_finCcy', 'Loan Type Currency','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ft_finDivision', 'Loan Division','nvarchar',8, 0,0, '','static,global', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custCtgCode', 'Customer Category','nvarchar',8, 0,0, 'CustomerCategory','static,global,dbvalue', 'CustomerCategory');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custTypeCode', 'Customer Type Code','nvarchar',8, 0,0, 'CustomerType','static,global,dbvalue', 'CustomerType');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custShrtName', 'Customer Short Name','nvarchar',200, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custDftBranch', 'Customer Default Branch','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custGenderCode', 'Customer Gender Code','nvarchar',8, 0,0, 'Gender','static,global,dbvalue', 'Gender');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custCOB', 'Customer Country of Birth','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custIsStaff', 'Customer is Staff','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custIsMinor', 'Customer is Minor','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custIsBlackListed', 'Customre is Black Listed','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custIndustry', 'Customer Industry ','nvarchar',8, 0,0, 'Industry','static,global,dbvalue', 'Industry');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custSector', 'Customer Sector ','nvarchar',8, 0,0, 'Sector','static,global,dbvalue', 'Sector');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custSubSector', 'Customer Sub Sector ','nvarchar',8, 0,0, 'SubSector','static,global,dbvalue', 'SubSector');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custTotalIncome', 'Customer Total Income ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custTotalExpense', 'Customer Total Expense ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custMaritalSts', 'Customer Marital Status ','nvarchar',15, 0,0, 'MaritalStatusCode','static,global,dbvalue', 'MaritalStatusCode');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custSegment', 'Customer Segment ','nvarchar',8, 0,0, 'Segment','static,global,dbvalue', 'Segment');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custSubSegment', 'Customer Sub Segment ','nvarchar',8, 0,0, 'SubSegment','static,global,dbvalue', 'SubSegment');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custParentCountry', 'Customer Parent Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custResdCountry', 'Customer Residence Country','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custRiskCountry', 'Customer Risk Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_custNationality', 'Customer Nationality ','nchar',2, 0,0, 'NationalityCode','static,global,dbvalue', 'NationalityCode');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','ct_salariedCustomer', 'Customer Salaried ','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finType', 'Loan Type ','nvarchar',8, 0,0, 'FinanceType','static,global,dbvalue', 'FinanceType');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finCcy', 'Loan Currency ','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finBranch', 'Loan Branch ','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finAmount', 'Loan Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_downPayment', 'Downpayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_downPayBank', 'Downpayment Amount to Bank  ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_downPaySupl', 'Downpayment Amount to Supplier ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finPurpose', 'Loan Purpose ','nvarchar',8, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_finRepayMethod', 'Loan Repayment Method','nvarchar',8, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_stepFinance', 'Step Loan ','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_numberOfTerms', 'Number of Terms ','int',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_reqRepayAmount', 'Repayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_repayProfitRate', 'Repayment profit Rate ','decimal',13, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSP','fm_scheduleMethod', 'Schedule Method','nvarchar',8, 0,0, '','static', '');
			
			Delete from RBFieldDetails where RBMODULE = 'FEES' and RBEVENT = 'ADDDBSF';
			
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ft_product', 'Product','nvarchar',8, 0,0, 'Product','static,global,dbvalue', 'Product');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ft_finCategory', 'Loan Category','nvarchar',8, 0,0, '','static,global', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ft_finCcy', 'Loan Type Currency','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ft_finDivision', 'Loan Division','nvarchar',8, 0,0, '','static,global', '');	
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custCtgCode', 'Customer Category','nvarchar',8, 0,0, 'CustomerCategory','static,global,dbvalue', 'CustomerCategory');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custTypeCode', 'Customer Type Code','nvarchar',8, 0,0, 'CustomerType','static,global,dbvalue', 'CustomerType');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custShrtName', 'Customer Short Name','nvarchar',200, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custDftBranch', 'Customer Default Branch','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custGenderCode', 'Customer Gender Code','nvarchar',8, 0,0, 'Gender','static,global,dbvalue', 'Gender');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custCOB', 'Customer Country of Birth','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custIsStaff', 'Customer is Staff','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custIsMinor', 'Customer is Minor','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custIsBlackListed', 'Customre is Black Listed','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custIndustry', 'Customer Industry ','nvarchar',8, 0,0, 'Industry','static,global,dbvalue', 'Industry');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custSector', 'Customer Sector ','nvarchar',8, 0,0, 'Sector','static,global,dbvalue', 'Sector');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custSubSector', 'Customer Sub Sector ','nvarchar',8, 0,0, 'SubSector','static,global,dbvalue', 'SubSector');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custTotalIncome', 'Customer Total Income ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custTotalExpense', 'Customer Total Expense ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custMaritalSts', 'Customer Marital Status ','nvarchar',15, 0,0, 'MaritalStatusCode','static,global,dbvalue', 'MaritalStatusCode');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custSegment', 'Customer Segment ','nvarchar',8, 0,0, 'Segment','static,global,dbvalue', 'Segment');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custSubSegment', 'Customer Sub Segment ','nvarchar',8, 0,0, 'SubSegment','static,global,dbvalue', 'SubSegment');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custParentCountry', 'Customer Parent Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custResdCountry', 'Customer Residence Country','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custRiskCountry', 'Customer Risk Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_custNationality', 'Customer Nationality ','nchar',2, 0,0, 'NationalityCode','static,global,dbvalue', 'NationalityCode');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','ct_salariedCustomer', 'Customer Salaried ','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finType', 'Loan Type ','nvarchar',8, 0,0, 'FinanceType','static,global,dbvalue', 'FinanceType');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finCcy', 'Loan Currency ','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finBranch', 'Loan Branch ','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finAmount', 'Loan Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_downPayment', 'Downpayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_downPayBank', 'Downpayment Amount to Bank  ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_downPaySupl', 'Downpayment Amount to Supplier ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finPurpose', 'Loan Purpose ','nvarchar',8, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_finRepayMethod', 'Loan Repayment Method','nvarchar',8, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_stepFinance', 'Step Loan ','nchar',1, 0,0, '','static', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_numberOfTerms', 'Number of Terms ','int',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_reqRepayAmount', 'Repayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_repayProfitRate', 'Repayment profit Rate ','decimal',13, 0,0, '','static,global,calvalue', '');
			Insert into RBFieldDetails Values ('Fees','ADDDBSF','fm_scheduleMethod', 'Schedule Method','nvarchar',8, 0,0, '','static', '');
		</sql>
	</changeSet>
	
	<changeSet id="340" author="Madhubabu">
		<createView viewName="WIFFinInsurances_View"
			replaceIfExists="true">
		SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
   T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,
   T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
   FROM      FinInsurances_Temp T1 INNER JOIN
             InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
             TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
             InsurancePolicy T4 ON T1.PolicyType=T4.PolicyCode
			 
UNION ALL

  SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
  T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
  FROM         FinInsurances T1 INNER JOIN
               InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
               TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
               InsurancePolicy T4 ON T1.PolicyType=T4.PolicyCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM      FinInsurances_Temp
                            WHERE     Reference= T1.Reference AND  Module = T1.Module
							AND       InsuranceType=T1.InsuranceType AND InsReference=T1.InsReference)
</createView>
	</changeSet>	
<changeSet id="342" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_AAView">
SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.AggName lovDescNamelov, 
					  T3.AggImage lovDescAggImage, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, 
					  T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
					  T3.AggCode lovDescCodelov, T3.AggDesc lovDescRefDesc, T3.AggReportName lovDescAggReportName, T3.AggReportPath lovDescAggReportPath, 
					  T1.OverRide, T1.OverRideValue, T3.AgrRule lovDescAggRuleName, T3.Aggtype, T1.FinEvent, T1.AlertType,T3.ModuleType,T3.AllowMultiple
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode INNER JOIN
					   BMTAggrementDef T3 ON T1.FinRefId = T3.AggId AND T1.FinRefType = '2'
								   </createView>   </changeSet>
			<changeSet id="343" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ABDView">								   
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId,Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc) lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1  LEFT JOIN
						   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
						   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
						   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '9'
 </createView>   </changeSet>
 	<changeSet id="344" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ACDView">	
 SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode INNER JOIN
                       DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '11'
 </createView>   </changeSet>
 
  	<changeSet id="345" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ACSGView">	
SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.IsOverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, 
                      T1.OverRide, T1.OverRideValue, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '7' AND T3.CategoryType = 'CORP'	
	 </createView>   </changeSet>
	 
	  	<changeSet id="346" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ACView">	
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, 
                      T3.AccountSetCodeName lovDescRefDesc, T3.EventCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       RMTAccountingSet T3 ON T1.FinRefId = T3.AccountSetid AND T1.FinRefType = '5'		
			 </createView>   </changeSet>
	
		  	<changeSet id="347" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_AEView">	
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.RuleCode lovDescRefDesc, 
                      T3.RuleCode lovDescCodelov, T3.RuleCodeDesc lovDescNamelov, T3.SQLRule lovDescElgRuleValue, T2.FinCcy lovDescFinCcyCode, 
                      T2.FinCategory lovDescProductCodeName, T3.ReturnType lovDescRuleReturnType, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       Rules T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '3'		
					 </createView>   </changeSet>
	
			  	<changeSet id="348" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_AFDView">	
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '8'		
		</createView>   </changeSet>
		
		
					  	<changeSet id="349" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ALDView">
	SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.LimitDesc lovDescRefDesc, 
                      T3.LimitCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       LimitCodeDetail T3 ON T1.FinRefId = T3.LimitId AND T1.FinRefType = '12'	
			</createView>   </changeSet>
	
	
			  	<changeSet id="350" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_APCView">
	SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '10'	
		</createView>   </changeSet>
		
		
				  	<changeSet id="351" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ARCView">
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.ModuleDesc lovDescRefDesc, 
                      T3.ModuleName lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       ProcessEditorDetail T3 ON T1.FinRefId = T3.ModuleId AND T1.FinRefType = '14'		
		</createView>   </changeSet>
		
		
		  	<changeSet id="352" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ASGView">
	SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.IsOverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, 
                      T1.OverRide, T1.OverRideValue, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '4' AND T3.CategoryType = 'RETAIL'	
		</createView>   </changeSet>
		
		
		 	<changeSet id="353" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_ATView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, 
                      T3.RuleCodeDesc lovDescRefDesc, T3.RuleCode lovDescNamelov, T3.TemplateType lovDescCodelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       Notifications T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '6'
		</createView>   </changeSet>
		
		 	<changeSet id="354" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_AView">
		SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T3.CollateralDesc,T4.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, 
                      T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.MandInputInStage, T1.AllowInputInStage, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T3 ON T1.FinType = T3.CollateralType  LEFT JOIN
					   VasStructure T4 ON T1.FinType = T4.ProductCode 

		</createView>   </changeSet>
		
		 	<changeSet id="355" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TATView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, 
                      T3.TatNotificationDesc lovDescRefDesc, T3.TatNotificationCode lovDescNamelov, T1.FinEvent, T1.AlertType
FROM          LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  INNER JOIN
                       TATNotificationCodes T3 ON T1.FinRefId = T3.TatNotificationId AND T1.FinRefType = '13'
		</createView>   </changeSet>
		
		
		 	<changeSet id="356" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TAView">
		SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.AggName lovDescNamelov, 
					  T3.AggImage lovDescAggImage, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, 
					  T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
					  T3.AggCode lovDescCodelov, T3.AggDesc lovDescRefDesc, T3.AggReportName lovDescAggReportName, T3.AggReportPath lovDescAggReportPath, T1.OverRide, 
					  T1.OverRideValue, T3.AgrRule lovDescAggRuleName, T3.Aggtype AggType, T1.FinEvent,T1.AlertType,T3.ModuleType,T3.AllowMultiple
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
					  BMTAggrementDef T3 ON T1.FinRefId = T3.AggId AND T1.FinRefType = '2'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc) lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.AggName lovDescNamelov, 
					  T3.AggImage lovDescAggImage, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, 
					  T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, 
					  T3.AggCode lovDescCodelov, T3.AggDesc lovDescRefDesc, T3.AggReportName lovDescAggReportName, T3.AggReportPath lovDescAggReportPath, T1.OverRide, 
					  T1.OverRideValue, T3.AgrRule lovDescAggRuleName, T3.Aggtype AggType, T1.FinEvent,T1.AlertType,T3.ModuleType,T3.AllowMultiple
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
					  BMTAggrementDef T3 ON T1.FinRefId = T3.AggId AND T1.FinRefType = '2'
WHERE     (NOT EXISTS
						  (SELECT     1 Expr1
							FROM          LMTFinRefDetail_Temp
							WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		
		 	<changeSet id="357" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TBDView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '9'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '9'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="358" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TCDView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '11'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '11'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="359" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TCSGView">
		SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.Isoverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, T1.OverRide, 
                      T1.OverRideValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '7' AND T3.CategoryType = 'CORP'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.Isoverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, T1.OverRide, 
                      T1.OverRideValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '7' AND T3.CategoryType = 'CORP'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="360" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TCView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, 
                      T3.AccountSetCodeName lovDescRefDesc, T3.EventCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTAccountingSet T3 ON T1.FinRefId = T3.AccountSetid AND T1.FinRefType = '5'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, 
                      T3.AccountSetCodeName lovDescRefDesc, T3.EventCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTAccountingSet T3 ON T1.FinRefId = T3.AccountSetid AND T1.FinRefType = '5'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		
		 	<changeSet id="361" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TEView">
	SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.RuleCode lovDescNamelov, 
                      T3.RuleCode lovDescCodelov, T3.RuleCodeDesc lovDescRefDesc, T3.SQLRule lovDescElgRuleValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      Rules T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '3'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.RuleCode lovDescNamelov, 
                      T3.RuleCode lovDescCodelov, T3.RuleCodeDesc lovDescRefDesc, T3.SQLRule lovDescElgRuleValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      Rules T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '3'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))	
		</createView>   </changeSet>
		
		 	<changeSet id="362" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TFDView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '8'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '8'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="363" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TPCView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '10'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.QueryDesc lovDescRefDesc, 
                      T3.QueryCode lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      DedupParams T3 ON T1.FinRefId = T3.QueryId AND T1.FinRefType = '10'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="364" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TRCView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.ModuleDesc lovDescRefDesc, 
                      T3.ModuleName lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      ProcessEditorDetail T3 ON T1.FinRefId = T3.ModuleId AND T1.FinRefType = '14'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.ModuleDesc lovDescRefDesc, 
                      T3.ModuleName lovDescNamelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      ProcessEditorDetail T3 ON T1.FinRefId = T3.ModuleId AND T1.FinRefType = '14'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="365" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TSGView">
	SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.Isoverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, T1.OverRide, 
                      T1.OverRideValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '4' AND T3.CategoryType = 'RETAIL'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.FinRefType, T1.FinRefId, T3.ScoreGroupCode lovDescRefDesc, T1.IsActive, 
                      T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, 
                      T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T3.ScoreGroupName lovDescNamelov, 
                      T3.ScoreGroupCode lovDescCodelov, T3.MinScore lovDescminScore, T3.Isoverride lovDescisoverride, T3.OverrideScore lovDescoverrideScore, T1.OverRide, 
                      T1.OverRideValue, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      RMTScoringGroup T3 ON T1.FinRefId = T3.ScoreGroupId AND T1.FinRefType = '4' AND T3.CategoryType = 'RETAIL'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))	
		</createView>   </changeSet>
		
		 	<changeSet id="366" author="Pruthvi">
		<createView replaceIfExists="true" viewName="LMTFinRefDetail_TTView">
		SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.RuleCodeDesc lovDescRefDesc, 
                      T3.RuleCode lovDescNamelov, T3.TemplateType lovDescCodelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail_Temp T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      Notifications T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '6'
UNION ALL
SELECT     T1.FinRefDetailId, T1.FinType, T1.FinRefType, T1.FinRefId, T1.IsActive, T1.ShowInStage, T1.MandInputInStage, T1.AllowInputInStage, T1.AllowDeviation, 
                      T1.AllowWaiver, T1.AllowPostpone, T1.AllowExpire, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, Coalesce(T2.FinTypeDesc, T4.CollateralDesc,T5.ProductDesc)  lovDescFinTypeDescName, T1.OverRide, T1.OverRideValue, T3.RuleCodeDesc lovDescRefDesc, 
                      T3.RuleCode lovDescNamelov, T3.TemplateType lovDescCodelov, T1.FinEvent,T1.AlertType
FROM         LMTFinRefDetail T1 LEFT JOIN
					   RMTFinanceTypes T2 ON T1.FinType = T2.FinType  LEFT JOIN
					   CollateralStructure T4 ON T1.FinType = T4.CollateralType  LEFT JOIN
					   VasStructure T5 ON T1.FinType = T5.ProductCode  JOIN
                      Notifications T3 ON T1.FinRefId = T3.RuleId AND T1.FinRefType = '6'
WHERE     (NOT EXISTS
                          (SELECT     1 Expr1
                            FROM          LMTFinRefDetail_Temp
                            WHERE      (FinRefDetailId = T1.FinRefDetailId)))
		</createView>   </changeSet>
		
		 	<changeSet id="367" author="Pruthvi">
		<createView replaceIfExists="true" viewName="PrimaryJointFinSummary_View">
		SELECT	T3.CustCIF,T6.FinTypeDesc ${call.concatenate} ' (' ${call.concatenate} T1.FinType ${call.concatenate} ')' FinType,T1.FinReference,T1.FinStartDate,
					T1.MaturityDate,T1.Finccy FinCCY,
					${add.schema}UDF_ConvertCurrency((TotalPftSchd+TotalPriPaid+TotalPriBal),T1.FinCCY,(Select SysParmValue from SMTParameters where SysParmCode='APP_DFT_CURR'))FinanceAmtinBaseCCY,
					${add.schema}UDF_ConvertCurrency(TotalPriBal,T1.FinCCY,(Select SysParmValue from SMTParameters where SysParmCode='APP_DFT_CURR'))CurrentExpoSureinBaseCCY,
					PastdueDays,${add.schema}UDF_ConvertCurrency((OverdueAmt),T1.FinCCY,(Select SysParmValue from SMTParameters where SysParmCode='APP_DFT_CURR'))OverdueAmtBaseCCY,
					(CASE WHEN PastdueDays is null then 'FALSE' ELSE 'TRUE' END) Overdue
			FROM	FinanceMain T1 INNER JOIN
					FinPftDetails T2 ON T1.FinReference = T2.FinReference INNER JOIN
					Customers T3 ON T2.CustID = T3.CustID INNER JOIN
					RMTCurrencies T5 on T1.FinCCY=CCYCode INNER JOIN
					RMTFinanceTypes T6 ON T6.FinType=T1.FinType LEFT JOIN 
					(Select		T1.FinReference,MIN(FinCurODDays)PastdueDays,Sum(FinCurODAmt)OverdueAmt
					FROM		FinanceMain T1 INNER JOIN
								FinODDetails T2 ON T1.FinReference = T2.FinReference INNER JOIN
								FinPftDetails T3 ON T1.FinReference = T3.FinReference
				    WHERE		FinCurODAmt > 0 and T1.FinIsActive = 1
					Group By	T1.FinReference )T4 on T4.FinReference=T1.FinReference
			Where   T1.FinIsActive = 1
		</createView>   </changeSet>
		
		 	<changeSet id="368" author="Pruthvi">
		<createView replaceIfExists="true" viewName="RMTScoringGroup_View">
		SELECT     ScoreGroupId, ScoreGroupCode, MinScore, ScoreGroupName, CategoryType, IsOverride, OverrideScore, Version, LastMntBy, LastMntOn, 
                      RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId,
                      Case when CategoryType=N'C' Then N'Corporate' 
			when CategoryType=N'I'THEN N'Individual' ELSE CategoryType END lovDescCategoryType
FROM         RMTScoringGroup_Temp
UNION ALL
SELECT     ScoreGroupId, ScoreGroupCode, MinScore, ScoreGroupName, CategoryType, IsOverride, OverrideScore, Version, LastMntBy, LastMntOn, 
                      RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId,
                      Case when CategoryType=N'C' Then N'Corporate' 
			when CategoryType=N'I'THEN N'Individual' ELSE CategoryType END lovDescCategoryType
FROM         RMTScoringGroup
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          RMTScoringGroup_Temp
                            WHERE      ScoreGroupId = RMTScoringGroup.ScoreGroupId)
		</createView>   </changeSet>
		
		 	<changeSet id="369" author="Pruthvi">
		<createView replaceIfExists="true" viewName="WIFIndicativeTermDetail_View">
		SELECT     T1.FinReference, T1.RpsnName, T1.RpsnDesg, T1.CustId, T1.FacilityType, T1.Pricing, T1.Repayments, T1.LCPeriod, T1.UsancePeriod, T1.SecurityClean, 
                      T1.SecurityName, T1.Utilization, T1.Commission, T1.Purpose, T1.Guarantee, T1.Covenants, T1.DocumentsRequired, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.TenorYear, T1.TenorMonth, T1.TenorDesc, 
                      T1.TransactionType, T1.AgentBank, T1.OtherDetails, T1.TotalFacility, T1.TotalFacilityCCY, T1.UnderWriting, T1.UnderWritingCCY, T1.PropFinalTake, 
                      T1.PropFinalTakeCCY, T2.CustShrtName lovDescCustShrtName, T2.CustCIF lovDescCustCIF, T3.GenDesgDesc lovDescRpsnDesgName, 
                      T4.FacilityDesc lovDescFacilityType, T4.Revolving lovDescRevolving, T5.FinStartDate lovDescFinStartDate, T5.MaturityDate lovDescMaturityDate, 
                      T6.CcyDesc lovDescTotalFacilityCCYName, T7.CcyDesc lovDescUnderWritingCCYName, T8.CcyDesc lovDescPropFinalTakeCCYName, 
                      Coalesce(T6.CcyEditField,0) lovDescTotalFacilityFormatter, Coalesce(T7.CcyEditField,0) lovDescUnderWritingFormatter,Coalesce(T8.CcyEditField,0) lovDescPropFinalTakeFormatter
FROM          WIFIndicativeTermDetail_Temp T1 INNER JOIN
                       WIFFinanceMain_Temp T5 ON T1.FinReference = T5.FinReference LEFT OUTER JOIN
                       Customers T2 ON T1.CustId = T2.CustID LEFT OUTER JOIN
                       RMTGenDesignations T3 ON T3.GenDesignation = T1.RpsnDesg LEFT OUTER JOIN
                       RMTFacilityTypes T4 ON T4.FacilityType = T1.FacilityType LEFT OUTER JOIN
                       RMTCurrencies T6 ON T1.TotalFacilityCCY = T6.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.UnderWritingCCY = T7.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T8 ON T1.PropFinalTakeCCY = T8.CcyCode
UNION ALL
SELECT     T1.FinReference, T1.RpsnName, T1.RpsnDesg, T1.CustId, T1.FacilityType, T1.Pricing, T1.Repayments, T1.LCPeriod, T1.UsancePeriod, T1.SecurityClean, 
                      T1.SecurityName, T1.Utilization, T1.Commission, T1.Purpose, T1.Guarantee, T1.Covenants, T1.DocumentsRequired, T1.Version, T1.LastMntBy, T1.LastMntOn, 
                      T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.TenorYear, T1.TenorMonth, T1.TenorDesc, 
                      T1.TransactionType, T1.AgentBank, T1.OtherDetails, T1.TotalFacility, T1.TotalFacilityCCY, T1.UnderWriting, T1.UnderWritingCCY, T1.PropFinalTake, 
                      T1.PropFinalTakeCCY, T2.CustShrtName lovDescCustShrtName, T2.CustCIF lovDescCustCIF, T3.GenDesgDesc lovDescRpsnDesgName, 
                      T4.FacilityDesc lovDescFacilityType, T4.Revolving lovDescRevolving, T5.FinStartDate lovDescFinStartDate, T5.MaturityDate lovDescMaturityDate, 
                      T6.CcyDesc lovDescTotalFacilityCCYName, T7.CcyDesc lovDescUnderWritingCCYName, T8.CcyDesc lovDescPropFinalTakeCCYName, 
                      Coalesce(T6.CcyEditField,0) lovDescTotalFacilityFormatter, Coalesce(T7.CcyEditField,0) lovDescUnderWritingFormatter,Coalesce(T8.CcyEditField,0) lovDescPropFinalTakeFormatter
FROM          WIFIndicativeTermDetail T1 INNER JOIN
                       WIFFinanceMain T5 ON T1.FinReference = T5.FinReference LEFT OUTER JOIN
                       Customers T2 ON T1.CustId = T2.CustID LEFT OUTER JOIN
                       RMTGenDesignations T3 ON T3.GenDesignation = T1.RpsnDesg LEFT OUTER JOIN
                       RMTFacilityTypes T4 ON T4.FacilityType = T1.FacilityType LEFT OUTER JOIN
                       RMTCurrencies T6 ON T1.TotalFacilityCCY = T6.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T7 ON T1.UnderWritingCCY = T7.CcyCode LEFT OUTER JOIN
                       RMTCurrencies T8 ON T1.PropFinalTakeCCY = T8.CcyCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          WIFIndicativeTermDetail_Temp
                            WHERE      FinReference = T1.FinReference)

		</createView>   </changeSet>	
		
		<changeSet id="370" author="Madhubabu">
		<dropColumn columnName="PolicyType" tableName="fininsurances" />
	</changeSet>
		<changeSet id="371" author="Madhubabu">
		<dropColumn columnName="PolicyType" tableName="fininsurances_temp" />
	</changeSet>
	<changeSet id="372" author="Madhubabu">
		<addColumn tableName="fininsurances_temp">
			<column name="PolicyCode" type="nvarchar(8)" />
		</addColumn>
	</changeSet>
	<changeSet id="373" author="Madhubabu">
		<addColumn tableName="fininsurances">
			<column name="PolicyCode" type="nvarchar(8)" />
		</addColumn>
	</changeSet>
		<changeSet id="374" author="Madhubabu">
		<dropColumn columnName="PolicyType" tableName="WIFfininsurances" />
	</changeSet>
	<changeSet id="375" author="Madhubabu">
		<addColumn tableName="WIFfininsurances">
			<column name="PolicyCode" type="nvarchar(8)" />
		</addColumn>
	</changeSet>
	<changeSet id="376" author="Madhubabu">
		<createView viewName="FinInsurances_View"
			replaceIfExists="true">
		SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
   T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,
   T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
   FROM      FinInsurances_Temp T1 INNER JOIN
             InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
             TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
             InsurancePolicy T4 ON T1.PolicyCode=T4.PolicyCode
			 
UNION ALL

  SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
  T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
  FROM         FinInsurances T1 INNER JOIN
               InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
               TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
               InsurancePolicy T4 ON T1.PolicyCode=T4.PolicyCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM      FinInsurances_Temp
                            WHERE     Reference= T1.Reference AND  Module = T1.Module
							AND       InsuranceType=T1.InsuranceType AND InsReference=T1.InsReference)
</createView>
	</changeSet>
	<changeSet id="377" author="Madhubabu">
		<createView viewName="WIFFinInsurances_View"
			replaceIfExists="true">
		SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
   T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,
   T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
   FROM      FinInsurances_Temp T1 INNER JOIN
             InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
             TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
             InsurancePolicy T4 ON T1.PolicyCode=T4.PolicyCode
			 
UNION ALL

  SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
  T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
  FROM         FinInsurances T1 INNER JOIN
               InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
               TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
               InsurancePolicy T4 ON T1.PolicyCode=T4.PolicyCode

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM      FinInsurances_Temp
                            WHERE     Reference= T1.Reference AND  Module = T1.Module
							AND       InsuranceType=T1.InsuranceType AND InsReference=T1.InsReference)
</createView>
	</changeSet>
	<changeSet id="378" author="Madhubabu">
		<createView viewName="FinInsurances_TView"
			replaceIfExists="true">
		SELECT  T1.InsId,T1.Reference, T1.Module,T1.InsuranceType,T2.insuranceTypeDesc,T1.InsReference,T1.InsuranceReq,T1.Provider,T3.TakafulName ProviderName,T1.PaymentMethod,T1.CalType,T1.InsuranceRate,
   T1.WaiverReason,T1.InsuranceFrq,T1.Amount,T1.CalRule,T1.CalPerc,T1.CalOn,T1.InsuranceStatus,T4.PolicyCode,T4.PolicyDesc,
   T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
   FROM      FinInsurances_Temp T1 INNER JOIN
             InsuranceType T2 ON T2.InsuranceType=T1.InsuranceType LEFT OUTER JOIN
             TakafulProvider T3 ON T1.provider=T3.TakafulCode LEFT OUTER JOIN
             InsurancePolicy T4 ON T1.PolicyCode=T4.PolicyCode
</createView>
	</changeSet>
			<changeSet id="379" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecGroupRights_AView">
SELECT      SecGroups.GrpCode LovDescGrpCode,  SecRights.RightName LovDescRightName,  SecGroupRights.GrpRightID, 
                       SecGroupRights.GrpID,  SecGroupRights.RightID,  SecGroupRights.AccessType,  SecGroupRights.Version,  SecGroupRights.LastMntBy, 
                       SecGroupRights.LastMntOn,  SecGroupRights.RecordStatus,  SecGroupRights.RoleCode,  SecGroupRights.NextRoleCode,  SecGroupRights.TaskId, 
                       SecGroupRights.NextTaskId,  SecGroupRights.RecordType,  SecGroupRights.WorkflowId,  SecGroups.GrpDesc,  SecRights.RightType
FROM          SecGroupRights INNER JOIN
                       SecGroups ON  SecGroupRights.GrpID =  SecGroups.GrpID INNER JOIN
                       SecRights ON  SecGroupRights.RightID =  SecRights.RightID
 </createView>   </changeSet>
 <changeSet id="380" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecGroupRights_View">
	SELECT      SecGroups.GrpCode,  SecGroups.GrpDesc,  SecRights.RightType,  SecRights.RightName, 
                       SecGroupRights.GrpRightID,  SecGroupRights.Version,  SecGroupRights.LastMntBy,  SecGroupRights.LastMntOn, 
                       SecGroupRights.RecordStatus,  SecGroupRights.RoleCode,  SecGroupRights.NextRoleCode,  SecGroupRights.TaskId, 
                       SecGroupRights.NextTaskId,  SecGroupRights.RecordType,  SecGroupRights.WorkflowId,  SecGroupRights.GrpID, 
                       SecGroupRights.RightID
FROM          SecGroupRights INNER JOIN
                       SecGroups ON  SecGroupRights.GrpID =  SecGroups.GrpID INNER JOIN
                       SecRights ON  SecGroupRights.RightID =  SecRights.RightID
		 </createView>   </changeSet>
 <changeSet id="381" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecRoleGroups_AView">
SELECT      SecRoleGroups.RoleID,  SecRoles.RoleCd LovDescRoleCode,  SecRoleGroups.RoleGrpID, 
                       SecRoleGroups.GrpID,  SecGroups.GrpCode LovDescGrpCode,  SecRoleGroups.Version,  SecRoleGroups.LastMntBy, 
                       SecRoleGroups.LastMntOn,  SecRoleGroups.RecordStatus,  SecRoleGroups.RoleCode,  SecRoleGroups.NextRoleCode, 
                       SecRoleGroups.TaskId,  SecRoleGroups.NextTaskId,  SecRoleGroups.RecordType,  SecRoleGroups.WorkflowId
FROM          SecRoleGroups INNER JOIN
                       SecRoles ON  SecRoleGroups.RoleID =  SecRoles.RoleID INNER JOIN
                       SecGroups ON  SecRoleGroups.GrpID =  SecGroups.GrpID
		 </createView>   </changeSet>
		 
 <changeSet id="382" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecRoleGroups_View">
SELECT     T1.RoleGrpID, T1.RoleID, T3.RoleCd LovDescRoleCd, T3.RoleDesc LovDescRoleDesc, T1.GrpID, 
                      T2.GrpCode LovDescGrpCode, T2.GrpDesc LovDescGrpDesc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, 
                      T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId
FROM          SecRoleGroups T1 INNER JOIN
                       SecGroups T2 ON T1.GrpID = T2.GrpID INNER JOIN
                       SecRoles T3 ON T1.RoleID = T3.RoleID
				 </createView>   </changeSet>
				 
 <changeSet id="383" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserOperationRights_View">
SELECT DISTINCT T7.RightID, T7.RightType, T7.RightName, T6.AccessType, T7.Version, T1.UsrID, T8.AppCode
FROM          SecUsers T1 INNER JOIN
                       SecUserOperations T9 ON T1.UsrID = T9.UsrID INNER JOIN
                       SecOperationRoles T10 ON T9.OprID = T10.OprID INNER JOIN
                       SecRoles T3 ON T10.RoleID = T3.RoleID INNER JOIN
                       SecRoleGroups T4 ON T3.RoleID = T4.RoleID INNER JOIN
                       SecGroups T5 ON T4.GrpID = T5.GrpID INNER JOIN
                       SecGroupRights T6 ON T5.GrpID = T6.GrpID INNER JOIN
                       SecRights T7 ON T6.RightID = T7.RightID INNER JOIN
                       PTApplicationDetails T8 ON T3.RoleApp = T8.AppID
		 </createView>   </changeSet>
 <changeSet id="384" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserOperationRoles_View">
SELECT     T1.UsrID,T6.OprID, T3.RoleID, T3.RoleApp, T4.AppCode, T3.RoleCd,
T3.RoleDesc, T3.RoleCategory, T3.Version, T3.LastMntBy, T3.LastMntOn,T1.UsrEmail,T1.UsrFName lovDescFirstName
FROM          SecUsers T1 INNER JOIN
                       SecUserOperations T6 ON T1.UsrID = T6.UsrID INNER JOIN
                       SecOperationRoles T5 ON T6.OprID = T5.OprID INNER JOIN
                       SecRoles T3 ON T5.RoleID = T3.RoleID INNER JOIN
                       PTApplicationDetails T4 ON T4.AppID = T3.RoleApp
		 </createView>   </changeSet>
 <changeSet id="385" author="Pruthvi">
		<createView replaceIfExists="true" viewName="UserRoles_AView">	 
		 
SELECT      SecUserRoles.UsrRoleID,  SecUserRoles.RoleID,  SecUserRoles.Version,  SecUserRoles.LastMntBy, 
                       SecUserRoles.LastMntOn,  SecUserRoles.RecordStatus,  SecUserRoles.RoleCode,  SecUserRoles.NextRoleCode, 
                       SecUserRoles.TaskId,  SecUserRoles.NextTaskId,  SecUserRoles.RecordType,  SecUserRoles.WorkflowId,  SecRoles.RoleApp, 
                       PTApplicationDetails.AppCode,  SecUsers.UsrID,  SecUsers.UsrLogin LovDescUserLogin, 
                       SecRoles.RoleCd LovDescRoleCd
FROM          SecUserRoles INNER JOIN
                       SecRoles ON  SecUserRoles.RoleID =  SecRoles.RoleID INNER JOIN
                       SecUsers ON  SecUserRoles.UsrID =  SecUsers.UsrID INNER JOIN
                       PTApplicationDetails ON  SecRoles.RoleApp =  PTApplicationDetails.AppID
</createView>   </changeSet>
			<changeSet id="386" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VasProductType_View">
SELECT     T1.ProductType, T1.ProductTypeDesc,T1.ProductCtg, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active, T2.ProductCtgDesc
FROM        VasProductType_Temp T1 INNER JOIN
			VasProductCategory T2 ON T1.ProductCtg = T2.ProductCtg

UNION ALL
SELECT     T1.ProductType, T1.ProductTypeDesc,T1.ProductCtg, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
			T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId,T1.Active,T2.ProductCtgDesc
FROM        VasProductType T1 INNER JOIN
			VasProductCategory T2 ON T1.ProductCtg = T2.ProductCtg

WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          VasProductType_Temp
                            WHERE      ProductType = T1.ProductType)
 </createView>   </changeSet>
 
 
 		<changeSet id="388" author="Pruthvi">
		<createView replaceIfExists="true" viewName="VASRecording_TView">
 SELECT    T1.ProductCode, T1.PostingAgainst, T1.PrimaryLinkRef, T1.VasReference, T1.Fee, T1.RenewalFee, T1.FeePaymentMode,
          T1.ValueDate, T1.AccrualTillDate, T1.RecurringDate, T1.DsaId, T1.DmaId, T1.FulfilOfficerId,T1.ReferralId,
          T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId,
          T1.NextTaskId, T1.RecordType, T1.WorkflowId ,T2.ProductDesc , T3.ROfficerDesc DsaIdDesc,
          T4.ROfficerDesc DmaIdDesc,T5.ROfficerDesc FulfilOfficerIdDesc,T6.ROfficerDesc ReferralIdDesc,
          T7.ProductType, T7.ProductTypeDesc,  T8.ProductCtg, T8.ProductCtgDesc ,T9.DealerName ManufacturerDesc,VasStatus,FinanceProcess
          FROM   VASRecording_Temp  T1 LEFT OUTER JOIN
          VasStructure  T2 ON T1.ProductCode = T2.ProductCode LEFT OUTER JOIN
          RelationshipOfficers  T3 ON T1.DsaId = T3.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T4 ON T1.DmaId = T4.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T5 ON T1.FulfilOfficerId = T5.ROfficerCode LEFT OUTER JOIN
          RelationshipOfficers  T6 ON T1.ReferralId = T6.ROfficerCode INNER JOIN 
          VasProductType  T7 ON T7.ProductType = T2.ProductType INNER JOIN
          VasProductCategory  T8 ON T7.ProductCtg = T8.ProductCtg LEFT OUTER JOIN
          AMTVehicleDealer T9 ON T2.ManufacturerId = T9.DealerId
		 </createView>   </changeSet>
 		<changeSet id="389" author="Pruthvi">
		<createView replaceIfExists="true" viewName="CollateralThirdParty_View">		 
SELECT		T1.CollateralRef, T1.CustomerId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CustCIF , T2.CustShrtName,
			T2.CustCRCPR, T2.CustPassportNo, T2.CustNationality, T2.CustCtgCode  		
FROM    	CollateralThirdParty_Temp  T1
INNER JOIN Customers T2 ON T2.CustID = T1.CustomerId 
UNION ALL
SELECT		T1.CollateralRef, T1.CustomerId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode,
			T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T2.CustCIF , T2.CustShrtName,
			T2.CustCRCPR, T2.CustPassportNo, T2.CustNationality, T2.CustCtgCode
FROM    	CollateralThirdParty  T1
INNER JOIN Customers T2 ON T2.CustID = T1.CustomerId  
WHERE     NOT EXISTS (SELECT 1 FROM CollateralThirdParty_Temp WHERE CollateralRef = T1.CollateralRef  
          AND CustomerId = T1.CustomerId)
		  	 </createView>   </changeSet>
 
  		<changeSet id="390" author="Pruthvi">
		<createView replaceIfExists="true" viewName="FinCommInventoryEnq_View">
select FinReference,CustShrtName LovDescCustShrtName,CustCIF LovDescCustCIF,Ccyeditfield lovDescFinFormatter  from 
(select FinReference,CustID,FinCcy from FinanceMain
union all
select FinReference,CustID,FinCcy  from FinanceMain_Temp
union all
select FinReference,CustID,FinCcy from RejectFinanceMain)  FM 
INNER JOIN RMTCurrencies R ON FM.FinCcy=R.CcyCode  
inner join Customers c on Fm.CustID=c.CustID 		
</createView>   </changeSet>	

		<changeSet id="391" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Rpt_NoLiability_View">	
	Select distinct CUSTCIF,T1.CustShrtName,RepayAccountId ,CustDocTitle CustCPRno
	from  Customers T1 INNER JOIN
		   FinanceMain T2 On T1.CUSTID=T2.CUSTID LEFT JOIN
		   CustomerDocuments T4 ON T4.CustID=T1.CUSTID and CustDocType='03'		
		</createView>   </changeSet>
				<changeSet id="392" author="Pruthvi">
		<createView replaceIfExists="true" viewName="Customers_AEView">	
	SELECT  T1.CustID, T1.CustCIF, T1.CustCoreBank, T1.CustCtgCode, T1.CustTypeCode, 
	    T1.CustShrtName,  T1.CustFName, T1.CustLName,T1.CustDOB, T1.CustNationality,
	    T1.CustSector, T1.CustSubSector,T2.PhoneNumber, T2.PhoneAreaCode , T2.PhoneCountryCode ,
	    T1.CustCRCPR, T1.CustPassportNo, T3.CustEMail EmailID, T1.CustAddlVar82,
	    T4.CustTypeDesc lovDescCustTypeCodeName,T1.CustBaseCcy,
	    T4.CustTypeCtg lovDescCustCtgType,T5.CustCtgDesc lovDescCustCtgCodeName, T6.CustStsDescription LovDescCustStsName,
	    T1.CustDftBranch, T7.BranchDesc LovDescCustDftBranchName
FROM   Customers T1 LEFT OUTER JOIN
	   CustomerPhoneNumbers T2 ON T1.CustID = T2.PhoneCustID AND T2.PhoneTypeCode = 'MOBILE'  LEFT OUTER JOIN
	   CustomerEMails T3 ON T1.CustID = T3.CustID AND T3.CustEMailTypeCode = 'OFFICE' LEFT OUTER JOIN
	   RMTCustTypes T4 ON T1.CustTypeCode = T4.CustTypeCode  LEFT OUTER JOIN
	   BMTCustCategories T5 ON T1.CustCtgCode = T5.CustCtgCode  LEFT OUTER JOIN
	   BMTCustStatusCodes T6 ON T1.CustSts = T6.CustStsCode LEFT OUTER JOIN
	   RMTBranches T7 ON T1.CustDftBranch = T7.BranchCode	
		</createView>   </changeSet>
				<changeSet id="393" author="Pruthvi">
		<createView replaceIfExists="true" viewName="DeviationTracker_View">
		select d.deviationId,d.Module,d.DeviationCode,d.DeviationType,d.DeviationValue,d.UserRole,d.DelegationRole,d.ApprovalStatus,
d.DeviationDate,d.DeviationUserId,d.DelegatedUserId,d.FinReference,c.CustCIF,CustShrtName 
from (Select T2.* from (
Select Module,Deviationcode,finreference,MAX(Deviationid)maxDeviationid
From FinanceDeviations
group by Module,Deviationcode,finreference) T1
Inner join FinanceDeviations T2 On T1.Module =T2.Module and T1.Deviationcode =T2.Deviationcode
and T1.finreference =T2.finreference and Deviationid =maxDeviationid) d
inner join (select m.FinReference,m.CustID from FinanceMain m 
			union 
			select t.FinReference,t.CustID from FinanceMain_Temp t) fm on d.FinReference = fm.FinReference
inner join Customers c on fm.CustID=c.CustID 
		</createView>   </changeSet>
		
		<changeSet id="394" author="Pruthvi">
		<createView replaceIfExists="true" viewName="BulkDefermentFinance_View">
	SELECT F.FinReference , F.FinType , F.FinCcy ,
	   C.CustCIF CustCIF ,C.CustShrtName CustName, F.FinBranch FinBranch,
	   FT.FinCategory ProductCode ,S.SchDate EventFromDate, 
	   BMT.IntRateBasisDesc ProfitDayBasisDesc,
	   BMTSchd.SchdMethodDesc SchdMethodDesc
FROM Financemain F INNER JOIN RMTFinanceTypes FT ON F.FinType = FT.FinType
INNER JOIN Customers C ON C.CustID = F.CustID
	 INNER JOIN FinScheduleDetails S ON F.Finreference = S.Finreference
	 INNER JOIN BMTIntRateBasisCodes BMT ON BMT.IntRateBasisCode = F.ProfitDaysBasis
	 INNER JOIN BMTSchdMethod BMTSchd ON BMTSchd.SchdMethod = F.ScheduleMethod
WHERE (ProfitSchd - SchdPftPaid <![CDATA[>]]> 0 OR PrincipalSchd - SchdPriPaid > 0 
	   OR DefProfitSchd-DefSchdPftPaid <![CDATA[>]]> 0
	   OR DefPrincipalSchd-DefSchdPriPaid <![CDATA[>]]> 0) and F.Finreference IN (
	   SELECT FinDefermentHeader.FinReference FROM
	   (SELECT FinReference,Count(FinReference) cnt FROM FinDefermentHeader GROUP BY FinReference) FinDefermentHeader
	    INNER JOIN Financemain A on A.FinReference = FinDefermentHeader.FinReference WHERE cnt <![CDATA[<]]> defferments)	
		</createView>   </changeSet>
		
		
			<changeSet id="395" author="Pruthvi">
		<createView replaceIfExists="true" viewName="BulkDeferement_View">
	Select T1.ClosingStatus, T1.FinReference, T1.FinType FinType, T1.FinCcy FinCcy, T1.CustID CustID, T3.FinDivision LovDescFinDivision, 
T1.FinBranch FinBranch, T3.FinCategory ProductCode, T2.SchDate DeferedSchdDate , T4.CustCIF,T4.CustShrtName CustName,BMT.IntRateBasisDesc ProfitDayBasisDesc,
BMTSchd.SchdMethodDesc SchdMethodDesc
From FinanceMain T1 
INNER JOIN FinScheduleDetails T2 ON T1.FinReference = T2.FinReference
INNER JOIN RMTFinanceTypes T3 ON T1.FinType = T3.FinType
INNER JOIN Customers T4 ON T1.CustId = T4.CustId
INNER JOIN BMTIntRateBasisCodes BMT ON BMT.IntRateBasisCode = T1.ProfitDaysBasis
INNER JOIN BMTSchdMethod BMTSchd ON BMTSchd.SchdMethod = T1.ScheduleMethod
WHERE (T1.Defferments - T1.AllowedDefRpyChange  <![CDATA[>]]> 0)
  AND T1.MaturityDate != T2.SchDate  AND T1.FinIsActive = 1 AND T2.RepayAmount <![CDATA[>]]> 0 AND T2.Defered = 0 
  AND  (T1.ClosingStatus is null or T1.ClosingStatus NOT IN('C','W'))  AND (T2.SchdPftPaid + T2.SchdPriPaid) = 0	
		
		</createView>   </changeSet>
		
			<changeSet id="396" author="Pruthvi">
		<createView replaceIfExists="true" viewName="CustPastDueDetail_View">
select	   T1.CustID,CAST( SUM(${add.schema}UDF_ConvertCurrency(FinCurODAmt,T2.FinCcy,'BHD')) as decimal(18,3)) PastDueAmount,
			MAX(FinCurODDays) DueDays ,MIN(FinODSchdDate) PastDueFrom
from	   finoddetails T1 INNER JOIN FinanceMain T2 ON T1.FinReference =T2.FinReference
where		FinCurODAmt<![CDATA[>]]> 0 Group By	T1.CustID		
		
		</createView>   </changeSet>
		<changeSet id="397" author="Pruthvi">
		<createView replaceIfExists="true" viewName="CommitmentMovements_View">
SELECT     T1.CmtReference, T1.FinReference, T1.FinBranch, T1.FinType, T1.MovementDate, T1.MovementOrder, T1.MovementType, T1.MovementAmount, T1.CmtAmount, 
                      T1.CmtUtilizedAmount, T1.CmtAvailable, T1.LinkedTranId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.CmtCharges, T3.CcyEditField
FROM         CommitmentMovements_Temp T1 INNER JOIN
                      Commitments_temp T2 ON T1.CmtReference = T2.CmtReference INNER JOIN
                      RMTCurrencies T3 ON T2.CmtCcy = T3.CcyCode
UNION ALL
SELECT     T1.CmtReference, T1.FinReference, T1.FinBranch, T1.FinType, T1.MovementDate, T1.MovementOrder, T1.MovementType, T1.MovementAmount, T1.CmtAmount, 
                      T1.CmtUtilizedAmount, T1.CmtAvailable, T1.LinkedTranId, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, 
                      T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.CmtCharges, T3.CcyEditField
FROM         CommitmentMovements T1 INNER JOIN
                      Commitments T2 ON T1.CmtReference = T2.CmtReference INNER JOIN
                      RMTCurrencies T3 ON T2.CmtCcy = T3.CcyCode
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          CommitmentMovements_TEMP
                            WHERE      CmtReference = T1.CmtReference)
 </createView>   </changeSet>

 <changeSet id="387" author="Kesava">
	<comment>Updating RBFieldDetails for LTVRULE</comment>
		<sql>
			Update RBFieldDetails set RBFldName = 'ct_collateralType' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'collateralType' ;
			Update RBFieldDetails set RBFldName = 'ct_custAddrProvince' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custAddrProvince' ;
			Update RBFieldDetails set RBFldName = 'ct_custCtgCode' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custCtgCode' ;
			Update RBFieldDetails set RBFldName = 'ct_custDftBranch' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custDftBranch' ;
			Update RBFieldDetails set RBFldName = 'ct_custEmpSts' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custEmpSts' ;
			Update RBFieldDetails set RBFldName = 'ct_custGenderCode' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custGenderCode' ;
			Update RBFieldDetails set RBFldName = 'ct_custIndustry' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custIndustry' ;
			Update RBFieldDetails set RBFldName = 'ct_custIsStaff' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custIsStaff' ;
			Update RBFieldDetails set RBFldName = 'ct_custMaritalSts' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custMaritalSts' ;
			Update RBFieldDetails set RBFldName = 'ct_custNationality' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custNationality' ;
			Update RBFieldDetails set RBFldName = 'ct_custParentCountry' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custParentCountry' ;
			Update RBFieldDetails set RBFldName = 'ct_custRiskCountry' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custRiskCountry' ;
			Update RBFieldDetails set RBFldName = 'ct_custSector' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custSector' ;
			Update RBFieldDetails set RBFldName = 'ct_custSegment' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custSegment' ;
			Update RBFieldDetails set RBFldName = 'ct_custSubSector' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custSubSector' ;
			Update RBFieldDetails set RBFldName = 'ct_custSubSegment' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custSubSegment' ;
			Update RBFieldDetails set RBFldName = 'ct_custTypeCode' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'custTypeCode' ;
			Update RBFieldDetails set RBFldName = 'ct_propertyLocCtg' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'propertyLocCtg' ;
			Update RBFieldDetails set RBFldName = 'ct_propertyProvince' Where RBMODULE = 'LTVRULE' and RBEVENT = 'LTVRULE' and RBFldName = 'propertyProvince' ;
		</sql>
	</changeSet>
	<changeSet id="398" author="Pruthvi">
		<dropView viewName="RPT_DealWiseInc_Recon_View" />
		</changeSet>
		<changeSet id="399" author="Pruthvi">
		<dropView viewName="RPT_DailyPastDueByFinance_View" />
		</changeSet>
		<changeSet id="400" author="Pruthvi">
		<dropView viewName="RPT_DailyPastDue_View" />
		</changeSet>
		<changeSet id="401" author="Pruthvi">
		<dropView viewName="PFF_FIN_LMS_SAS_view" />
		</changeSet>
		<changeSet id="402" author="Pruthvi">
		<dropView viewName="PFF_PastDue_SAS_view" />
		</changeSet>
			<changeSet id="403" author="Pruthvi">
		<dropView viewName="PFF_PaymentDaily_SAS_view" />
		</changeSet>
			<changeSet id="404" author="Pruthvi">
		<dropView viewName="PFF_TRAND_DTL_SAS_View" />
		</changeSet>
		<changeSet id="405" author="Pruthvi">
		<dropView viewName="PFF_PaymentSchedule_SAS_view" />
		</changeSet>
		<changeSet id="406" author="Pruthvi">
		<dropView viewName="RPT_DelinquentByPdtSmry_View" />
		</changeSet>
<changeSet id="407" author="Pruthvi">
		<dropView viewName="RPT_Provision_SMRY_View" />
		</changeSet>
		<changeSet id="408" author="Pruthvi">
		<createView replaceIfExists="true" viewName="SecOperations_TView">
		SELECT     OprID, OprDesc, OprCode, Version, LastMntBy, LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, RecordType, WorkflowId
FROM         SecOperations_Temp
				</createView>   </changeSet>
		
		<changeSet id="409" author="Pruthvi">
		<createView replaceIfExists="true" viewName="BMTIncomeTypes_View">		
				SELECT     T1.IncomeTypeCode, T1.IncomeExpense, T1.Category, T1.IncomeTypeDesc, T1.IncomeTypeIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Margin, T2.CategoryDesc lovDescCategoryName
	FROM         BMTIncomeTypes_Temp T1 INNER JOIN
                      BMTIncomeCategory T2 ON T1.Category = T2.IncomeCategory
	UNION ALL
	SELECT     T1.IncomeTypeCode, T1.IncomeExpense, T1.Category, T1.IncomeTypeDesc, T1.IncomeTypeIsActive, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, 
                      T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, T1.RecordType, T1.WorkflowId, T1.Margin, T2.CategoryDesc lovDescCategoryName
	FROM          BMTIncomeTypes T1 INNER JOIN
                       BMTIncomeCategory T2 ON T1.Category = T2.IncomeCategory
	WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          BMTIncomeTypes_TEMP  
                            WHERE      IncomeTypeCode = T1.IncomeTypeCode AND IncomeExpense =  T1.IncomeExpense AND 
                                                   Category =  T1.Category)
												   	</createView>   </changeSet>
		<changeSet id="410" author="Pruthvi">
		<createView replaceIfExists="true" viewName="EMailRules_View">												
	SELECT    RuleCode, RuleModule, RuleCodeDesc, 
                      SQLRule, ActualBlock, Version, LastMntBy, 
                      LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId, 
                      ReturnType
FROM          EMailRules_Temp 

UNION ALL
SELECT     RuleCode, RuleModule, RuleCodeDesc, 
                      SQLRule, ActualBlock, Version, LastMntBy, 
                      LastMntOn, RecordStatus, RoleCode, NextRoleCode, TaskId, NextTaskId, 
                      RecordType, WorkflowId, 
                      ReturnType
FROM         EMailRules 
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          EMailRules_Temp
                            WHERE      RuleCode = EMailRules.RuleCode)
								</createView>   </changeSet>
			<changeSet id="411" author="Pruthvi" dbms="mssql">
		<createView replaceIfExists="true" viewName="RMTScoringMetrics_AView">	

SELECT  T1.ScoreGroupId, T1.ScoringId, T1.CategoryType, 
				CASE T1.CategoryType WHEN N'R' THEN T2.RuleCodeDesc ELSE
				T3.GroupDesc END lovDescScoringCodeDesc, 
				CASE T1.CategoryType WHEN N'R' THEN T2.RuleCode
				ELSE CAST( T3.GroupId as nvarchar(8)) END lovDescScoringCode, 
				CASE T1.CategoryType WHEN N'R' THEN T2.SQLRule
				 END lovDescSQLRule, 
				CASE T1.CategoryType WHEN N'R' THEN T2.SEQOrder
				ELSE T3.GroupSeq END lovDescScoreMetricSeq,
				T1.Version, T1.LastMntBy, T1.LastMntOn, 
				T1.Recordstatus, T1.Rolecode, T1.Nextrolecode, T1.Taskid,
				T1.NextTaskId, T1.RecordType, T1.WorkflowId
		FROM    RMTScoringMetrics T1 LEFT OUTER JOIN
				Rules T2 On T2.Ruleid = T1.Scoringid 
				And T2.Rulemodule = 'SCORES' Left Outer Join
				CorpScoringGroupDetail T3 ON T3.GroupId = T1.ScoringId					
			</createView>   </changeSet>					
		
							
								
							
			<changeSet id="412" author="Pruthvi" dbms="mssql">
		<createView replaceIfExists="true" viewName="FinScheduleDetails_IView">								
	SELECT     T1.FinReference ReferenceNum, T1.SchSeq InstallmentNo, T1.SchDate ScheduleDate, T1.OrgEndBal OpeningBalance, 
                      T1.RepayAmount InstallmentAmount, T1.PrincipalSchd PrincipalAmount, T1.ProfitSchd ProfitAmount, T1.ClosingBalance, T3.CcyEditField, 
                      CASE WHEN (T1.ProfitSchd - T1.SchdPftPaid + T1.DefProfit - T1.DefSchdPftPaid + T1.PrincipalSchd - T1.SchdPriPaid + T1.DefPrincipal - T1.DefSchdPriPaid) 
                      = 0 THEN 'P' WHEN (T1.SchdPftPaid <![CDATA[>]]> 0 AND T1.ProfitSchd <![CDATA[<]]> T1.SchdPftPaid) OR
                      (T1.DefSchdPftPaid <![CDATA[>]]> 0 AND T1.DefProfit <![CDATA[<]]> T1.DefSchdPftPaid) OR
                      (T1.SchdPriPaid <![CDATA[>]]> 0 AND T1.PrincipalSchd <![CDATA[<]]> T1.SchdPriPaid) OR
                      (T1.DefSchdPriPaid <![CDATA[>]]> 0 AND T1.DefPrincipal <![CDATA[<]]> T1.DefSchdPriPaid) THEN 'M' WHEN T1.SchDate <![CDATA[>=]]> GETDATE() THEN 'F' ELSE 'D' END Status, 
                      T4.TotPenaltyAmt ChargeAmount, T4.FinCurODAmt PastDueAmount
FROM          FinScheduleDetails T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       FinODDetails T4 ON T4.FinReference = T1.FinReference AND T4.FinODSchdDate = T1.SchDate
					  </createView>   </changeSet>
		<changeSet id="412" author="Pruthvi" dbms="oracle">
		<createView replaceIfExists="true" viewName="FinScheduleDetails_IView">				  
					  SELECT     T1.FinReference ReferenceNum, T1.SchSeq InstallmentNo, T1.SchDate ScheduleDate, T1.OrgEndBal OpeningBalance, 
                      T1.RepayAmount InstallmentAmount, T1.PrincipalSchd PrincipalAmount, T1.ProfitSchd ProfitAmount, T1.ClosingBalance, T3.CcyEditField, 
                      CASE WHEN (T1.ProfitSchd - T1.SchdPftPaid + T1.DefProfit - T1.DefSchdPftPaid + T1.PrincipalSchd - T1.SchdPriPaid + T1.DefPrincipal - T1.DefSchdPriPaid) 
                      = 0 THEN 'P' WHEN (T1.SchdPftPaid <![CDATA[>]]> 0 AND T1.ProfitSchd <![CDATA[<]]> T1.SchdPftPaid) OR
                      (T1.DefSchdPftPaid <![CDATA[>]]> 0 AND T1.DefProfit <![CDATA[<]]> T1.DefSchdPftPaid) OR
                      (T1.SchdPriPaid <![CDATA[>]]> 0 AND T1.PrincipalSchd <![CDATA[<]]> T1.SchdPriPaid) OR
                      (T1.DefSchdPriPaid <![CDATA[>]]> 0 AND T1.DefPrincipal <![CDATA[<]]> T1.DefSchdPriPaid) THEN 'M' WHEN T1.SchDate <![CDATA[>=]]> sysdate THEN 'F' ELSE 'D' END Status, 
                      T4.TotPenaltyAmt ChargeAmount, T4.FinCurODAmt PastDueAmount
FROM          FinScheduleDetails T1 INNER JOIN
                       FinanceMain T2 ON T1.FinReference = T2.FinReference INNER JOIN
                       RMTCurrencies T3 ON T2.FinCcy = T3.CcyCode LEFT OUTER JOIN
                       FinODDetails T4 ON T4.FinReference = T1.FinReference AND T4.FinODSchdDate = T1.SchDate
					   </createView>   </changeSet>
	<changeSet id="413" author="Pruthvi" dbms="mssql">
		<createView replaceIfExists="true" viewName="StepPolicyHeaderDetails_View">						   
SELECT     T1.PolicyCode, T1.PolicyDesc,
                          (SELECT     Count(PolicyCode)
                            FROM          StepPolicyDetail_View
                            WHERE      PolicyCode = T1.PolicyCode) StepNumber, 
                          ${add.schema}fn_list_agg_step_policy('TenorSplitPerc', T1.PolicyCode) TenorSplitPerc, 
                          ${add.schema}fn_list_agg_step_policy('RateMargin', T1.PolicyCode) RateMargin, 
                          ${add.schema}fn_list_agg_step_policy('EMISplitPerc', T1.PolicyCode) EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader_Temp T1
UNION ALL
SELECT     T1.PolicyCode, T1.PolicyDesc,
                          (SELECT     Count(PolicyCode)
                            FROM          StepPolicyDetail_View
                            WHERE      PolicyCode = T1.PolicyCode) StepNumber, 
                          ${add.schema}fn_list_agg_step_policy('TenorSplitPerc', T1.PolicyCode) TenorSplitPerc, 
                          ${add.schema}fn_list_agg_step_policy('RateMargin', T1.PolicyCode) RateMargin, 
                          ${add.schema}fn_list_agg_step_policy('EMISplitPerc', T1.PolicyCode) EMISplitPerc, T1.Version, T1.LastMntBy, T1.LastMntOn, T1.RecordStatus, T1.RoleCode, T1.NextRoleCode, T1.TaskId, T1.NextTaskId, 
                      T1.RecordType, T1.WorkflowId
FROM         StepPolicyHeader T1
WHERE     NOT EXISTS
                          (SELECT     1
                            FROM          StepPolicyHeader_Temp
                            WHERE      PolicyCode = T1.PolicyCode)
							</createView>   </changeSet>
							<changeSet id="414" author="Pruthvi" dbms="oracle">
		<createView replaceIfExists="true" viewName="RMTScoringMetrics_AView">	
SELECT  T1.ScoreGroupId, T1.ScoringId, T1.CategoryType, 
				CASE T1.CategoryType WHEN N'R' THEN T2.RuleCodeDesc ELSE
				T3.GroupDesc END lovDescScoringCodeDesc, 
				CASE T1.CategoryType WHEN N'R' THEN T2.RuleCode
				ELSE CAST( T3.GroupId as nvarchar2(8)) END lovDescScoringCode, 
				CASE T1.CategoryType WHEN N'R' THEN T2.SQLRule
				 END lovDescSQLRule, 
				CASE T1.CategoryType WHEN N'R' THEN T2.SEQOrder
				ELSE T3.GroupSeq END lovDescScoreMetricSeq,
				T1.Version, T1.LastMntBy, T1.LastMntOn, 
				T1.Recordstatus, T1.Rolecode, T1.Nextrolecode, T1.Taskid,
				T1.NextTaskId, T1.RecordType, T1.WorkflowId
		FROM    RMTScoringMetrics T1 LEFT OUTER JOIN
				Rules T2 On T2.Ruleid = T1.Scoringid 
				And T2.Rulemodule = 'SCORES' Left Outer Join
				CorpScoringGroupDetail T3 ON T3.GroupId = T1.ScoringId					
			</createView>   </changeSet>
	
	<changeSet id="415" author="Pruthvi">
		<createView replaceIfExists="true" viewName="RPT_PastdueSummary_View">
		SELECT  T4.branchCode  FinBranch, T.FinIsActive,T.Region,T.FinStatus,T.TotalPastdue Measure
			FROM(SELECT   T1.FinBranch,'Past Due Amount' Region,T1.Finstatus, T1.FinIsActive,
					      CAST(SUM(${add.schema}UDF_ConvertCurrency(FinCurODPri+FinCurODPft,T1.FinCCY,'INR')) AS decimal(18,3))TotalPastdue
				 FROM	  FinanceMain T1 INNER JOIN
						  FinODDetails T2 ON T1.FinReference = T2.FinReference INNER JOIN
						  FinPftDetails T3 ON T1.FinReference = T3.FinReference INNER JOIN 
						  RMTCurrencies on T1.FinCCY=CCYCode
				WHERE	  FinCurODAmt > 0 AND (T1.ClosingStatus !='C' or T1.ClosingStatus is null) and T1.Finstatus is not null   
				GROUP BY  T1.FinBranch,T1.Finstatus,T1.FinIsActive
				UNION ALL			
				SELECT    T1.FinBranch,'Profit Suspended',T1.Finstatus,  T1.FinIsActive,
						  Cast(SUM(${add.schema}UDF_ConvertCurrency(TdPftAccrueSusp,T1.FinCCY,'INR')) AS decimal(18,3))ProfitSuspended
				FROM	  FinanceMain T1 INNER JOIN
						  FinODDetails T2 ON T1.FinReference = T2.FinReference INNER JOIN
						  FinPftDetails T3 ON T1.FinReference = T3.FinReference INNER JOIN 
						  RMTCurrencies on T1.FinCCY=CCYCode
				WHERE	  FinCurODAmt  <![CDATA[>]]> 0 AND (T1.ClosingStatus !='C' or T1.ClosingStatus is null) and T1.Finstatus is not null  
				Group By T1.FinBranch,T1.Finstatus,T1.FinIsActive		
				UNION ALL			
				SELECT   T1.FinBranch,'Count',T1.Finstatus,  T1.FinIsActive,
					     Cast(Count(T2.FinReference) as decimal(18,3))  Count
				FROM	 FinanceMain T1 INNER JOIN
						 FinODDetails T2 ON T1.FinReference = T2.FinReference INNER JOIN
						 FinPftDetails T3 ON T1.FinReference = T3.FinReference INNER JOIN 
						 RMTCurrencies on T1.FinCCY=CCYCode	WHERE FinCurODAmt  <![CDATA[>]]> 0 
						 AND (T1.ClosingStatus !='C' or T1.ClosingStatus is null) and T1.Finstatus is not null
				Group By T1.FinBranch,T1.Finstatus,T1.FinIsActive  )T   INNER JOIN
			RMTBranches T4 ON T4.BranchCode=T.FinBranch

												   	</createView>   </changeSet>
 		<changeSet id="416" author="Kesava">
			<sql>
				Delete from RBFieldDetails where RBMODULE = 'FEES' and RBEVENT = 'ADDDBSP';
				Delete from RBFieldDetails where RBMODULE = 'FEES' and RBEVENT = 'ADDDBSF';
				Delete from RBFieldDetails where RBMODULE = 'FEES' and RBEVENT = 'ADDDBSN';
				
				Delete from RBFieldDetails where RBMODULE = 'Fees' and RBEVENT = 'ADDDBSP';
				Delete from RBFieldDetails where RBMODULE = 'Fees' and RBEVENT = 'ADDDBSF';
				Delete from RBFieldDetails where RBMODULE = 'Fees' and RBEVENT = 'ADDDBSN';
		
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ft_product', 'Product','nvarchar',8, 0,0, 'Product','static,global,dbvalue', 'Product');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ft_finCategory', 'Loan Category','nvarchar',8, 0,0, '','static,global', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ft_finCcy', 'Loan Type Currency','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ft_finDivision', 'Loan Division','nvarchar',8, 0,0, '','static,global', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custCtgCode', 'Customer Category','nvarchar',8, 0,0, 'CustomerCategory','static,global,dbvalue', 'CustomerCategory');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custTypeCode', 'Customer Type Code','nvarchar',8, 0,0, 'CustomerType','static,global,dbvalue', 'CustomerType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custShrtName', 'Customer Short Name','nvarchar',200, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custDftBranch', 'Customer Default Branch','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custGenderCode', 'Customer Gender Code','nvarchar',8, 0,0, 'Gender','static,global,dbvalue', 'Gender');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custCOB', 'Customer Country of Birth','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custIsStaff', 'Customer is Staff','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custIsMinor', 'Customer is Minor','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custIsBlackListed', 'Customre is Black Listed','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custIndustry', 'Customer Industry ','nvarchar',8, 0,0, 'Industry','static,global,dbvalue', 'Industry');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custSector', 'Customer Sector ','nvarchar',8, 0,0, 'Sector','static,global,dbvalue', 'Sector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custSubSector', 'Customer Sub Sector ','nvarchar',8, 0,0, 'SubSector','static,global,dbvalue', 'SubSector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custTotalIncome', 'Customer Total Income ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custTotalExpense', 'Customer Total Expense ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custMaritalSts', 'Customer Marital Status ','nvarchar',15, 0,0, 'MaritalStatusCode','static,global,dbvalue', 'MaritalStatusCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custSegment', 'Customer Segment ','nvarchar',8, 0,0, 'Segment','static,global,dbvalue', 'Segment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custSubSegment', 'Customer Sub Segment ','nvarchar',8, 0,0, 'SubSegment','static,global,dbvalue', 'SubSegment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custParentCountry', 'Customer Parent Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custResdCountry', 'Customer Residence Country','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custRiskCountry', 'Customer Risk Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_custNationality', 'Customer Nationality ','nchar',2, 0,0, 'NationalityCode','static,global,dbvalue', 'NationalityCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','ct_salariedCustomer', 'Customer Salaried ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finType', 'Loan Type ','nvarchar',8, 0,0, 'FinanceType','static,global,dbvalue', 'FinanceType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finCcy', 'Loan Currency ','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finBranch', 'Loan Branch ','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finAmount', 'Loan Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_downPayment', 'Downpayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_downPayBank', 'Downpayment Amount to Bank  ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_downPaySupl', 'Downpayment Amount to Supplier ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finPurpose', 'Loan Purpose ','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_finRepayMethod', 'Loan Repayment Method','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_stepFinance', 'Step Loan ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_numberOfTerms', 'Number of Terms ','int',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_reqRepayAmount', 'Repayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_repayProfitRate', 'Repayment profit Rate ','decimal',13, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSP','fm_scheduleMethod', 'Schedule Method','nvarchar',8, 0,0, '','static', '');
				
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ft_product', 'Product','nvarchar',8, 0,0, 'Product','static,global,dbvalue', 'Product');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ft_finCategory', 'Loan Category','nvarchar',8, 0,0, '','static,global', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ft_finCcy', 'Loan Type Currency','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ft_finDivision', 'Loan Division','nvarchar',8, 0,0, '','static,global', '');	
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custCtgCode', 'Customer Category','nvarchar',8, 0,0, 'CustomerCategory','static,global,dbvalue', 'CustomerCategory');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custTypeCode', 'Customer Type Code','nvarchar',8, 0,0, 'CustomerType','static,global,dbvalue', 'CustomerType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custShrtName', 'Customer Short Name','nvarchar',200, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custDftBranch', 'Customer Default Branch','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custGenderCode', 'Customer Gender Code','nvarchar',8, 0,0, 'Gender','static,global,dbvalue', 'Gender');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custCOB', 'Customer Country of Birth','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custIsStaff', 'Customer is Staff','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custIsMinor', 'Customer is Minor','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custIsBlackListed', 'Customre is Black Listed','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custIndustry', 'Customer Industry ','nvarchar',8, 0,0, 'Industry','static,global,dbvalue', 'Industry');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custSector', 'Customer Sector ','nvarchar',8, 0,0, 'Sector','static,global,dbvalue', 'Sector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custSubSector', 'Customer Sub Sector ','nvarchar',8, 0,0, 'SubSector','static,global,dbvalue', 'SubSector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custTotalIncome', 'Customer Total Income ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custTotalExpense', 'Customer Total Expense ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custMaritalSts', 'Customer Marital Status ','nvarchar',15, 0,0, 'MaritalStatusCode','static,global,dbvalue', 'MaritalStatusCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custSegment', 'Customer Segment ','nvarchar',8, 0,0, 'Segment','static,global,dbvalue', 'Segment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custSubSegment', 'Customer Sub Segment ','nvarchar',8, 0,0, 'SubSegment','static,global,dbvalue', 'SubSegment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custParentCountry', 'Customer Parent Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custResdCountry', 'Customer Residence Country','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custRiskCountry', 'Customer Risk Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_custNationality', 'Customer Nationality ','nchar',2, 0,0, 'NationalityCode','static,global,dbvalue', 'NationalityCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','ct_salariedCustomer', 'Customer Salaried ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finType', 'Loan Type ','nvarchar',8, 0,0, 'FinanceType','static,global,dbvalue', 'FinanceType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finCcy', 'Loan Currency ','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finBranch', 'Loan Branch ','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finAmount', 'Loan Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_downPayment', 'Downpayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_downPayBank', 'Downpayment Amount to Bank  ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_downPaySupl', 'Downpayment Amount to Supplier ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finPurpose', 'Loan Purpose ','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_finRepayMethod', 'Loan Repayment Method','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_stepFinance', 'Step Loan ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_numberOfTerms', 'Number of Terms ','int',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_reqRepayAmount', 'Repayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_repayProfitRate', 'Repayment profit Rate ','decimal',13, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSF','fm_scheduleMethod', 'Schedule Method','nvarchar',8, 0,0, '','static', '');
				
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ft_product', 'Product','nvarchar',8, 0,0, 'Product','static,global,dbvalue', 'Product');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ft_finCategory', 'Loan Category','nvarchar',8, 0,0, '','static,global', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ft_finCcy', 'Loan Type Currency','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ft_finDivision', 'Loan Division','nvarchar',8, 0,0, '','static,global', '');	
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custCtgCode', 'Customer Category','nvarchar',8, 0,0, 'CustomerCategory','static,global,dbvalue', 'CustomerCategory');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custTypeCode', 'Customer Type Code','nvarchar',8, 0,0, 'CustomerType','static,global,dbvalue', 'CustomerType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custShrtName', 'Customer Short Name','nvarchar',200, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custDftBranch', 'Customer Default Branch','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custGenderCode', 'Customer Gender Code','nvarchar',8, 0,0, 'Gender','static,global,dbvalue', 'Gender');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custCOB', 'Customer Country of Birth','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custIsStaff', 'Customer is Staff','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custIsMinor', 'Customer is Minor','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custIsBlackListed', 'Customre is Black Listed','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custIndustry', 'Customer Industry ','nvarchar',8, 0,0, 'Industry','static,global,dbvalue', 'Industry');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custSector', 'Customer Sector ','nvarchar',8, 0,0, 'Sector','static,global,dbvalue', 'Sector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custSubSector', 'Customer Sub Sector ','nvarchar',8, 0,0, 'SubSector','static,global,dbvalue', 'SubSector');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custTotalIncome', 'Customer Total Income ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custTotalExpense', 'Customer Total Expense ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custMaritalSts', 'Customer Marital Status ','nvarchar',15, 0,0, 'MaritalStatusCode','static,global,dbvalue', 'MaritalStatusCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custSegment', 'Customer Segment ','nvarchar',8, 0,0, 'Segment','static,global,dbvalue', 'Segment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custSubSegment', 'Customer Sub Segment ','nvarchar',8, 0,0, 'SubSegment','static,global,dbvalue', 'SubSegment');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custParentCountry', 'Customer Parent Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custResdCountry', 'Customer Residence Country','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custRiskCountry', 'Customer Risk Country ','nchar',2, 0,0, 'Country','static,global,dbvalue', 'Country');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_custNationality', 'Customer Nationality ','nchar',2, 0,0, 'NationalityCode','static,global,dbvalue', 'NationalityCode');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','ct_salariedCustomer', 'Customer Salaried ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finType', 'Loan Type ','nvarchar',8, 0,0, 'FinanceType','static,global,dbvalue', 'FinanceType');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finCcy', 'Loan Currency ','nchar',3, 0,0, 'Currency','static,global,dbvalue', 'Currency');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finBranch', 'Loan Branch ','nvarchar',12, 0,0, 'BankBranch','static,global,dbvalue', 'BankBranch');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finAmount', 'Loan Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_downPayment', 'Downpayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_downPayBank', 'Downpayment Amount to Bank  ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_downPaySupl', 'Downpayment Amount to Supplier ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finPurpose', 'Loan Purpose ','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_finRepayMethod', 'Loan Repayment Method','nvarchar',8, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_stepFinance', 'Step Loan ','nchar',1, 0,0, '','static', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_numberOfTerms', 'Number of Terms ','int',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_reqRepayAmount', 'Repayment Amount ','decimal',18, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_repayProfitRate', 'Repayment profit Rate ','decimal',13, 0,0, '','static,global,calvalue', '');
				Insert into RBFieldDetails Values ('FEES','ADDDBSN','fm_scheduleMethod', 'Schedule Method','nvarchar',8, 0,0, '','static', '');
			</sql>
		</changeSet>
			<changeSet id="417" author="Prasad">
		<dropPrimaryKey constraintName="PK_ERRORDETAILS" tableName="ERRORDETAILS" />
		</changeSet>
		
		<changeSet id="418" author="Prasad">
			<addPrimaryKey columnNames="ERRORCODE" constraintName="PK_ERRORDETAILS"
				tableName="ERRORDETAILS" />
		</changeSet>
		
			<changeSet id="419" author="Prasad">
			<dropPrimaryKey constraintName="PK_ERRORDETAILS_TEMP" tableName="ERRORDETAILS_TEMP" />
		</changeSet>
		
		<changeSet id="420" author="Prasad">
			<addPrimaryKey columnNames="ERRORCODE" constraintName="PK_ERRORDETAILS_TEMP"
				tableName="ERRORDETAILS_TEMP" />
		</changeSet>
			<changeSet id="421" author="Pruthvi">	
			<sql>
			update reportlist set
Fieldvalues='customerId,custCIF,custShrtName,custGrpCode,groupName,structureName,responsibleBranch,limitCcy,limitExpiryDate,limitRvwDate,active',
FieldType='long,String,String,String,String,String,String,String,Date,Date,int,String,String',
ReportFileName='ReportList10_ListUtil'
where Code='LimitUtilization';
			</sql>
			</changeSet>
			
			<changeSet id="423" author="durgaprasad.g">
			<sql>
		    	Delete from ErrorDetails Where ErrorCode = 'CL001';
				INsert into Errordetails Values ('CL001','EN','E','Collateral Ref:{0} assigned to Multiple Loans <![CDATA[&]]> should not allow to remove Multi Loan Assignment.',
				'','Approved','','','','','',0, null,1000,0);
			</sql>
		</changeSet>
	<changeSet id="424" author="pruthvi">	
	<sql>
	update reportlist set
FieldLabels='listheader_IdORGrp.label,listheader_CustORGrpName.label,listheader_LimitStructureCode.label,listheader_ResponsibleBranch.label,listheader_Currency.label,listheader_ExpiryDate.label,listheader_ReviewDate.label,listheader_Active.label',
Fieldvalues='customerId,custCIF,custShrtName,custGrpCode,groupName,structureName,responsibleBranch,limitCcy,limitExpiryDate,limitRvwDate,active,customerGroup,ruleCode,queryDesc',
FieldType='long,String,String,String,String,String,String,String,Date,Date,int,long,String,String',
ReportFileName='ReportList08_Listutil'
where Code='LimitUtilization';
	</sql>
	</changeSet>
		<changeSet id="425" author="pruthvi">	
		<createView replaceIfExists="true" viewName="BMTINDUSTRIES_VIEW">
		(SELECT T1.IndustryCode ,
           T1.SubSectorCode ,
           NULL lovDescSubSectorCodeName  ,
           T1.IndustryDesc ,
           T1.IndustryLimit ,
           T1.IndustryIsActive ,
           T1.Version ,
           T1.LastMntBy ,
           T1.LastMntOn ,
           T1.RecordStatus ,
           T1.RoleCode ,
           T1.NextRoleCode ,
           T1.TaskId ,
           T1.NextTaskId ,
           T1.RecordType ,
           T1.WorkflowId 
     FROM BMTIndustries_Temp T1)
   UNION ALL 
   (SELECT T1.IndustryCode ,
           T1.SubSectorCode ,
           NULL lovDescSubSectorCodeName  ,
           T1.IndustryDesc ,
           T1.IndustryLimit ,
           T1.IndustryIsActive ,
           T1.Version ,
           T1.LastMntBy ,
           T1.LastMntOn ,
           T1.RecordStatus ,
           T1.RoleCode ,
           T1.NextRoleCode ,
           T1.TaskId ,
           T1.NextTaskId ,
           T1.RecordType ,
           T1.WorkflowId 
     FROM BMTIndustries T1
     WHERE NOT EXISTS ( SELECT 1 
                        FROM BMTIndustries_Temp 
                          WHERE IndustryCode = T1.IndustryCode))
		</createView>
		</changeSet>
		<changeSet id="426" author="pruthvi">	
		<sql>
		update reportlist 
set fieldlabels='listheader_IdORGrp.label,listheader_CustORGrpName.label,listheader_LimitStructureCode.label,listheader_ResponsibleBranch.label,listheader_Currency.label,listheader_ExpiryDate.label,listheader_ReviewDate.label,listheader_Active.label',
fieldvalues='customerId,custCIF,custShrtName,custGrpCode,groupName,structureName,responsibleBranch,limitCcy,limitExpiryDate,limitRvwDate,active,customerGroup,ruleCode,queryDesc',
fieldtype='long,String,String,String,String,String,String,String,Date,Date,int,long,String,String',
reportfilename='ReportList08_Listutil'
where code='LimitHeader'
</sql>
</changeSet>
<changeSet id="427" author="pruthvi">  <dropTable tableName="CustomerCorp_Add" /> </changeSet> 
<changeSet id="428" author="pruthvi">  <dropTable tableName="CustomerCorp_Add_Temp" /> </changeSet>
<changeSet id="429" author="pruthvi">  <dropTable tableName="LMTAircraftLoanDetail" /> </changeSet>
<changeSet id="430" author="pruthvi">  <dropTable tableName="LMTAircraftLoanDetail_Temp" /> </changeSet>
<changeSet id="431" author="pruthvi">  <dropTable tableName="LMTCarLoanDetail" /> </changeSet>
<changeSet id="432" author="pruthvi">  <dropTable tableName="LMTCarLoanDetail_AD" /> </changeSet>
<changeSet id="433" author="pruthvi">  <dropTable tableName="LMTCarLoanDetail_AD_Temp" /> </changeSet>
<changeSet id="434" author="pruthvi">  <dropTable tableName="LMTCarLoanDetail_Temp" /> </changeSet>
<changeSet id="435" author="pruthvi">  <dropTable tableName="LMTChequeFinance" /> </changeSet>
<changeSet id="436" author="pruthvi">  <dropTable tableName="LMTChequeFinance_Temp" /> </changeSet>
<changeSet id="437" author="pruthvi">  <dropTable tableName="LMTEducationLoanDetail" /> </changeSet>
<changeSet id="438" author="pruthvi">  <dropTable tableName="LMTEducationLoanDetail_AD" /> </changeSet>
<changeSet id="439" author="pruthvi">  <dropTable tableName="LMTEducationLoanDetail_AD_Temp" /> </changeSet>
<changeSet id="440" author="pruthvi">  <dropTable tableName="LMTEducationLoanDetail_Temp" /> </changeSet>
<changeSet id="441" author="pruthvi">  <dropTable tableName="LMTEduExpenseDetail" /> </changeSet>
<changeSet id="442" author="pruthvi">  <dropTable tableName="LMTEduExpenseDetail_Temp" /> </changeSet>
<changeSet id="443" author="pruthvi">  <dropTable tableName="LMTEquipmentLoanDetail" /> </changeSet>
<changeSet id="444" author="pruthvi">  <dropTable tableName="LMTEquipmentLoanDetail_Temp" /> </changeSet>
<changeSet id="445" author="pruthvi">  <dropTable tableName="LMTFinancePurposeDetail" /> </changeSet>
<changeSet id="446" author="pruthvi">  <dropTable tableName="LMTFinancePurposeDetail_Temp" /> </changeSet>
<changeSet id="447" author="pruthvi">  <dropTable tableName="LMTGenGoodsLoanDetail" /> </changeSet>
<changeSet id="448" author="pruthvi">  <dropTable tableName="LMTGenGoodsLoanDetail_Temp" /> </changeSet>
<changeSet id="449" author="pruthvi">  <dropTable tableName="LMTGoodsLoanDetail" /> </changeSet>
<changeSet id="450" author="pruthvi">  <dropTable tableName="LMTGoodsLoanDetail_Temp" /> </changeSet>
<changeSet id="451" author="pruthvi">  <dropTable tableName="LMTHomeLoanDetail" /> </changeSet>
<changeSet id="452" author="pruthvi">  <dropTable tableName="LMTHomeLoanDetail_AD" /> </changeSet>
<changeSet id="453" author="pruthvi">  <dropTable tableName="LMTHomeLoanDetail_AD_Temp" /> </changeSet>
<changeSet id="454" author="pruthvi">  <dropTable tableName="LMTHomeLoanDetail_PA" /> </changeSet>
<changeSet id="455" author="pruthvi">  <dropTable tableName="LMTHomeLoanDetail_temp" /> </changeSet>
<changeSet id="456" author="pruthvi">  <dropTable tableName="LMTInvestmentLoanDetail" /> </changeSet>
<changeSet id="457" author="pruthvi">  <dropTable tableName="LMTInvestmentLoanDetail_Temp" /> </changeSet>
<changeSet id="458" author="pruthvi">  <dropTable tableName="LMTInvoiceFinance" /> </changeSet>
<changeSet id="459" author="pruthvi">  <dropTable tableName="LMTInvoiceFinance_Temp" /> </changeSet>
<changeSet id="460" author="pruthvi">  <dropTable tableName="LMTMortgageLoanDetail" /> </changeSet>
<changeSet id="461" author="pruthvi">  <dropTable tableName="LMTMortgageLoanDetail_AD" /> </changeSet>
<changeSet id="462" author="pruthvi">  <dropTable tableName="LMTMortgageLoanDetail_AD_Temp" /> </changeSet>
<changeSet id="463" author="pruthvi">  <dropTable tableName="LMTMortgageLoanDetail_Temp" /> </changeSet>
<changeSet id="464" author="pruthvi">  <dropTable tableName="LMTPartnershipHeader" /> </changeSet>
<changeSet id="465" author="pruthvi">  <dropTable tableName="LMTPartnershipHeader_Temp" /> </changeSet>
<changeSet id="466" author="pruthvi">  <dropTable tableName="LMTPPCFinance" /> </changeSet>
<changeSet id="467" author="pruthvi">  <dropTable tableName="LMTPPCFinance_Temp" /> </changeSet>
<changeSet id="468" author="pruthvi">  <dropTable tableName="LMTPSMortgageDetail" /> </changeSet>
<changeSet id="469" author="pruthvi">  <dropTable tableName="LMTPSMortgageDetail_Temp" /> </changeSet>
<changeSet id="470" author="pruthvi">  <dropTable tableName="LMTSharesDetail" /> </changeSet>
<changeSet id="471" author="pruthvi">  <dropTable tableName="LMTSharesDetail_Temp" /> </changeSet>
<changeSet id="472" author="pruthvi">  <dropTable tableName="LMTShipLoanDetail" /> </changeSet>
<changeSet id="473" author="pruthvi">  <dropTable tableName="LMTShipLoanDetail_Temp" /> </changeSet>
<changeSet id="474" author="pruthvi">  <dropTable tableName="LMTSukukLoanDetail" /> </changeSet>
<changeSet id="475" author="pruthvi">  <dropTable tableName="LMTSukukLoanDetail_PA" /> </changeSet>
<changeSet id="476" author="pruthvi">  <dropTable tableName="LMTSukukLoanDetail_Temp" /> </changeSet>
<changeSet id="477" author="pruthvi">  <dropTable tableName="LMTTakeoverDetail" /> </changeSet>
<changeSet id="478" author="pruthvi">  <dropTable tableName="LMTTakeoverDetail_Temp" /> </changeSet>
<changeSet id="479" author="Pruthvi">
		<dropView viewName="LMTAIRCRAFTLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="480" author="Pruthvi">
		<dropView viewName="LMTAIRCRAFTLOANDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="481" author="Pruthvi">
		<dropView viewName="LMTAIRCRAFTLOANDETAIL_VIEW" />
		</changeSet>
		<changeSet id="482" author="Pruthvi">
		<dropView viewName="LMTCARLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="483" author="Pruthvi">
		<dropView viewName="LMTCARLOANDETAIL_TVIEW" />
		</changeSet><changeSet id="484" author="Pruthvi">
		<dropView viewName="LMTCARLOANDETAIL_VIEW" />
		</changeSet>
		<changeSet id="485" author="Pruthvi">
		<dropView viewName="LMTCHEQUEFINANCE_AVIEW" />
		</changeSet><changeSet id="486" author="Pruthvi">
		<dropView viewName="LMTCHEQUEFINANCE_TVIEW" />
		</changeSet><changeSet id="487" author="Pruthvi">
		<dropView viewName="LMTCHEQUEFINANCE_VIEW" />
		</changeSet>
		<changeSet id="488" author="Pruthvi">
		<dropView viewName="LMTEDUCATIONLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="489" author="Pruthvi">
		<dropView viewName="LMTEDUCATIONLOANDETAIL_TVIEW" />
		</changeSet><changeSet id="490" author="Pruthvi">
		<dropView viewName="LMTEDUCATIONLOANDETAIL_VIEW" />
		</changeSet><changeSet id="491" author="Pruthvi">
		<dropView viewName="LMTEDUEXPENSEDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="492" author="Pruthvi">
		<dropView viewName="LMTEDUEXPENSEDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="493" author="Pruthvi">
		<dropView viewName="LMTEDUEXPENSEDETAIL_VIEW" />
		</changeSet><changeSet id="494" author="Pruthvi">
		<dropView viewName="LMTEQUIPMENTLOANDETAIL_AVIEW" />
		</changeSet><changeSet id="495" author="Pruthvi">
		<dropView viewName="LMTEQUIPMENTLOANDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="496" author="Pruthvi">
		<dropView viewName="LMTEQUIPMENTLOANDETAIL_VIEW" />
		</changeSet><changeSet id="497" author="Pruthvi">
		<dropView viewName="LMTFINANCEPURPOSEDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="498" author="Pruthvi">
		<dropView viewName="LMTFINANCEPURPOSEDETAIL_TVIEW" />
		</changeSet><changeSet id="499" author="Pruthvi">
		<dropView viewName="LMTFINANCEPURPOSEDETAIL_VIEW" />
		</changeSet><changeSet id="500" author="Pruthvi">
		<dropView viewName="LMTGENGOODSLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="501" author="Pruthvi">
		<dropView viewName="LMTGENGOODSLOANDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="502" author="Pruthvi">
		<dropView viewName="LMTGENGOODSLOANDETAIL_VIEW" />
		</changeSet><changeSet id="503" author="Pruthvi">
		<dropView viewName="LMTGOODSLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="504" author="Pruthvi">
		<dropView viewName="LMTGOODSLOANDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="505" author="Pruthvi">
		<dropView viewName="LMTGOODSLOANDETAIL_VIEW" />
		</changeSet>
		<changeSet id="506" author="Pruthvi">
		<dropView viewName="LMTHOMELOANDETAIL_AVIEW" />
		</changeSet><changeSet id="507" author="Pruthvi">
		<dropView viewName="LMTHOMELOANDETAIL_TVIEW" />
		</changeSet><changeSet id="508" author="Pruthvi">
		<dropView viewName="LMTHOMELOANDETAIL_VIEW" />
		</changeSet>
		<changeSet id="509" author="Pruthvi">
		<dropView viewName="LMTINVESTMENTLOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="510" author="Pruthvi">
		<dropView viewName="LMTINVESTMENTLOANDETAIL_TVIEW" />
		</changeSet><changeSet id="511" author="Pruthvi">
		<dropView viewName="LMTINVESTMENTLOANDETAIL_VIEW" />
		</changeSet><changeSet id="512" author="Pruthvi">
		<dropView viewName="LMTINVOICEFINANCE_AVIEW" />
		</changeSet><changeSet id="513" author="Pruthvi">
		<dropView viewName="LMTINVOICEFINANCE_TVIEW" />
		</changeSet><changeSet id="514" author="Pruthvi">
		<dropView viewName="LMTINVOICEFINANCE_VIEW" />
		</changeSet><changeSet id="515" author="Pruthvi">
		<dropView viewName="LMTMORTGAGELOANDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="516" author="Pruthvi">
		<dropView viewName="LMTMORTGAGELOANDETAIL_TVIEW" />
		</changeSet><changeSet id="517" author="Pruthvi">
		<dropView viewName="LMTMORTGAGELOANDETAIL_VIEW" />
		</changeSet><changeSet id="518" author="Pruthvi">
		<dropView viewName="LMTPPCFINANCE_AVIEW" />
		</changeSet><changeSet id="519" author="Pruthvi">
		<dropView viewName="LMTPPCFINANCE_TVIEW" />
		</changeSet><changeSet id="520" author="Pruthvi">
		<dropView viewName="LMTPPCFINANCE_VIEW" />
		</changeSet><changeSet id="521" author="Pruthvi">
		<dropView viewName="LMTPSMORTGAGEDETAIL_AVIEW" />
		</changeSet><changeSet id="522" author="Pruthvi">
		<dropView viewName="LMTPSMORTGAGEDETAIL_VIEW" />
		</changeSet><changeSet id="523" author="Pruthvi">
		<dropView viewName="LMTSHARESDETAIL_AVIEW" />
		</changeSet><changeSet id="524" author="Pruthvi">
		<dropView viewName="LMTSHARESDETAIL_TVIEW" />
		</changeSet><changeSet id="525" author="Pruthvi">
		<dropView viewName="LMTSHARESDETAIL_VIEW" />
		</changeSet><changeSet id="526" author="Pruthvi">
		<dropView viewName="LMTSHIPLOANDETAIL_AVIEW" />
		</changeSet><changeSet id="527" author="Pruthvi">
		<dropView viewName="LMTSHIPLOANDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="528" author="Pruthvi">
		<dropView viewName="LMTSHIPLOANDETAIL_VIEW" />
		</changeSet><changeSet id="529" author="Pruthvi">
		<dropView viewName="LMTSUKUKLOANDETAIL_AVIEW" />
		</changeSet><changeSet id="530" author="Pruthvi">
		<dropView viewName="LMTSUKUKLOANDETAIL_TVIEW" />
		</changeSet><changeSet id="531" author="Pruthvi">
		<dropView viewName="LMTSUKUKLOANDETAIL_VIEW" />
		</changeSet><changeSet id="532" author="Pruthvi">
		<dropView viewName="LMTTAKEOVERDETAIL_AVIEW" />
		</changeSet>
		<changeSet id="533" author="Pruthvi">
		<dropView viewName="LMTTAKEOVERDETAIL_TVIEW" />
		</changeSet>
		<changeSet id="534" author="Pruthvi">
		<dropView viewName="LMTTAKEOVERDETAIL_VIEW" />
		</changeSet>
		<changeSet id="535" author="Pruthvi" dbms="oracle">
		<sql>
		drop procedure GENERATE_VIEW_COUNTS;
		</sql>
		</changeSet>
		<changeSet id="536" author="Pruthvi" dbms="oracle">
		<sql>
		drop procedure SP_AUDITDATAPURGING;
		</sql>
		</changeSet>
		<changeSet id="537" author="Pruthvi" dbms="oracle">
		<sql>
		drop procedure TEST1;	
		</sql>
		</changeSet>
		<changeSet id="538" author="Pruthvi" dbms="oracle">
		<sql>
		drop procedure SP_DELETEFINANCE;
		</sql>
		</changeSet>
		<changeSet id="539" author="Pruthvi" dbms="oracle">
		<sql>
		drop procedure TABLECOUNT;
		</sql>
		</changeSet>
		 <changeSet id="537" author="Pruthvi"  dbms="mssql">
		 <sql>
		drop procedure SP_DELETEFINANCE;
		</sql>  </changeSet>
		 <changeSet id="538" author="Pruthvi" dbms="mssql">
		 <sql>
		drop procedure TABLECOUNT;
		</sql>  </changeSet>
		 </databaseChangeLog>