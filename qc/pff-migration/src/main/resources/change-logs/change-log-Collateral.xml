<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

	<property name="add.schema" value="dbo." dbms="mssql" />
	<property name="add.schema" value="" dbms="oracle" />
	<property name="add.schema" value="" dbms="postgresql" />
	<property name="call.substr" value="substring" dbms="mssql" />
	<property name="call.substr" value="substr" dbms="oracle" />
	<property name="call.substr" value="substring" dbms="postgresql" />
	<property name="call.auditdb" value="PLFAVANSEQC.." dbms="mssql" />
	<property name="call.auditdb" value=" " dbms="oracle" />
	<property name="call.concatenate" value="+" dbms="mssql" />
	<property name="call.concatenate" value="||" dbms="oracle" />
	<property name="call.concatenate" value="||" dbms="postgresql" />
	<property name="call.collength" value="LEN" dbms="mssql" />
	<property name="call.collength" value="LENGTH" dbms="oracle" />
	<property name="call.collength" value="LENGTH" dbms="postgresql" />
	<property name="call.date" value="getdate()" dbms="mssql" />
	<property name="call.date" value="sysdate" dbms="oracle" />
	<property name="call.date" value="now()" dbms="postgresql" />


	<changeSet id="pre_run_for_pgp" author="Jayant" runAlways="true"
		dbms="postgresql">
		<sql>
			Set search_path = plf,public,pg_catalog;
		</sql>
	</changeSet>

	<changeSet id="1" author="Durgaprasad G">
		<addColumn tableName="Collateralsetup">
			<column name="finReference" type="VARCHAR2(20)"/>
		</addColumn>
	</changeSet>
	<changeSet id="2" author="Durgaprasad G">
		<addColumn tableName="Collateralsetup_Temp">
			<column name="finReference" type="VARCHAR2(20)"/>
		</addColumn>
	</changeSet>
	<changeSet id="3.1" author="Durgaprasad G">
		<createView viewName="collateralsetup_view" replaceIfExists="true">
					SELECT t1.collateralref,
					t1.finReference,
				    t1.depositorid,
				    t1.collateraltype,
				    t1.collateralccy,
				    t1.maxcollateralvalue,
				    t1.specialltv,
				    t1.collateralloc,
				    t1.valuator,
				    t1.expirydate,
				    t1.reviewfrequency,
				    t1.nextreviewdate,
				    t1.multiloanassignment,
				    t1.thirdpartyassignment,
				    t1.remarks,
				    t1.collateralvalue,
				    t1.bankltv,
				    t1.bankvaluation,
				    t1.version,
				    t1.lastmntby,
				    t1.lastmnton,
				    t1.recordstatus,
				    t1.rolecode,
				    t1.nextrolecode,
				    t1.taskid,
				    t1.nexttaskid,
				    t1.recordtype,
				    t1.workflowid,
				    t1.createdby,
				    t1.createdon,
				    t2.custcif AS depositorcif,
				    t3.collateraldesc AS collateraltypename,
				    t2.custshrtname AS depositorname
				   FROM collateralsetup_temp t1
				     JOIN customers t2 ON t2.custid = t1.depositorid
				     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
				UNION ALL
				 SELECT t1.collateralref,
					t1.finReference,
				    t1.depositorid,
				    t1.collateraltype,
				    t1.collateralccy,
				    t1.maxcollateralvalue,
				    t1.specialltv,
				    t1.collateralloc,
				    t1.valuator,
				    t1.expirydate,
				    t1.reviewfrequency,
				    t1.nextreviewdate,
				    t1.multiloanassignment,
				    t1.thirdpartyassignment,
				    t1.remarks,
				    t1.collateralvalue,
				    t1.bankltv,
				    t1.bankvaluation,
				    t1.version,
				    t1.lastmntby,
				    t1.lastmnton,
				    t1.recordstatus,
				    t1.rolecode,
				    t1.nextrolecode,
				    t1.taskid,
				    t1.nexttaskid,
				    t1.recordtype,
				    t1.workflowid,
				    t1.createdby,
				    t1.createdon,
				    t2.custcif AS depositorcif,
				    t3.collateraldesc AS collateraltypename,
				    t2.custshrtname AS depositorname
				   FROM collateralsetup t1
				     JOIN customers t2 ON t2.custid = t1.depositorid
				     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
				  WHERE NOT (EXISTS ( SELECT 1
				           FROM collateralsetup_temp
				          WHERE collateralsetup_temp.collateralref = t1.collateralref))
		</createView>
	</changeSet>
	
	<changeSet id="4.1" author="Durgaprasad G">
	<createView viewName="collateralsetup_aview" replaceIfExists="true">
		SELECT t1.collateralref,
	    t1.finReference,
	    t1.depositorid,
	    t1.collateraltype,
	    t1.collateralccy,
	    t1.maxcollateralvalue,
	    t1.specialltv,
	    t1.collateralloc,
	    t1.valuator,
	    t1.expirydate,
	    t1.reviewfrequency,
	    t1.nextreviewdate,
	    t1.multiloanassignment,
	    t1.thirdpartyassignment,
	    t1.remarks,
	    t1.collateralvalue,
	    t1.bankltv,
	    t1.bankvaluation,
	    t1.version,
	    t1.lastmntby,
	    t1.lastmnton,
	    t1.recordstatus,
	    t1.rolecode,
	    t1.nextrolecode,
	    t1.taskid,
	    t1.nexttaskid,
	    t1.recordtype,
	    t1.workflowid,
	    t1.createdby,
	    t1.createdon,
	    t2.custcif AS depositorcif,
	    t3.collateraldesc AS collateraltypename,
	    t2.custshrtname AS depositorname
	   FROM collateralsetup t1
	     JOIN customers t2 ON t2.custid = t1.depositorid
	     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
	</createView>
	</changeSet>
	<changeSet id="5.1" author="Durgaprasad G">
	<createView viewName="collateralsetup_tview" replaceIfExists="true">
		SELECT t1.collateralref,
	    t1.finReference,
	    t1.depositorid,
	    t1.collateraltype,
	    t1.collateralccy,
	    t1.maxcollateralvalue,
	    t1.specialltv,
	    t1.collateralloc,
	    t1.valuator,
	    t1.expirydate,
	    t1.reviewfrequency,
	    t1.nextreviewdate,
	    t1.multiloanassignment,
	    t1.thirdpartyassignment,
	    t1.remarks,
	    t1.collateralvalue,
	    t1.bankltv,
	    t1.bankvaluation,
	    t1.version,
	    t1.lastmntby,
	    t1.lastmnton,
	    t1.recordstatus,
	    t1.rolecode,
	    t1.nextrolecode,
	    t1.taskid,
	    t1.nexttaskid,
	    t1.recordtype,
	    t1.workflowid,
	    t1.createdby,
	    t1.createdon,
	    t2.custcif AS depositorcif,
	    t3.collateraldesc AS collateraltypename,
	    t2.custshrtname AS depositorname
	   FROM collateralsetup_temp t1
	     JOIN customers t2 ON t2.custid = t1.depositorid
	     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
	</createView>
	</changeSet>
	
	<changeSet id="6.1" author="Durgaprasad G">
		<createView viewName="collateralassignment_CTView" replaceIfExists="true">
				SELECT ca.module,
			    ca.reference,
			    ca.collateralref,
			    ca.assignperc,
			    cs.collateralccy,
			    ca.active,
			    cs.collateralvalue,
			    cs.bankvaluation,
			    t.totassignperc - ca.assignperc AS totassignperc,
			    fm.fincurrassetvalue - fm.downpayment + fm.feechargeamt + fm.insuranceamt - fm.finrepaymentamount AS utilizedamount,
			    ca.version,
			    ca.lastmntby,
			    ca.lastmnton,
			    ca.recordstatus,
			    ca.rolecode,
			    ca.nextrolecode,
			    ca.taskid,
			    ca.nexttaskid,
			    ca.recordtype,
			    ca.workflowid,
			    cs.specialltv,
			    cs.bankltv
			   FROM collateralassignment_temp ca
			     JOIN collateralsetup_temp cs ON ca.collateralref = cs.collateralref
			     LEFT JOIN ( SELECT t1.collateralref,
			            sum(t1.assignperc) AS totassignperc
			           FROM ( SELECT collateralassignment_temp.reference,
			                    collateralassignment_temp.collateralref,
			                    collateralassignment_temp.assignperc
			                   FROM collateralassignment_temp
			                UNION
			                 SELECT ca_1.reference,
			                    ca_1.collateralref,
			                    ca_1.assignperc
			                   FROM collateralassignment ca_1
			                  WHERE NOT (EXISTS ( SELECT 1
			                           FROM collateralassignment_temp
			                          WHERE collateralassignment_temp.collateralref = ca_1.collateralref AND collateralassignment_temp.module = ca_1.module AND collateralassignment_temp.reference = ca_1.reference))) t1
			          GROUP BY t1.collateralref) t ON t.collateralref = ca.collateralref
			     LEFT JOIN financemain_temp fm ON ca.reference = fm.finreference
	     </createView>
	</changeSet>
	
	<changeSet id="7" author="Durgaprasad g">
		<sql>
			UPDATE SEQSECRIGHTS SET SEQNO= (SELECT MAX(RIGHTID) FROM SECRIGHTS);
			UPDATE SEQSECGROUPS SET SEQNO= (SELECT MAX(GRPID) FROM SECGROUPS);
			
            INSERT INTO SECRIGHTS SELECT (SELECT MAX(RIGHTID)+1 FROM SECRIGHTS), 3, 'button_CollateralAssignmentDetailDialog_btnNewCollateral','CollateralAssignmentDetailDialog',0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0 FROM SEQSECRIGHTS WHERE 0=0; 
			INSERT INTO SECRIGHTS SELECT (SELECT MAX(RIGHTID)+1 FROM SECRIGHTS), 3, 'button_CollateralAssignmentDetailDialog_btnEditCollateral','CollateralAssignmentDetailDialog',0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0 FROM SEQSECRIGHTS WHERE 0=0; 
			  	
			INSERT INTO SECGROUPRIGHTS VALUES((SELECT MAX(GRPRIGHTID)+1 FROM SECGROUPRIGHTS), (SELECT GRPID  FROM SECGROUPS WHERE GRPCODE='COLLATERALASSIGN_NEW') ,(SELECT RIGHTID FROM SECRIGHTS WHERE RIGHTNAME='button_CollateralAssignmentDetailDialog_btnNewCollateral'), 1, 0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0);
			INSERT INTO SECGROUPRIGHTS VALUES((SELECT MAX(GRPRIGHTID)+1 FROM SECGROUPRIGHTS), (SELECT GRPID  FROM SECGROUPS WHERE GRPCODE='COLLATERALASSIGN_NEW') ,(SELECT RIGHTID FROM SECRIGHTS WHERE RIGHTNAME='button_CollateralAssignmentDetailDialog_btnEditCollateral'), 1, 0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0);
			
			UPDATE SEQSECRIGHTS SET SEQNO= (SELECT MAX(RIGHTID) FROM SECRIGHTS);
			UPDATE SEQSECGROUPS SET SEQNO= (SELECT MAX(GRPID) FROM SECGROUPS);
		</sql>
	</changeSet>
	
	<changeSet id="8" author="Durgaprasad G">
		<addColumn tableName="Collateralsetup">
			<column name="status" type="VARCHAR2(20)"/>
		</addColumn>
	</changeSet>
	
	<changeSet id="9" author="Durgaprasad G">
		<addColumn tableName="Collateralsetup_Temp">
			<column name="status" type="VARCHAR2(20)"/>
		</addColumn>
	</changeSet>
	
	<changeSet id="10.1" author="Durgaprasad G">
		<createView viewName="collateralsetup_view" replaceIfExists="true">
					SELECT t1.collateralref,
					t1.finReference,
				    t1.depositorid,
				    t1.collateraltype,
				    t1.collateralccy,
				    t1.maxcollateralvalue,
				    t1.specialltv,
				    t1.collateralloc,
				    t1.valuator,
				    t1.expirydate,
				    t1.reviewfrequency,
				    t1.nextreviewdate,
				    t1.multiloanassignment,
				    t1.thirdpartyassignment,
				    t1.remarks,
				    t1.collateralvalue,
				    t1.bankltv,
				    t1.bankvaluation,
				    t1.version,
				    t1.lastmntby,
				    t1.lastmnton,
				    t1.recordstatus,
				    t1.rolecode,
				    t1.nextrolecode,
				    t1.taskid,
				    t1.nexttaskid,
				    t1.recordtype,
				    t1.workflowid,
				    t1.createdby,
				    t1.createdon,
				    t1.status,
				    t2.custcif AS depositorcif,
				    t3.collateraldesc AS collateraltypename,
				    t2.custshrtname AS depositorname
				   FROM collateralsetup_temp t1
				     JOIN customers t2 ON t2.custid = t1.depositorid
				     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
				UNION ALL
				 SELECT t1.collateralref,
					t1.finReference,
				    t1.depositorid,
				    t1.collateraltype,
				    t1.collateralccy,
				    t1.maxcollateralvalue,
				    t1.specialltv,
				    t1.collateralloc,
				    t1.valuator,
				    t1.expirydate,
				    t1.reviewfrequency,
				    t1.nextreviewdate,
				    t1.multiloanassignment,
				    t1.thirdpartyassignment,
				    t1.remarks,
				    t1.collateralvalue,
				    t1.bankltv,
				    t1.bankvaluation,
				    t1.version,
				    t1.lastmntby,
				    t1.lastmnton,
				    t1.recordstatus,
				    t1.rolecode,
				    t1.nextrolecode,
				    t1.taskid,
				    t1.nexttaskid,
				    t1.recordtype,
				    t1.workflowid,
				    t1.createdby,
				    t1.createdon,
				    t1.status,
				    t2.custcif AS depositorcif,
				    t3.collateraldesc AS collateraltypename,
				    t2.custshrtname AS depositorname
				   FROM collateralsetup t1
				     JOIN customers t2 ON t2.custid = t1.depositorid
				     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
				  WHERE NOT (EXISTS ( SELECT 1
				           FROM collateralsetup_temp
				          WHERE collateralsetup_temp.collateralref = t1.collateralref))
		</createView>
	</changeSet>
	
	<changeSet id="11.1" author="Durgaprasad G">
		<createView viewName="collateralsetup_aview" replaceIfExists="true">
			SELECT t1.collateralref,
		    t1.finReference,
		    t1.depositorid,
		    t1.collateraltype,
		    t1.collateralccy,
		    t1.maxcollateralvalue,
		    t1.specialltv,
		    t1.collateralloc,
		    t1.valuator,
		    t1.expirydate,
		    t1.reviewfrequency,
		    t1.nextreviewdate,
		    t1.multiloanassignment,
		    t1.thirdpartyassignment,
		    t1.remarks,
		    t1.collateralvalue,
		    t1.bankltv,
		    t1.bankvaluation,
		    t1.version,
		    t1.lastmntby,
		    t1.lastmnton,
		    t1.recordstatus,
		    t1.rolecode,
		    t1.nextrolecode,
		    t1.taskid,
		    t1.nexttaskid,
		    t1.recordtype,
		    t1.workflowid,
		    t1.createdby,
		    t1.createdon,
		    t1.status,
		    t2.custcif AS depositorcif,
		    t3.collateraldesc AS collateraltypename,
		    t2.custshrtname AS depositorname
		   FROM collateralsetup t1
		     JOIN customers t2 ON t2.custid = t1.depositorid
		     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
		</createView>
	</changeSet>
	
	<changeSet id="12.1" author="Durgaprasad G">
		<createView viewName="collateralsetup_tview" replaceIfExists="true">
			SELECT t1.collateralref,
		    t1.finReference,
		    t1.depositorid,
		    t1.collateraltype,
		    t1.collateralccy,
		    t1.maxcollateralvalue,
		    t1.specialltv,
		    t1.collateralloc,
		    t1.valuator,
		    t1.expirydate,
		    t1.reviewfrequency,
		    t1.nextreviewdate,
		    t1.multiloanassignment,
		    t1.thirdpartyassignment,
		    t1.remarks,
		    t1.collateralvalue,
		    t1.bankltv,
		    t1.bankvaluation,
		    t1.version,
		    t1.lastmntby,
		    t1.lastmnton,
		    t1.recordstatus,
		    t1.rolecode,
		    t1.nextrolecode,
		    t1.taskid,
		    t1.nexttaskid,
		    t1.recordtype,
		    t1.workflowid,
		    t1.createdby,
		    t1.createdon,
		    t1.status,
		    t2.custcif AS depositorcif,
		    t3.collateraldesc AS collateraltypename,
		    t2.custshrtname AS depositorname
		   FROM collateralsetup_temp t1
		     JOIN customers t2 ON t2.custid = t1.depositorid
		     JOIN collateralstructure t3 ON t3.collateraltype = t1.collateraltype
		</createView>
	</changeSet>
	 
	 <changeSet id="13" author="Durgaprasad G">
	 	<createView viewName="verification_tv_view" replaceIfExists="true">
			SELECT tv.verificationid,
		    tv.agentcode,
		    tv.agentname,
		    tv.type,
		    tv.verifieddate,
		    tv.status,
		    cs.collateraltype,
		    cs.collateralccy,
		    cs.collateralloc,
		    tv.reason,
		    tv.valuationamount,
		    r1.code AS reasoncode,
		    r1.description AS reasondesc,
		    tv.summaryremarks,
		    tv.sourceformname,
		    tv.verificationformname,
		    tv.version,
		    tv.lastmntby,
		    tv.lastmnton,
		    tv.recordstatus,
		    tv.rolecode,
		    tv.nextrolecode,
		    tv.taskid,
		    tv.nexttaskid,
		    tv.recordtype,
		    tv.workflowid,
		    tv.observationremarks,
		    c.custcif AS cif,
		    v.keyreference,
		    v.createdon,
		    v.agency,
		    a.dealername AS agencyname,
		    v.custid,
		    c.custshrtname AS custname,
		    cs.collateralref,
		    cpnh.phonenumber AS contactnumber1,
		    cpnl.phonenumber AS contactnumber2
		    FROM verification_tv_temp tv
		    JOIN verifications v ON v.id = tv.verificationid
		    JOIN  
		    (Select collateraltype, collateralccy, collateralloc, collateralref from collateralsetup_temp union
			Select collateraltype, collateralccy, collateralloc, collateralref from collateralsetup csp
			WHERE NOT (EXISTS ( SELECT 1  FROM collateralsetup_temp  
			WHERE collateralsetup_temp.collateralref = csp.collateralref)))  
		    
			cs ON cs.collateralref = v.referencefor 
		    JOIN collateralstructure cst ON cst.collateraltype = cs.collateraltype
		    LEFT JOIN amtvehicledealer a ON a.dealerid = v.agency
		    LEFT JOIN customers c ON c.custid = v.custid
		    LEFT JOIN customerphonenumbers cpnh ON cpnh.phonecustid = c.custid AND cpnh.phonetypepriority = 5
		    LEFT JOIN customerphonenumbers cpnl ON cpnl.phonecustid = c.custid AND cpnl.phonetypepriority = 4
		    LEFT JOIN reasons r1 ON r1.id = tv.reason
		UNION ALL
		 SELECT tv.verificationid,
		    tv.agentcode,
		    tv.agentname,
		    tv.type,
		    tv.verifieddate,
		    tv.status,
		    cs.collateraltype,
		    cs.collateralccy,
		    cs.collateralloc,
		    tv.reason,
		    tv.valuationamount,
		    r1.code AS reasoncode,
		    r1.description AS reasondesc,
		    tv.summaryremarks,
		    tv.sourceformname,
		    tv.verificationformname,
		    tv.version,
		    tv.lastmntby,
		    tv.lastmnton,
		    tv.recordstatus,
		    tv.rolecode,
		    tv.nextrolecode,
		    tv.taskid,
		    tv.nexttaskid,
		    tv.recordtype,
		    tv.workflowid,
		    tv.observationremarks,
		    c.custcif AS cif,
		    v.keyreference,
		    v.createdon,
		    v.agency,
		    a.dealername AS agencyname,
		    v.custid,
		    c.custshrtname AS custname,
		    cs.collateralref,
		    cpnh.phonenumber AS contactnumber1,
		    cpnl.phonenumber AS contactnumber2
		    FROM verification_tv tv
		    JOIN verifications v ON v.id = tv.verificationid
			JOIN 
		    (Select collateraltype, collateralccy, collateralloc, collateralref from collateralsetup_temp union
			Select collateraltype, collateralccy, collateralloc, collateralref from collateralsetup csp
			WHERE NOT (EXISTS ( SELECT 1  FROM collateralsetup_temp  
			WHERE collateralsetup_temp.collateralref = csp.collateralref)))  
		     
			 cs ON cs.collateralref  = v.referencefor 
		     JOIN collateralstructure cst ON cst.collateraltype = cs.collateraltype
		     LEFT JOIN amtvehicledealer a ON a.dealerid = v.agency
		     LEFT JOIN customers c ON c.custid = v.custid
		     LEFT JOIN customerphonenumbers cpnh ON cpnh.phonecustid = c.custid AND cpnh.phonetypepriority = 5
		     LEFT JOIN customerphonenumbers cpnl ON cpnl.phonecustid = c.custid AND cpnl.phonetypepriority = 4
		     LEFT JOIN reasons r1 ON r1.id = tv.reason
		  WHERE NOT (EXISTS ( SELECT 1
		           FROM verification_tv_temp
		          WHERE verification_tv_temp.verificationid = tv.verificationid))
	 	
	 	</createView>
	 </changeSet>
	 
	 <changeSet id="14.1" author="Durgaprasad G">
	 	<createView viewName="verification_lv_view" replaceIfExists="true">
			SELECT t.verificationid,
		    t.verificationformname,
		    t.agentcode,
		    t.agentname,
		    t.verificationdate,
		    t.status,
		    t.reason,
		    t.reasoncode,
		    t.reasondesc,
		    t.version,
		    t.lastmntby,
		    t.lastmnton,
		    t.recordstatus,
		    t.rolecode,
		    t.nextrolecode,
		    t.taskid,
		    t.nexttaskid,
		    t.recordtype,
		    t.workflowid,
		    t.remarks,
		    t.cif,
		    t.keyreference,
		    t.referencefor,
		    t.createdon,
		    t.agency,
		    t.custid,
		    t.custcif,
		    t.custname,
		    t.collateraltype,
		    t.agencyname
		   FROM ( SELECT lv.verificationid,
		            lv.verificationformname,
		            lv.agentcode,
		            lv.agentname,
		            lv.verificationdate,
		            lv.status,
		            lv.reason,
		            r1.code AS reasoncode,
		            r1.description AS reasondesc,
		            lv.version,
		            lv.lastmntby,
		            lv.lastmnton,
		            lv.recordstatus,
		            lv.rolecode,
		            lv.nextrolecode,
		            lv.taskid,
		            lv.nexttaskid,
		            lv.recordtype,
		            lv.workflowid,
		            lv.remarks,
		            c.custcif AS cif,
		            v.keyreference,
		            v.referencefor,
		            v.createdon,
		            v.agency,
		            c.custid,
		            c.custcif,
		            c.custshrtname AS custname,
		            cs.collateraltype,
		            a.dealername AS agencyname
		           FROM verification_lv_temp lv
		             JOIN verifications v ON v.id = lv.verificationid
		             JOIN customers c ON c.custcif = v.reference 
		             JOIN ( SELECT collateralsetup.collateraltype,
		                    collateralsetup.collateralref
		                   FROM collateralsetup
		                UNION
		                 SELECT collateralsetup_temp.collateraltype,
		                    collateralsetup_temp.collateralref
		                   FROM collateralsetup_temp) cs ON cs.collateralref  = v.referencefor 
		             LEFT JOIN reasons r1 ON r1.id = lv.reason
		             LEFT JOIN amtvehicledealer a ON a.dealerid = v.agency
		        UNION ALL
		         SELECT lv.verificationid,
		            lv.verificationformname,
		            lv.agentcode,
		            lv.agentname,
		            lv.verificationdate,
		            lv.status,
		            lv.reason,
		            r1.code AS reasoncode,
		            r1.description AS reasondesc,
		            lv.version,
		            lv.lastmntby,
		            lv.lastmnton,
		            lv.recordstatus,
		            lv.rolecode,
		            lv.nextrolecode,
		            lv.taskid,
		            lv.nexttaskid,
		            lv.recordtype,
		            lv.workflowid,
		            lv.remarks,
		            c.custcif AS cif,
		            v.keyreference,
		            v.referencefor,
		            v.createdon,
		            v.agency,
		            c.custid,
		            c.custcif,
		            c.custshrtname AS custname,
		            cs.collateraltype,
		            a.dealername AS agencyname
		           FROM verification_lv lv
		             JOIN verifications v ON v.id = lv.verificationid
		             JOIN customers c ON c.custcif  = v.reference 
		             JOIN ( SELECT collateralsetup.collateraltype,
		                    collateralsetup.collateralref
		                   FROM collateralsetup
		                UNION
		                 SELECT collateralsetup_temp.collateraltype,
		                    collateralsetup_temp.collateralref
		                   FROM collateralsetup_temp) cs ON cs.collateralref  = v.referencefor 
		             LEFT JOIN reasons r1 ON r1.id = lv.reason
		             LEFT JOIN amtvehicledealer a ON a.dealerid = v.agency
		          WHERE NOT (EXISTS ( SELECT 1
		                   FROM verification_lv_temp
		                  WHERE verification_lv_temp.verificationid = lv.verificationid))) t
	 	</createView>
	 </changeSet>
	 
	 <changeSet id="15.1" author="Durgaprasad G">
		<createView viewName="collateralassignment_CTView" replaceIfExists="true">
				SELECT ca.module,
			    ca.reference,
			    ca.collateralref,
			    ca.assignperc,
			    cs.collateralccy,
			    ca.active,
			    cs.collateralvalue,
			    cs.bankvaluation,
			    t.totassignperc - ca.assignperc AS totassignperc,
			    fm.fincurrassetvalue - fm.downpayment + fm.feechargeamt + fm.insuranceamt - fm.finrepaymentamount AS utilizedamount,
			    ca.version,
			    ca.lastmntby,
			    ca.lastmnton,
			    ca.recordstatus,
			    ca.rolecode,
			    ca.nextrolecode,
			    ca.taskid,
			    ca.nexttaskid,
			    ca.recordtype,
			    ca.workflowid,
			    cs.specialltv,
			    cs.bankltv,
			    ca.hostreference
			   FROM collateralassignment_temp ca
			     JOIN collateralsetup_temp cs ON ca.collateralref = cs.collateralref
			     LEFT JOIN ( SELECT t1.collateralref,
			            sum(t1.assignperc) AS totassignperc
			           FROM ( SELECT collateralassignment_temp.reference,
			                    collateralassignment_temp.collateralref,
			                    collateralassignment_temp.assignperc
			                   FROM collateralassignment_temp
			                UNION
			                 SELECT ca_1.reference,
			                    ca_1.collateralref,
			                    ca_1.assignperc
			                   FROM collateralassignment ca_1
			                  WHERE NOT (EXISTS ( SELECT 1
			                           FROM collateralassignment_temp
			                          WHERE collateralassignment_temp.collateralref = ca_1.collateralref AND collateralassignment_temp.module = ca_1.module AND collateralassignment_temp.reference = ca_1.reference))) t1
			          GROUP BY t1.collateralref) t ON t.collateralref = ca.collateralref
			     LEFT JOIN financemain_temp fm ON ca.reference = fm.finreference
	     </createView>
	</changeSet>
	
	<changeSet id="16" author="Durgaprasad g">
		<dropForeignKeyConstraint baseTableName="verifications" constraintName="fk_verfctions_custid"/>
	</changeSet>
	
	<changeSet id="17" author="Durgaprasad g">
		<sql>
			UPDATE SEQSECRIGHTS SET SEQNO= (SELECT MAX(RIGHTID) FROM SECRIGHTS);
			UPDATE SEQSECGROUPS SET SEQNO= (SELECT MAX(GRPID) FROM SECGROUPS);
			
            INSERT INTO SECRIGHTS SELECT (SELECT MAX(RIGHTID)+1 FROM SECRIGHTS), 3, 'CollateralSetupDialog_DocumentDetails','CollateralSetupDialog',0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0 FROM SEQSECRIGHTS WHERE 0=0; 
			
			INSERT INTO SECGROUPRIGHTS VALUES((SELECT MAX(GRPRIGHTID)+1 FROM SECGROUPRIGHTS), (SELECT GRPID  FROM SECGROUPS WHERE GRPCODE='COLLATERALSETUP_MAKER') ,(SELECT RIGHTID FROM SECRIGHTS WHERE RIGHTNAME='CollateralSetupDialog_DocumentDetails'), 1, 0,1000,CURRENT_TIMESTAMP,' ',' ',' ',' ',' ',' ',0);
		
			UPDATE SEQSECRIGHTS SET SEQNO= (SELECT MAX(RIGHTID) FROM SECRIGHTS);
			UPDATE SEQSECGROUPS SET SEQNO= (SELECT MAX(GRPID) FROM SECGROUPS);
		</sql>
	</changeSet>
</databaseChangeLog>
	