<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

	<!-- beforeEOD -->
	<bean id="beforeEODTaskLet" class="com.pennant.backend.endofday.tasklet.BeforeEOD" />

	<!-- loanCancel -->
	<bean id="loanCancelTaskLet" class="com.pennant.backend.endofday.tasklet.AutoFinanceCancellation" />

	<!-- prepareCustomerQueue -->
	<bean id="prepareCustomerQueueTaskLet" class="com.pennant.backend.endofday.tasklet.PrepareCustomerQueue" />

	<!-- MicroEOD -->
	<bean id="microEODTaskLet" class="com.pennant.backend.endofday.tasklet.MicroEOD" />

	<bean id="microEODMonitorTaskLet" class="com.pennant.backend.endofday.tasklet.MicroEODMonitor" />

	<bean id="microEODDecider" class="com.pennant.backend.endofday.limitdecider.MicroEODDecider" />

	<bean id="completeEODDecider" class="com.pennant.backend.endofday.limitdecider.CompleteEOD" />

	<bean id="snapShotPreparationTaskLet" class="com.pennant.backend.endofday.tasklet.SnapShotPreparation" />

	<!-- prepareCustomerGroupQueue -->
	<bean id="prepareCustomerGroupQueueTaskLet" class="com.pennant.backend.endofday.tasklet.PrepareCustomerGroupQueue" />

	<bean id="institutionLimitUpdateTaskLet" class="com.pennant.backend.endofday.tasklet.InstitutionLimitUpdate" />

	<bean id="limitCustomerGroupsUpdateTaskLet" class="com.pennant.backend.endofday.tasklet.LimitCustomerGroupsUpdate" />

	<bean id="retailcibilTaskLet" class="com.pennant.backend.endofday.tasklet.RetailCibil" />

	<bean id="corporatecibilTaskLet" class="com.pennant.backend.endofday.tasklet.CorporateCibil" />

	<bean id="datesUpdateTaskLet" class="com.pennant.backend.endofday.tasklet.DatesUpdate" parent="sequenceDao" />

	<bean id="limitsUpdateTaskLet" class="com.pennant.backend.endofday.tasklet.LimitsUpdate" />

	<!-- Start of the month Decider -->
	<bean id="startOfMonthDecider" class="com.pennant.backend.endofday.limitdecider.StartOfMonthDecider" />
	<!-- End Of Month Decider -->
	<bean id="endOfMonthDecider" class="com.pennant.backend.endofday.limitdecider.EndOfMonthDecider" />


	<!-- To be deleted -->

	<!-- Audit Data Purging -->
	<bean id="auditDataPurgingTaskLet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="auditDataPurgingTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
			</props>
		</property>
	</bean>
	<bean id="auditDataPurgingTarget" class="com.pennant.backend.endofday.tasklet.AuditDataPurging">
		<property name="dataPurgingProcess" ref="dataPurgingProcess" />
	</bean>

	<!-- Notifications -->
	<bean id="notificationTasklet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="notificationTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<bean id="notificationTarget" class="com.pennant.backend.endofday.tasklet.Notification">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Not used -->
	<!-- Backup Data base Before Eod -->
	<bean id="backupDatabaseBeforeEodTaskLet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="backupDatabaseTargetBeforeEod" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
			</props>
		</property>
	</bean>
	<bean id="backupDatabaseTargetBeforeEod" class="com.pennant.backend.endofday.tasklet.BackupDatabaseTaskLet">
		<property name="backupDatabase" ref="backupDatabase" />
		<property name="beforeEod" value="true" />
	</bean>
	<!-- Backup Data base After Eod -->
	<bean id="backupDatabaseAfterEodTaskLet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="backupDatabaseTargetAfterEod" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
			</props>
		</property>
	</bean>
	<bean id="backupDatabaseTargetAfterEod" class="com.pennant.backend.endofday.tasklet.BackupDatabaseTaskLet">
		<property name="backupDatabase" ref="backupDatabase" />
		<property name="beforeEod" value="false" />
	</bean>
	<!-- Capitalization Postings -->
	<bean id="capitalizationPostingsTasklet" class="com.pennant.backend.endofday.tasklet.CapitalizationPostings">
		<property name="financeProfitDetailDAO" ref="profitDetailsDAO" />
		<property name="suspensePostingUtil" ref="suspensePostingUtil" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Overdue Details Daily Download -->
	<bean id="oDDetailDownloadTasklet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="oDDetailTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<bean id="oDDetailTarget" class="com.pennant.backend.endofday.tasklet.ODDetailDownload">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Commitment Expiry Details Updation -->
	<bean id="commitmentExpiryProcessTasklet" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="commitmentExpiryProcessTarget" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<bean id="commitmentExpiryProcessTarget" class="com.pennant.backend.endofday.tasklet.CommitmentExpiryProcess">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="processInActiveFinancesTaskLet" class="com.pennant.backend.endofday.tasklet.ProcessInActiveFinances" />

	<bean id="collectionDataDownLoadTaskLet" class="com.pennant.backend.endofday.tasklet.CollectionDataDownload" />

	<bean id="collectionNotificationTaskLet" class="com.pennant.backend.endofday.tasklet.CollectionNotification" />

	<bean id="ledgerNotificationTaskLet" class="com.pennant.backend.endofday.tasklet.LedgerNotification" />

	<bean id="ledgerDownloadTaskLet" class="com.pennant.backend.endofday.tasklet.LedgerDownload" />

	<bean id="loadCollateralRevaluationDataTaskLet" class="com.pennanttech.pff.eod.collateral.reval.LoadCollateralRevaluationDataTasklet"
		parent="basicDao" />

	<bean id="collateralRevaluationItemReader" class="com.pennanttech.pff.eod.collateral.reval.CollateralRevaluationItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="rowMapper">
			<bean class="com.pennanttech.pff.eod.collateral.reval.CollateralRevaluationRowMapper" />
		</property>
	</bean>


	<bean id="collateralRevaluationProcessor" class="com.pennanttech.pff.eod.collateral.reval.CollateralRevaluationProcessor"
		scope="step" parent="basicDao" />

	<bean id="collateralRevaluationRowMapper" class="com.pennanttech.pff.eod.collateral.reval.CollateralRevaluationRowMapper"
		scope="step" />
	<bean id="collateralRevaluationItemWriter" class="com.pennanttech.pff.eod.collateral.reval.CollateralRevaluationItemWriter"
		scope="step" parent="basicDao" />

	<bean id="gSTDownloadTaskLet" class="com.pennant.backend.endofday.tasklet.GSTDownload" />

	<bean id="loadAutoKnockOffProcessTasklet" class="com.pennanttech.pff.eod.auto.knockoff.reval.LoadAutoKnockOffProcessDataTasklet"
		parent="basicDao">
		<property name="autoKnockOffDAO" ref="autoKnockOffDAO" />
	</bean>

	<bean id="autoKnockOffProcessItemReader" class="com.pennanttech.pff.eod.auto.knockoff.reval.AutoKnockOffProcessTaskletItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="rowMapper">
			<bean class="com.pennanttech.pff.eod.auto.knockoff.reval.AutoKnockOffProcessRowMapper" />
		</property>
	</bean>

	<bean id="autoKnockOffProcessor" class="com.pennanttech.pff.eod.auto.knockoff.reval.AutoKnockOffProcessor" scope="step"
		parent="basicDao">
		<property name="autoKnockOffProcessService" ref="autoKnockProcessService" />
	</bean>

	<bean id="autoKnockOffProcessRowMapper" class="com.pennanttech.pff.eod.auto.knockoff.reval.AutoKnockOffProcessRowMapper"
		scope="step" />

	<bean id="autoKnockOffProcessItemWriter" class="com.pennanttech.pff.eod.auto.knockoff.reval.AutoKnockOffProcessItemWriter"
		scope="step" parent="basicDao" />

	<bean id="autoKnockOffDAO" class="com.pennant.backend.dao.applicationmaster.impl.AutoKnockOffDAOImpl" parent="basicDao" />

	<bean id="customerDataPreperationTaskLet" class="com.pennant.backend.endofday.tasklet.CustomerDataExport" />

	<bean id="masterDataPreparationTaskLet" class="com.pennant.backend.endofday.tasklet.MasterDataExport" />

	<bean id="dmsRetrieveProcessTaskLet" class="com.pennant.backend.endofday.tasklet.DMSRetrieveProcess" />

	<bean id="cashFlowPreperationTaskLet" class="com.pennant.backend.endofday.tasklet.CashFlowPreperation">
		<property name="cashFlowService" ref="cashFlowService" />
	</bean>
</beans>