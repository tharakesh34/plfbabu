<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- Configuration to retrieve values from environment variables or system 
		properties those will be used for cryptography -->
	<bean id="envVariableConfig"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
	</bean>

	<!-- Configuration that will be applied for obtaining the encryption key -->
	<bean id="encryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="envVariableConfig" />
	</bean>

	<!-- Configuration which can make use of a StringEncryptor or TextEncryptor 
		object to decrypt property values if they are encrypted in the loaded resource 
		locations -->
	<bean id="propertyConfig"
		class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="encryptor" />
		<property name="location" value="classpath:conf/PFF-Channels-Interface.properties" />
	</bean>

	<!-- Basic implementation of javax.sql.DataSource that is configured via 
		JavaBeans properties -->
	<bean id="jdbcDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${pfs.jdbc.driverClassName}" />
		<property name="url" value="${pfs.jdbc.url}" />
		<property name="username" value="${pfs.jdbc.username}" />
		<property name="password" value="${pfs.jdbc.password}" />
	</bean>

	<bean id="mqProperties" class="com.pennant.pff.channelsinterface.MQProperties">
		<property name="hostname" value="${pfs.mq.hostname}" />
		<property name="port" value="${pfs.mq.port}" />
		<property name="channel" value="${pfs.mq.channel}" />
		<property name="queueManagerName" value="${pfs.mq.queue.manager}" />
		<property name="queueName" value="${pfs.mq.queue}" />
		<property name="replyQManagerName" value="${pfs.mq.reply.queue.manager}" />
		<property name="replyQueueName" value="${pfs.mq.reply.queue}" />
		<property name="errorQueueName" value="${pfs.mq.error.queue}" />
		<property name="sslRequired" value="${MQ_SSL_REQUIRED}" />
		<property name="sslTrustStore" value="${APP_ROOT_PATH}/PFF/AHB/SSLCertificates/${MQ_SSL_TRUST_STORE}" />
		<property name="sslTrustStorePassword" value="${MQ_SSL_TRUST_STORE_PASSWORD}" />
		<property name="sslKeyStore" value="${APP_ROOT_PATH}/PFF/AHB/SSLCertificates/${MQ_SSL_KEY_STORE}" />
		<property name="sslKeyStorePassword" value="${MQ_SSL_KEY_STORE_PASSWORD}" />
		<property name="sslCipherSuite" value="${MQ_SSL_CIPHER_SUITE}" />
	</bean>

	<bean id="pffEngine" class="com.pennant.pff.channelsinterface.PFFEngine" init-method="init">
		<property name="threadCount" value="${pfs.threadCount}" />
		<property name="mqProperties" ref="mqProperties" />
		<property name="dataAccess" ref="dataAccess" />
	</bean>
	
	<bean id="dataAccess"
		class="com.pennant.pff.channelsinterface.PFFDataAccess">
		<property name="dataSource" ref="jdbcDataSource" />				
	</bean>
</beans>